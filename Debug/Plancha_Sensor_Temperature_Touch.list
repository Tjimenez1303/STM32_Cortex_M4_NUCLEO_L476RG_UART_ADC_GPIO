
Plancha_Sensor_Temperature_Touch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ea4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  08009f68  08009f68  00019f68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a514  0800a514  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800a514  0800a514  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a514  0800a514  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a514  0800a514  0001a514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a518  0800a518  0001a518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a51c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  200001dc  0800a6f8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ac  0800a6f8  000205ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110ab  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022db  00000000  00000000  000312af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  00033590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f38  00000000  00000000  00034598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012159  00000000  00000000  000354d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001250c  00000000  00000000  00047629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006c2f6  00000000  00000000  00059b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c5e2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004da4  00000000  00000000  000c5e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009f4c 	.word	0x08009f4c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	08009f4c 	.word	0x08009f4c

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	0010      	movs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f001 fa2b 	bl	80018ac <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f001 f97b 	bl	800175c <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa1d 	bl	80018ac <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fa13 	bl	80018ac <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f9a3 	bl	80017e0 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 f999 	bl	80017e0 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_cfrcmple>:
 80004bc:	4684      	mov	ip, r0
 80004be:	0008      	movs	r0, r1
 80004c0:	4661      	mov	r1, ip
 80004c2:	e7ff      	b.n	80004c4 <__aeabi_cfcmpeq>

080004c4 <__aeabi_cfcmpeq>:
 80004c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c6:	f000 f8b7 	bl	8000638 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d401      	bmi.n	80004d2 <__aeabi_cfcmpeq+0xe>
 80004ce:	2100      	movs	r1, #0
 80004d0:	42c8      	cmn	r0, r1
 80004d2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d4 <__aeabi_fcmpeq>:
 80004d4:	b510      	push	{r4, lr}
 80004d6:	f000 f843 	bl	8000560 <__eqsf2>
 80004da:	4240      	negs	r0, r0
 80004dc:	3001      	adds	r0, #1
 80004de:	bd10      	pop	{r4, pc}

080004e0 <__aeabi_fcmplt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 f8a9 	bl	8000638 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	db01      	blt.n	80004ee <__aeabi_fcmplt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmple>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 f89f 	bl	8000638 <__lesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dd01      	ble.n	8000502 <__aeabi_fcmple+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpgt>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 f84f 	bl	80005ac <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	dc01      	bgt.n	8000516 <__aeabi_fcmpgt+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_fcmpge>:
 800051c:	b510      	push	{r4, lr}
 800051e:	f000 f845 	bl	80005ac <__gesf2>
 8000522:	2800      	cmp	r0, #0
 8000524:	da01      	bge.n	800052a <__aeabi_fcmpge+0xe>
 8000526:	2000      	movs	r0, #0
 8000528:	bd10      	pop	{r4, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			; (mov r8, r8)

08000530 <__aeabi_f2uiz>:
 8000530:	219e      	movs	r1, #158	; 0x9e
 8000532:	b510      	push	{r4, lr}
 8000534:	05c9      	lsls	r1, r1, #23
 8000536:	1c04      	adds	r4, r0, #0
 8000538:	f7ff fff0 	bl	800051c <__aeabi_fcmpge>
 800053c:	2800      	cmp	r0, #0
 800053e:	d103      	bne.n	8000548 <__aeabi_f2uiz+0x18>
 8000540:	1c20      	adds	r0, r4, #0
 8000542:	f000 fa6b 	bl	8000a1c <__aeabi_f2iz>
 8000546:	bd10      	pop	{r4, pc}
 8000548:	219e      	movs	r1, #158	; 0x9e
 800054a:	1c20      	adds	r0, r4, #0
 800054c:	05c9      	lsls	r1, r1, #23
 800054e:	f000 f8b7 	bl	80006c0 <__aeabi_fsub>
 8000552:	f000 fa63 	bl	8000a1c <__aeabi_f2iz>
 8000556:	2380      	movs	r3, #128	; 0x80
 8000558:	061b      	lsls	r3, r3, #24
 800055a:	469c      	mov	ip, r3
 800055c:	4460      	add	r0, ip
 800055e:	e7f2      	b.n	8000546 <__aeabi_f2uiz+0x16>

08000560 <__eqsf2>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	0042      	lsls	r2, r0, #1
 8000564:	0245      	lsls	r5, r0, #9
 8000566:	024e      	lsls	r6, r1, #9
 8000568:	004c      	lsls	r4, r1, #1
 800056a:	0fc3      	lsrs	r3, r0, #31
 800056c:	0a6d      	lsrs	r5, r5, #9
 800056e:	2001      	movs	r0, #1
 8000570:	0e12      	lsrs	r2, r2, #24
 8000572:	0a76      	lsrs	r6, r6, #9
 8000574:	0e24      	lsrs	r4, r4, #24
 8000576:	0fc9      	lsrs	r1, r1, #31
 8000578:	2aff      	cmp	r2, #255	; 0xff
 800057a:	d006      	beq.n	800058a <__eqsf2+0x2a>
 800057c:	2cff      	cmp	r4, #255	; 0xff
 800057e:	d003      	beq.n	8000588 <__eqsf2+0x28>
 8000580:	42a2      	cmp	r2, r4
 8000582:	d101      	bne.n	8000588 <__eqsf2+0x28>
 8000584:	42b5      	cmp	r5, r6
 8000586:	d006      	beq.n	8000596 <__eqsf2+0x36>
 8000588:	bd70      	pop	{r4, r5, r6, pc}
 800058a:	2d00      	cmp	r5, #0
 800058c:	d1fc      	bne.n	8000588 <__eqsf2+0x28>
 800058e:	2cff      	cmp	r4, #255	; 0xff
 8000590:	d1fa      	bne.n	8000588 <__eqsf2+0x28>
 8000592:	2e00      	cmp	r6, #0
 8000594:	d1f8      	bne.n	8000588 <__eqsf2+0x28>
 8000596:	428b      	cmp	r3, r1
 8000598:	d006      	beq.n	80005a8 <__eqsf2+0x48>
 800059a:	2001      	movs	r0, #1
 800059c:	2a00      	cmp	r2, #0
 800059e:	d1f3      	bne.n	8000588 <__eqsf2+0x28>
 80005a0:	0028      	movs	r0, r5
 80005a2:	1e43      	subs	r3, r0, #1
 80005a4:	4198      	sbcs	r0, r3
 80005a6:	e7ef      	b.n	8000588 <__eqsf2+0x28>
 80005a8:	2000      	movs	r0, #0
 80005aa:	e7ed      	b.n	8000588 <__eqsf2+0x28>

080005ac <__gesf2>:
 80005ac:	b570      	push	{r4, r5, r6, lr}
 80005ae:	0042      	lsls	r2, r0, #1
 80005b0:	0245      	lsls	r5, r0, #9
 80005b2:	024e      	lsls	r6, r1, #9
 80005b4:	004c      	lsls	r4, r1, #1
 80005b6:	0fc3      	lsrs	r3, r0, #31
 80005b8:	0a6d      	lsrs	r5, r5, #9
 80005ba:	0e12      	lsrs	r2, r2, #24
 80005bc:	0a76      	lsrs	r6, r6, #9
 80005be:	0e24      	lsrs	r4, r4, #24
 80005c0:	0fc8      	lsrs	r0, r1, #31
 80005c2:	2aff      	cmp	r2, #255	; 0xff
 80005c4:	d01b      	beq.n	80005fe <__gesf2+0x52>
 80005c6:	2cff      	cmp	r4, #255	; 0xff
 80005c8:	d00e      	beq.n	80005e8 <__gesf2+0x3c>
 80005ca:	2a00      	cmp	r2, #0
 80005cc:	d11b      	bne.n	8000606 <__gesf2+0x5a>
 80005ce:	2c00      	cmp	r4, #0
 80005d0:	d101      	bne.n	80005d6 <__gesf2+0x2a>
 80005d2:	2e00      	cmp	r6, #0
 80005d4:	d01c      	beq.n	8000610 <__gesf2+0x64>
 80005d6:	2d00      	cmp	r5, #0
 80005d8:	d00c      	beq.n	80005f4 <__gesf2+0x48>
 80005da:	4283      	cmp	r3, r0
 80005dc:	d01c      	beq.n	8000618 <__gesf2+0x6c>
 80005de:	2102      	movs	r1, #2
 80005e0:	1e58      	subs	r0, r3, #1
 80005e2:	4008      	ands	r0, r1
 80005e4:	3801      	subs	r0, #1
 80005e6:	bd70      	pop	{r4, r5, r6, pc}
 80005e8:	2e00      	cmp	r6, #0
 80005ea:	d122      	bne.n	8000632 <__gesf2+0x86>
 80005ec:	2a00      	cmp	r2, #0
 80005ee:	d1f4      	bne.n	80005da <__gesf2+0x2e>
 80005f0:	2d00      	cmp	r5, #0
 80005f2:	d1f2      	bne.n	80005da <__gesf2+0x2e>
 80005f4:	2800      	cmp	r0, #0
 80005f6:	d1f6      	bne.n	80005e6 <__gesf2+0x3a>
 80005f8:	2001      	movs	r0, #1
 80005fa:	4240      	negs	r0, r0
 80005fc:	e7f3      	b.n	80005e6 <__gesf2+0x3a>
 80005fe:	2d00      	cmp	r5, #0
 8000600:	d117      	bne.n	8000632 <__gesf2+0x86>
 8000602:	2cff      	cmp	r4, #255	; 0xff
 8000604:	d0f0      	beq.n	80005e8 <__gesf2+0x3c>
 8000606:	2c00      	cmp	r4, #0
 8000608:	d1e7      	bne.n	80005da <__gesf2+0x2e>
 800060a:	2e00      	cmp	r6, #0
 800060c:	d1e5      	bne.n	80005da <__gesf2+0x2e>
 800060e:	e7e6      	b.n	80005de <__gesf2+0x32>
 8000610:	2000      	movs	r0, #0
 8000612:	2d00      	cmp	r5, #0
 8000614:	d0e7      	beq.n	80005e6 <__gesf2+0x3a>
 8000616:	e7e2      	b.n	80005de <__gesf2+0x32>
 8000618:	42a2      	cmp	r2, r4
 800061a:	dc05      	bgt.n	8000628 <__gesf2+0x7c>
 800061c:	dbea      	blt.n	80005f4 <__gesf2+0x48>
 800061e:	42b5      	cmp	r5, r6
 8000620:	d802      	bhi.n	8000628 <__gesf2+0x7c>
 8000622:	d3e7      	bcc.n	80005f4 <__gesf2+0x48>
 8000624:	2000      	movs	r0, #0
 8000626:	e7de      	b.n	80005e6 <__gesf2+0x3a>
 8000628:	4243      	negs	r3, r0
 800062a:	4158      	adcs	r0, r3
 800062c:	0040      	lsls	r0, r0, #1
 800062e:	3801      	subs	r0, #1
 8000630:	e7d9      	b.n	80005e6 <__gesf2+0x3a>
 8000632:	2002      	movs	r0, #2
 8000634:	4240      	negs	r0, r0
 8000636:	e7d6      	b.n	80005e6 <__gesf2+0x3a>

08000638 <__lesf2>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	0042      	lsls	r2, r0, #1
 800063c:	0245      	lsls	r5, r0, #9
 800063e:	024e      	lsls	r6, r1, #9
 8000640:	004c      	lsls	r4, r1, #1
 8000642:	0fc3      	lsrs	r3, r0, #31
 8000644:	0a6d      	lsrs	r5, r5, #9
 8000646:	0e12      	lsrs	r2, r2, #24
 8000648:	0a76      	lsrs	r6, r6, #9
 800064a:	0e24      	lsrs	r4, r4, #24
 800064c:	0fc8      	lsrs	r0, r1, #31
 800064e:	2aff      	cmp	r2, #255	; 0xff
 8000650:	d00b      	beq.n	800066a <__lesf2+0x32>
 8000652:	2cff      	cmp	r4, #255	; 0xff
 8000654:	d00d      	beq.n	8000672 <__lesf2+0x3a>
 8000656:	2a00      	cmp	r2, #0
 8000658:	d11f      	bne.n	800069a <__lesf2+0x62>
 800065a:	2c00      	cmp	r4, #0
 800065c:	d116      	bne.n	800068c <__lesf2+0x54>
 800065e:	2e00      	cmp	r6, #0
 8000660:	d114      	bne.n	800068c <__lesf2+0x54>
 8000662:	2000      	movs	r0, #0
 8000664:	2d00      	cmp	r5, #0
 8000666:	d010      	beq.n	800068a <__lesf2+0x52>
 8000668:	e009      	b.n	800067e <__lesf2+0x46>
 800066a:	2d00      	cmp	r5, #0
 800066c:	d10c      	bne.n	8000688 <__lesf2+0x50>
 800066e:	2cff      	cmp	r4, #255	; 0xff
 8000670:	d113      	bne.n	800069a <__lesf2+0x62>
 8000672:	2e00      	cmp	r6, #0
 8000674:	d108      	bne.n	8000688 <__lesf2+0x50>
 8000676:	2a00      	cmp	r2, #0
 8000678:	d008      	beq.n	800068c <__lesf2+0x54>
 800067a:	4283      	cmp	r3, r0
 800067c:	d012      	beq.n	80006a4 <__lesf2+0x6c>
 800067e:	2102      	movs	r1, #2
 8000680:	1e58      	subs	r0, r3, #1
 8000682:	4008      	ands	r0, r1
 8000684:	3801      	subs	r0, #1
 8000686:	e000      	b.n	800068a <__lesf2+0x52>
 8000688:	2002      	movs	r0, #2
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	2d00      	cmp	r5, #0
 800068e:	d1f4      	bne.n	800067a <__lesf2+0x42>
 8000690:	2800      	cmp	r0, #0
 8000692:	d1fa      	bne.n	800068a <__lesf2+0x52>
 8000694:	2001      	movs	r0, #1
 8000696:	4240      	negs	r0, r0
 8000698:	e7f7      	b.n	800068a <__lesf2+0x52>
 800069a:	2c00      	cmp	r4, #0
 800069c:	d1ed      	bne.n	800067a <__lesf2+0x42>
 800069e:	2e00      	cmp	r6, #0
 80006a0:	d1eb      	bne.n	800067a <__lesf2+0x42>
 80006a2:	e7ec      	b.n	800067e <__lesf2+0x46>
 80006a4:	42a2      	cmp	r2, r4
 80006a6:	dc05      	bgt.n	80006b4 <__lesf2+0x7c>
 80006a8:	dbf2      	blt.n	8000690 <__lesf2+0x58>
 80006aa:	42b5      	cmp	r5, r6
 80006ac:	d802      	bhi.n	80006b4 <__lesf2+0x7c>
 80006ae:	d3ef      	bcc.n	8000690 <__lesf2+0x58>
 80006b0:	2000      	movs	r0, #0
 80006b2:	e7ea      	b.n	800068a <__lesf2+0x52>
 80006b4:	4243      	negs	r3, r0
 80006b6:	4158      	adcs	r0, r3
 80006b8:	0040      	lsls	r0, r0, #1
 80006ba:	3801      	subs	r0, #1
 80006bc:	e7e5      	b.n	800068a <__lesf2+0x52>
 80006be:	46c0      	nop			; (mov r8, r8)

080006c0 <__aeabi_fsub>:
 80006c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006c2:	46ce      	mov	lr, r9
 80006c4:	4647      	mov	r7, r8
 80006c6:	0243      	lsls	r3, r0, #9
 80006c8:	0a5b      	lsrs	r3, r3, #9
 80006ca:	024e      	lsls	r6, r1, #9
 80006cc:	00da      	lsls	r2, r3, #3
 80006ce:	4694      	mov	ip, r2
 80006d0:	0a72      	lsrs	r2, r6, #9
 80006d2:	4691      	mov	r9, r2
 80006d4:	0045      	lsls	r5, r0, #1
 80006d6:	004a      	lsls	r2, r1, #1
 80006d8:	b580      	push	{r7, lr}
 80006da:	0e2d      	lsrs	r5, r5, #24
 80006dc:	001f      	movs	r7, r3
 80006de:	0fc4      	lsrs	r4, r0, #31
 80006e0:	0e12      	lsrs	r2, r2, #24
 80006e2:	0fc9      	lsrs	r1, r1, #31
 80006e4:	09b6      	lsrs	r6, r6, #6
 80006e6:	2aff      	cmp	r2, #255	; 0xff
 80006e8:	d05b      	beq.n	80007a2 <__aeabi_fsub+0xe2>
 80006ea:	2001      	movs	r0, #1
 80006ec:	4041      	eors	r1, r0
 80006ee:	428c      	cmp	r4, r1
 80006f0:	d039      	beq.n	8000766 <__aeabi_fsub+0xa6>
 80006f2:	1aa8      	subs	r0, r5, r2
 80006f4:	2800      	cmp	r0, #0
 80006f6:	dd5a      	ble.n	80007ae <__aeabi_fsub+0xee>
 80006f8:	2a00      	cmp	r2, #0
 80006fa:	d06a      	beq.n	80007d2 <__aeabi_fsub+0x112>
 80006fc:	2dff      	cmp	r5, #255	; 0xff
 80006fe:	d100      	bne.n	8000702 <__aeabi_fsub+0x42>
 8000700:	e0d9      	b.n	80008b6 <__aeabi_fsub+0x1f6>
 8000702:	2280      	movs	r2, #128	; 0x80
 8000704:	04d2      	lsls	r2, r2, #19
 8000706:	4316      	orrs	r6, r2
 8000708:	281b      	cmp	r0, #27
 800070a:	dc00      	bgt.n	800070e <__aeabi_fsub+0x4e>
 800070c:	e0e9      	b.n	80008e2 <__aeabi_fsub+0x222>
 800070e:	2001      	movs	r0, #1
 8000710:	4663      	mov	r3, ip
 8000712:	1a18      	subs	r0, r3, r0
 8000714:	0143      	lsls	r3, r0, #5
 8000716:	d400      	bmi.n	800071a <__aeabi_fsub+0x5a>
 8000718:	e0b4      	b.n	8000884 <__aeabi_fsub+0x1c4>
 800071a:	0180      	lsls	r0, r0, #6
 800071c:	0987      	lsrs	r7, r0, #6
 800071e:	0038      	movs	r0, r7
 8000720:	f002 f8a0 	bl	8002864 <__clzsi2>
 8000724:	3805      	subs	r0, #5
 8000726:	4087      	lsls	r7, r0
 8000728:	4285      	cmp	r5, r0
 800072a:	dc00      	bgt.n	800072e <__aeabi_fsub+0x6e>
 800072c:	e0cc      	b.n	80008c8 <__aeabi_fsub+0x208>
 800072e:	1a2d      	subs	r5, r5, r0
 8000730:	48b5      	ldr	r0, [pc, #724]	; (8000a08 <__aeabi_fsub+0x348>)
 8000732:	4038      	ands	r0, r7
 8000734:	0743      	lsls	r3, r0, #29
 8000736:	d004      	beq.n	8000742 <__aeabi_fsub+0x82>
 8000738:	230f      	movs	r3, #15
 800073a:	4003      	ands	r3, r0
 800073c:	2b04      	cmp	r3, #4
 800073e:	d000      	beq.n	8000742 <__aeabi_fsub+0x82>
 8000740:	3004      	adds	r0, #4
 8000742:	0143      	lsls	r3, r0, #5
 8000744:	d400      	bmi.n	8000748 <__aeabi_fsub+0x88>
 8000746:	e0a0      	b.n	800088a <__aeabi_fsub+0x1ca>
 8000748:	1c6a      	adds	r2, r5, #1
 800074a:	2dfe      	cmp	r5, #254	; 0xfe
 800074c:	d100      	bne.n	8000750 <__aeabi_fsub+0x90>
 800074e:	e08d      	b.n	800086c <__aeabi_fsub+0x1ac>
 8000750:	0180      	lsls	r0, r0, #6
 8000752:	0a47      	lsrs	r7, r0, #9
 8000754:	b2d2      	uxtb	r2, r2
 8000756:	05d0      	lsls	r0, r2, #23
 8000758:	4338      	orrs	r0, r7
 800075a:	07e4      	lsls	r4, r4, #31
 800075c:	4320      	orrs	r0, r4
 800075e:	bcc0      	pop	{r6, r7}
 8000760:	46b9      	mov	r9, r7
 8000762:	46b0      	mov	r8, r6
 8000764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000766:	1aa8      	subs	r0, r5, r2
 8000768:	4680      	mov	r8, r0
 800076a:	2800      	cmp	r0, #0
 800076c:	dd45      	ble.n	80007fa <__aeabi_fsub+0x13a>
 800076e:	2a00      	cmp	r2, #0
 8000770:	d070      	beq.n	8000854 <__aeabi_fsub+0x194>
 8000772:	2dff      	cmp	r5, #255	; 0xff
 8000774:	d100      	bne.n	8000778 <__aeabi_fsub+0xb8>
 8000776:	e09e      	b.n	80008b6 <__aeabi_fsub+0x1f6>
 8000778:	2380      	movs	r3, #128	; 0x80
 800077a:	04db      	lsls	r3, r3, #19
 800077c:	431e      	orrs	r6, r3
 800077e:	4643      	mov	r3, r8
 8000780:	2b1b      	cmp	r3, #27
 8000782:	dc00      	bgt.n	8000786 <__aeabi_fsub+0xc6>
 8000784:	e0d2      	b.n	800092c <__aeabi_fsub+0x26c>
 8000786:	2001      	movs	r0, #1
 8000788:	4460      	add	r0, ip
 800078a:	0143      	lsls	r3, r0, #5
 800078c:	d57a      	bpl.n	8000884 <__aeabi_fsub+0x1c4>
 800078e:	3501      	adds	r5, #1
 8000790:	2dff      	cmp	r5, #255	; 0xff
 8000792:	d06b      	beq.n	800086c <__aeabi_fsub+0x1ac>
 8000794:	2301      	movs	r3, #1
 8000796:	4a9d      	ldr	r2, [pc, #628]	; (8000a0c <__aeabi_fsub+0x34c>)
 8000798:	4003      	ands	r3, r0
 800079a:	0840      	lsrs	r0, r0, #1
 800079c:	4010      	ands	r0, r2
 800079e:	4318      	orrs	r0, r3
 80007a0:	e7c8      	b.n	8000734 <__aeabi_fsub+0x74>
 80007a2:	2e00      	cmp	r6, #0
 80007a4:	d020      	beq.n	80007e8 <__aeabi_fsub+0x128>
 80007a6:	428c      	cmp	r4, r1
 80007a8:	d023      	beq.n	80007f2 <__aeabi_fsub+0x132>
 80007aa:	0028      	movs	r0, r5
 80007ac:	38ff      	subs	r0, #255	; 0xff
 80007ae:	2800      	cmp	r0, #0
 80007b0:	d039      	beq.n	8000826 <__aeabi_fsub+0x166>
 80007b2:	1b57      	subs	r7, r2, r5
 80007b4:	2d00      	cmp	r5, #0
 80007b6:	d000      	beq.n	80007ba <__aeabi_fsub+0xfa>
 80007b8:	e09d      	b.n	80008f6 <__aeabi_fsub+0x236>
 80007ba:	4663      	mov	r3, ip
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d100      	bne.n	80007c2 <__aeabi_fsub+0x102>
 80007c0:	e0db      	b.n	800097a <__aeabi_fsub+0x2ba>
 80007c2:	1e7b      	subs	r3, r7, #1
 80007c4:	2f01      	cmp	r7, #1
 80007c6:	d100      	bne.n	80007ca <__aeabi_fsub+0x10a>
 80007c8:	e10d      	b.n	80009e6 <__aeabi_fsub+0x326>
 80007ca:	2fff      	cmp	r7, #255	; 0xff
 80007cc:	d071      	beq.n	80008b2 <__aeabi_fsub+0x1f2>
 80007ce:	001f      	movs	r7, r3
 80007d0:	e098      	b.n	8000904 <__aeabi_fsub+0x244>
 80007d2:	2e00      	cmp	r6, #0
 80007d4:	d100      	bne.n	80007d8 <__aeabi_fsub+0x118>
 80007d6:	e0a7      	b.n	8000928 <__aeabi_fsub+0x268>
 80007d8:	1e42      	subs	r2, r0, #1
 80007da:	2801      	cmp	r0, #1
 80007dc:	d100      	bne.n	80007e0 <__aeabi_fsub+0x120>
 80007de:	e0e6      	b.n	80009ae <__aeabi_fsub+0x2ee>
 80007e0:	28ff      	cmp	r0, #255	; 0xff
 80007e2:	d068      	beq.n	80008b6 <__aeabi_fsub+0x1f6>
 80007e4:	0010      	movs	r0, r2
 80007e6:	e78f      	b.n	8000708 <__aeabi_fsub+0x48>
 80007e8:	2001      	movs	r0, #1
 80007ea:	4041      	eors	r1, r0
 80007ec:	42a1      	cmp	r1, r4
 80007ee:	d000      	beq.n	80007f2 <__aeabi_fsub+0x132>
 80007f0:	e77f      	b.n	80006f2 <__aeabi_fsub+0x32>
 80007f2:	20ff      	movs	r0, #255	; 0xff
 80007f4:	4240      	negs	r0, r0
 80007f6:	4680      	mov	r8, r0
 80007f8:	44a8      	add	r8, r5
 80007fa:	4640      	mov	r0, r8
 80007fc:	2800      	cmp	r0, #0
 80007fe:	d038      	beq.n	8000872 <__aeabi_fsub+0x1b2>
 8000800:	1b51      	subs	r1, r2, r5
 8000802:	2d00      	cmp	r5, #0
 8000804:	d100      	bne.n	8000808 <__aeabi_fsub+0x148>
 8000806:	e0ae      	b.n	8000966 <__aeabi_fsub+0x2a6>
 8000808:	2aff      	cmp	r2, #255	; 0xff
 800080a:	d100      	bne.n	800080e <__aeabi_fsub+0x14e>
 800080c:	e0df      	b.n	80009ce <__aeabi_fsub+0x30e>
 800080e:	2380      	movs	r3, #128	; 0x80
 8000810:	4660      	mov	r0, ip
 8000812:	04db      	lsls	r3, r3, #19
 8000814:	4318      	orrs	r0, r3
 8000816:	4684      	mov	ip, r0
 8000818:	291b      	cmp	r1, #27
 800081a:	dc00      	bgt.n	800081e <__aeabi_fsub+0x15e>
 800081c:	e0d9      	b.n	80009d2 <__aeabi_fsub+0x312>
 800081e:	2001      	movs	r0, #1
 8000820:	0015      	movs	r5, r2
 8000822:	1980      	adds	r0, r0, r6
 8000824:	e7b1      	b.n	800078a <__aeabi_fsub+0xca>
 8000826:	20fe      	movs	r0, #254	; 0xfe
 8000828:	1c6a      	adds	r2, r5, #1
 800082a:	4210      	tst	r0, r2
 800082c:	d171      	bne.n	8000912 <__aeabi_fsub+0x252>
 800082e:	2d00      	cmp	r5, #0
 8000830:	d000      	beq.n	8000834 <__aeabi_fsub+0x174>
 8000832:	e0a6      	b.n	8000982 <__aeabi_fsub+0x2c2>
 8000834:	4663      	mov	r3, ip
 8000836:	2b00      	cmp	r3, #0
 8000838:	d100      	bne.n	800083c <__aeabi_fsub+0x17c>
 800083a:	e0d9      	b.n	80009f0 <__aeabi_fsub+0x330>
 800083c:	2200      	movs	r2, #0
 800083e:	2e00      	cmp	r6, #0
 8000840:	d100      	bne.n	8000844 <__aeabi_fsub+0x184>
 8000842:	e788      	b.n	8000756 <__aeabi_fsub+0x96>
 8000844:	1b98      	subs	r0, r3, r6
 8000846:	0143      	lsls	r3, r0, #5
 8000848:	d400      	bmi.n	800084c <__aeabi_fsub+0x18c>
 800084a:	e0e1      	b.n	8000a10 <__aeabi_fsub+0x350>
 800084c:	4663      	mov	r3, ip
 800084e:	000c      	movs	r4, r1
 8000850:	1af0      	subs	r0, r6, r3
 8000852:	e76f      	b.n	8000734 <__aeabi_fsub+0x74>
 8000854:	2e00      	cmp	r6, #0
 8000856:	d100      	bne.n	800085a <__aeabi_fsub+0x19a>
 8000858:	e0b7      	b.n	80009ca <__aeabi_fsub+0x30a>
 800085a:	0002      	movs	r2, r0
 800085c:	3a01      	subs	r2, #1
 800085e:	2801      	cmp	r0, #1
 8000860:	d100      	bne.n	8000864 <__aeabi_fsub+0x1a4>
 8000862:	e09c      	b.n	800099e <__aeabi_fsub+0x2de>
 8000864:	28ff      	cmp	r0, #255	; 0xff
 8000866:	d026      	beq.n	80008b6 <__aeabi_fsub+0x1f6>
 8000868:	4690      	mov	r8, r2
 800086a:	e788      	b.n	800077e <__aeabi_fsub+0xbe>
 800086c:	22ff      	movs	r2, #255	; 0xff
 800086e:	2700      	movs	r7, #0
 8000870:	e771      	b.n	8000756 <__aeabi_fsub+0x96>
 8000872:	20fe      	movs	r0, #254	; 0xfe
 8000874:	1c6a      	adds	r2, r5, #1
 8000876:	4210      	tst	r0, r2
 8000878:	d064      	beq.n	8000944 <__aeabi_fsub+0x284>
 800087a:	2aff      	cmp	r2, #255	; 0xff
 800087c:	d0f6      	beq.n	800086c <__aeabi_fsub+0x1ac>
 800087e:	0015      	movs	r5, r2
 8000880:	4466      	add	r6, ip
 8000882:	0870      	lsrs	r0, r6, #1
 8000884:	0743      	lsls	r3, r0, #29
 8000886:	d000      	beq.n	800088a <__aeabi_fsub+0x1ca>
 8000888:	e756      	b.n	8000738 <__aeabi_fsub+0x78>
 800088a:	08c3      	lsrs	r3, r0, #3
 800088c:	2dff      	cmp	r5, #255	; 0xff
 800088e:	d012      	beq.n	80008b6 <__aeabi_fsub+0x1f6>
 8000890:	025b      	lsls	r3, r3, #9
 8000892:	0a5f      	lsrs	r7, r3, #9
 8000894:	b2ea      	uxtb	r2, r5
 8000896:	e75e      	b.n	8000756 <__aeabi_fsub+0x96>
 8000898:	4662      	mov	r2, ip
 800089a:	2a00      	cmp	r2, #0
 800089c:	d100      	bne.n	80008a0 <__aeabi_fsub+0x1e0>
 800089e:	e096      	b.n	80009ce <__aeabi_fsub+0x30e>
 80008a0:	2e00      	cmp	r6, #0
 80008a2:	d008      	beq.n	80008b6 <__aeabi_fsub+0x1f6>
 80008a4:	2280      	movs	r2, #128	; 0x80
 80008a6:	03d2      	lsls	r2, r2, #15
 80008a8:	4213      	tst	r3, r2
 80008aa:	d004      	beq.n	80008b6 <__aeabi_fsub+0x1f6>
 80008ac:	4648      	mov	r0, r9
 80008ae:	4210      	tst	r0, r2
 80008b0:	d101      	bne.n	80008b6 <__aeabi_fsub+0x1f6>
 80008b2:	000c      	movs	r4, r1
 80008b4:	464b      	mov	r3, r9
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d0d8      	beq.n	800086c <__aeabi_fsub+0x1ac>
 80008ba:	2780      	movs	r7, #128	; 0x80
 80008bc:	03ff      	lsls	r7, r7, #15
 80008be:	431f      	orrs	r7, r3
 80008c0:	027f      	lsls	r7, r7, #9
 80008c2:	22ff      	movs	r2, #255	; 0xff
 80008c4:	0a7f      	lsrs	r7, r7, #9
 80008c6:	e746      	b.n	8000756 <__aeabi_fsub+0x96>
 80008c8:	2320      	movs	r3, #32
 80008ca:	003a      	movs	r2, r7
 80008cc:	1b45      	subs	r5, r0, r5
 80008ce:	0038      	movs	r0, r7
 80008d0:	3501      	adds	r5, #1
 80008d2:	40ea      	lsrs	r2, r5
 80008d4:	1b5d      	subs	r5, r3, r5
 80008d6:	40a8      	lsls	r0, r5
 80008d8:	1e43      	subs	r3, r0, #1
 80008da:	4198      	sbcs	r0, r3
 80008dc:	2500      	movs	r5, #0
 80008de:	4310      	orrs	r0, r2
 80008e0:	e728      	b.n	8000734 <__aeabi_fsub+0x74>
 80008e2:	2320      	movs	r3, #32
 80008e4:	1a1b      	subs	r3, r3, r0
 80008e6:	0032      	movs	r2, r6
 80008e8:	409e      	lsls	r6, r3
 80008ea:	40c2      	lsrs	r2, r0
 80008ec:	0030      	movs	r0, r6
 80008ee:	1e43      	subs	r3, r0, #1
 80008f0:	4198      	sbcs	r0, r3
 80008f2:	4310      	orrs	r0, r2
 80008f4:	e70c      	b.n	8000710 <__aeabi_fsub+0x50>
 80008f6:	2aff      	cmp	r2, #255	; 0xff
 80008f8:	d0db      	beq.n	80008b2 <__aeabi_fsub+0x1f2>
 80008fa:	2380      	movs	r3, #128	; 0x80
 80008fc:	4660      	mov	r0, ip
 80008fe:	04db      	lsls	r3, r3, #19
 8000900:	4318      	orrs	r0, r3
 8000902:	4684      	mov	ip, r0
 8000904:	2f1b      	cmp	r7, #27
 8000906:	dd56      	ble.n	80009b6 <__aeabi_fsub+0x2f6>
 8000908:	2001      	movs	r0, #1
 800090a:	000c      	movs	r4, r1
 800090c:	0015      	movs	r5, r2
 800090e:	1a30      	subs	r0, r6, r0
 8000910:	e700      	b.n	8000714 <__aeabi_fsub+0x54>
 8000912:	4663      	mov	r3, ip
 8000914:	1b9f      	subs	r7, r3, r6
 8000916:	017b      	lsls	r3, r7, #5
 8000918:	d43d      	bmi.n	8000996 <__aeabi_fsub+0x2d6>
 800091a:	2f00      	cmp	r7, #0
 800091c:	d000      	beq.n	8000920 <__aeabi_fsub+0x260>
 800091e:	e6fe      	b.n	800071e <__aeabi_fsub+0x5e>
 8000920:	2400      	movs	r4, #0
 8000922:	2200      	movs	r2, #0
 8000924:	2700      	movs	r7, #0
 8000926:	e716      	b.n	8000756 <__aeabi_fsub+0x96>
 8000928:	0005      	movs	r5, r0
 800092a:	e7af      	b.n	800088c <__aeabi_fsub+0x1cc>
 800092c:	0032      	movs	r2, r6
 800092e:	4643      	mov	r3, r8
 8000930:	4641      	mov	r1, r8
 8000932:	40da      	lsrs	r2, r3
 8000934:	2320      	movs	r3, #32
 8000936:	1a5b      	subs	r3, r3, r1
 8000938:	409e      	lsls	r6, r3
 800093a:	0030      	movs	r0, r6
 800093c:	1e43      	subs	r3, r0, #1
 800093e:	4198      	sbcs	r0, r3
 8000940:	4310      	orrs	r0, r2
 8000942:	e721      	b.n	8000788 <__aeabi_fsub+0xc8>
 8000944:	2d00      	cmp	r5, #0
 8000946:	d1a7      	bne.n	8000898 <__aeabi_fsub+0x1d8>
 8000948:	4663      	mov	r3, ip
 800094a:	2b00      	cmp	r3, #0
 800094c:	d059      	beq.n	8000a02 <__aeabi_fsub+0x342>
 800094e:	2200      	movs	r2, #0
 8000950:	2e00      	cmp	r6, #0
 8000952:	d100      	bne.n	8000956 <__aeabi_fsub+0x296>
 8000954:	e6ff      	b.n	8000756 <__aeabi_fsub+0x96>
 8000956:	0030      	movs	r0, r6
 8000958:	4460      	add	r0, ip
 800095a:	0143      	lsls	r3, r0, #5
 800095c:	d592      	bpl.n	8000884 <__aeabi_fsub+0x1c4>
 800095e:	4b2a      	ldr	r3, [pc, #168]	; (8000a08 <__aeabi_fsub+0x348>)
 8000960:	3501      	adds	r5, #1
 8000962:	4018      	ands	r0, r3
 8000964:	e78e      	b.n	8000884 <__aeabi_fsub+0x1c4>
 8000966:	4663      	mov	r3, ip
 8000968:	2b00      	cmp	r3, #0
 800096a:	d047      	beq.n	80009fc <__aeabi_fsub+0x33c>
 800096c:	1e4b      	subs	r3, r1, #1
 800096e:	2901      	cmp	r1, #1
 8000970:	d015      	beq.n	800099e <__aeabi_fsub+0x2de>
 8000972:	29ff      	cmp	r1, #255	; 0xff
 8000974:	d02b      	beq.n	80009ce <__aeabi_fsub+0x30e>
 8000976:	0019      	movs	r1, r3
 8000978:	e74e      	b.n	8000818 <__aeabi_fsub+0x158>
 800097a:	000c      	movs	r4, r1
 800097c:	464b      	mov	r3, r9
 800097e:	003d      	movs	r5, r7
 8000980:	e784      	b.n	800088c <__aeabi_fsub+0x1cc>
 8000982:	4662      	mov	r2, ip
 8000984:	2a00      	cmp	r2, #0
 8000986:	d18b      	bne.n	80008a0 <__aeabi_fsub+0x1e0>
 8000988:	2e00      	cmp	r6, #0
 800098a:	d192      	bne.n	80008b2 <__aeabi_fsub+0x1f2>
 800098c:	2780      	movs	r7, #128	; 0x80
 800098e:	2400      	movs	r4, #0
 8000990:	22ff      	movs	r2, #255	; 0xff
 8000992:	03ff      	lsls	r7, r7, #15
 8000994:	e6df      	b.n	8000756 <__aeabi_fsub+0x96>
 8000996:	4663      	mov	r3, ip
 8000998:	000c      	movs	r4, r1
 800099a:	1af7      	subs	r7, r6, r3
 800099c:	e6bf      	b.n	800071e <__aeabi_fsub+0x5e>
 800099e:	0030      	movs	r0, r6
 80009a0:	4460      	add	r0, ip
 80009a2:	2501      	movs	r5, #1
 80009a4:	0143      	lsls	r3, r0, #5
 80009a6:	d400      	bmi.n	80009aa <__aeabi_fsub+0x2ea>
 80009a8:	e76c      	b.n	8000884 <__aeabi_fsub+0x1c4>
 80009aa:	2502      	movs	r5, #2
 80009ac:	e6f2      	b.n	8000794 <__aeabi_fsub+0xd4>
 80009ae:	4663      	mov	r3, ip
 80009b0:	2501      	movs	r5, #1
 80009b2:	1b98      	subs	r0, r3, r6
 80009b4:	e6ae      	b.n	8000714 <__aeabi_fsub+0x54>
 80009b6:	2320      	movs	r3, #32
 80009b8:	4664      	mov	r4, ip
 80009ba:	4660      	mov	r0, ip
 80009bc:	40fc      	lsrs	r4, r7
 80009be:	1bdf      	subs	r7, r3, r7
 80009c0:	40b8      	lsls	r0, r7
 80009c2:	1e43      	subs	r3, r0, #1
 80009c4:	4198      	sbcs	r0, r3
 80009c6:	4320      	orrs	r0, r4
 80009c8:	e79f      	b.n	800090a <__aeabi_fsub+0x24a>
 80009ca:	0005      	movs	r5, r0
 80009cc:	e75e      	b.n	800088c <__aeabi_fsub+0x1cc>
 80009ce:	464b      	mov	r3, r9
 80009d0:	e771      	b.n	80008b6 <__aeabi_fsub+0x1f6>
 80009d2:	2320      	movs	r3, #32
 80009d4:	4665      	mov	r5, ip
 80009d6:	4660      	mov	r0, ip
 80009d8:	40cd      	lsrs	r5, r1
 80009da:	1a59      	subs	r1, r3, r1
 80009dc:	4088      	lsls	r0, r1
 80009de:	1e43      	subs	r3, r0, #1
 80009e0:	4198      	sbcs	r0, r3
 80009e2:	4328      	orrs	r0, r5
 80009e4:	e71c      	b.n	8000820 <__aeabi_fsub+0x160>
 80009e6:	4663      	mov	r3, ip
 80009e8:	000c      	movs	r4, r1
 80009ea:	2501      	movs	r5, #1
 80009ec:	1af0      	subs	r0, r6, r3
 80009ee:	e691      	b.n	8000714 <__aeabi_fsub+0x54>
 80009f0:	2e00      	cmp	r6, #0
 80009f2:	d095      	beq.n	8000920 <__aeabi_fsub+0x260>
 80009f4:	000c      	movs	r4, r1
 80009f6:	464f      	mov	r7, r9
 80009f8:	2200      	movs	r2, #0
 80009fa:	e6ac      	b.n	8000756 <__aeabi_fsub+0x96>
 80009fc:	464b      	mov	r3, r9
 80009fe:	000d      	movs	r5, r1
 8000a00:	e744      	b.n	800088c <__aeabi_fsub+0x1cc>
 8000a02:	464f      	mov	r7, r9
 8000a04:	2200      	movs	r2, #0
 8000a06:	e6a6      	b.n	8000756 <__aeabi_fsub+0x96>
 8000a08:	fbffffff 	.word	0xfbffffff
 8000a0c:	7dffffff 	.word	0x7dffffff
 8000a10:	2800      	cmp	r0, #0
 8000a12:	d000      	beq.n	8000a16 <__aeabi_fsub+0x356>
 8000a14:	e736      	b.n	8000884 <__aeabi_fsub+0x1c4>
 8000a16:	2400      	movs	r4, #0
 8000a18:	2700      	movs	r7, #0
 8000a1a:	e69c      	b.n	8000756 <__aeabi_fsub+0x96>

08000a1c <__aeabi_f2iz>:
 8000a1c:	0241      	lsls	r1, r0, #9
 8000a1e:	0042      	lsls	r2, r0, #1
 8000a20:	0fc3      	lsrs	r3, r0, #31
 8000a22:	0a49      	lsrs	r1, r1, #9
 8000a24:	2000      	movs	r0, #0
 8000a26:	0e12      	lsrs	r2, r2, #24
 8000a28:	2a7e      	cmp	r2, #126	; 0x7e
 8000a2a:	dd03      	ble.n	8000a34 <__aeabi_f2iz+0x18>
 8000a2c:	2a9d      	cmp	r2, #157	; 0x9d
 8000a2e:	dd02      	ble.n	8000a36 <__aeabi_f2iz+0x1a>
 8000a30:	4a09      	ldr	r2, [pc, #36]	; (8000a58 <__aeabi_f2iz+0x3c>)
 8000a32:	1898      	adds	r0, r3, r2
 8000a34:	4770      	bx	lr
 8000a36:	2080      	movs	r0, #128	; 0x80
 8000a38:	0400      	lsls	r0, r0, #16
 8000a3a:	4301      	orrs	r1, r0
 8000a3c:	2a95      	cmp	r2, #149	; 0x95
 8000a3e:	dc07      	bgt.n	8000a50 <__aeabi_f2iz+0x34>
 8000a40:	2096      	movs	r0, #150	; 0x96
 8000a42:	1a82      	subs	r2, r0, r2
 8000a44:	40d1      	lsrs	r1, r2
 8000a46:	4248      	negs	r0, r1
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d1f3      	bne.n	8000a34 <__aeabi_f2iz+0x18>
 8000a4c:	0008      	movs	r0, r1
 8000a4e:	e7f1      	b.n	8000a34 <__aeabi_f2iz+0x18>
 8000a50:	3a96      	subs	r2, #150	; 0x96
 8000a52:	4091      	lsls	r1, r2
 8000a54:	e7f7      	b.n	8000a46 <__aeabi_f2iz+0x2a>
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	7fffffff 	.word	0x7fffffff

08000a5c <__aeabi_i2f>:
 8000a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	d013      	beq.n	8000a8a <__aeabi_i2f+0x2e>
 8000a62:	17c3      	asrs	r3, r0, #31
 8000a64:	18c6      	adds	r6, r0, r3
 8000a66:	405e      	eors	r6, r3
 8000a68:	0fc4      	lsrs	r4, r0, #31
 8000a6a:	0030      	movs	r0, r6
 8000a6c:	f001 fefa 	bl	8002864 <__clzsi2>
 8000a70:	239e      	movs	r3, #158	; 0x9e
 8000a72:	0005      	movs	r5, r0
 8000a74:	1a1b      	subs	r3, r3, r0
 8000a76:	2b96      	cmp	r3, #150	; 0x96
 8000a78:	dc0f      	bgt.n	8000a9a <__aeabi_i2f+0x3e>
 8000a7a:	2808      	cmp	r0, #8
 8000a7c:	dd01      	ble.n	8000a82 <__aeabi_i2f+0x26>
 8000a7e:	3d08      	subs	r5, #8
 8000a80:	40ae      	lsls	r6, r5
 8000a82:	0276      	lsls	r6, r6, #9
 8000a84:	0a76      	lsrs	r6, r6, #9
 8000a86:	b2d8      	uxtb	r0, r3
 8000a88:	e002      	b.n	8000a90 <__aeabi_i2f+0x34>
 8000a8a:	2400      	movs	r4, #0
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	2600      	movs	r6, #0
 8000a90:	05c0      	lsls	r0, r0, #23
 8000a92:	4330      	orrs	r0, r6
 8000a94:	07e4      	lsls	r4, r4, #31
 8000a96:	4320      	orrs	r0, r4
 8000a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a9a:	2b99      	cmp	r3, #153	; 0x99
 8000a9c:	dd0c      	ble.n	8000ab8 <__aeabi_i2f+0x5c>
 8000a9e:	2205      	movs	r2, #5
 8000aa0:	0031      	movs	r1, r6
 8000aa2:	1a12      	subs	r2, r2, r0
 8000aa4:	40d1      	lsrs	r1, r2
 8000aa6:	000a      	movs	r2, r1
 8000aa8:	0001      	movs	r1, r0
 8000aaa:	0030      	movs	r0, r6
 8000aac:	311b      	adds	r1, #27
 8000aae:	4088      	lsls	r0, r1
 8000ab0:	1e41      	subs	r1, r0, #1
 8000ab2:	4188      	sbcs	r0, r1
 8000ab4:	4302      	orrs	r2, r0
 8000ab6:	0016      	movs	r6, r2
 8000ab8:	2d05      	cmp	r5, #5
 8000aba:	dc12      	bgt.n	8000ae2 <__aeabi_i2f+0x86>
 8000abc:	0031      	movs	r1, r6
 8000abe:	4f0d      	ldr	r7, [pc, #52]	; (8000af4 <__aeabi_i2f+0x98>)
 8000ac0:	4039      	ands	r1, r7
 8000ac2:	0772      	lsls	r2, r6, #29
 8000ac4:	d009      	beq.n	8000ada <__aeabi_i2f+0x7e>
 8000ac6:	200f      	movs	r0, #15
 8000ac8:	4030      	ands	r0, r6
 8000aca:	2804      	cmp	r0, #4
 8000acc:	d005      	beq.n	8000ada <__aeabi_i2f+0x7e>
 8000ace:	3104      	adds	r1, #4
 8000ad0:	014a      	lsls	r2, r1, #5
 8000ad2:	d502      	bpl.n	8000ada <__aeabi_i2f+0x7e>
 8000ad4:	239f      	movs	r3, #159	; 0x9f
 8000ad6:	4039      	ands	r1, r7
 8000ad8:	1b5b      	subs	r3, r3, r5
 8000ada:	0189      	lsls	r1, r1, #6
 8000adc:	0a4e      	lsrs	r6, r1, #9
 8000ade:	b2d8      	uxtb	r0, r3
 8000ae0:	e7d6      	b.n	8000a90 <__aeabi_i2f+0x34>
 8000ae2:	1f6a      	subs	r2, r5, #5
 8000ae4:	4096      	lsls	r6, r2
 8000ae6:	0031      	movs	r1, r6
 8000ae8:	4f02      	ldr	r7, [pc, #8]	; (8000af4 <__aeabi_i2f+0x98>)
 8000aea:	4039      	ands	r1, r7
 8000aec:	0772      	lsls	r2, r6, #29
 8000aee:	d0f4      	beq.n	8000ada <__aeabi_i2f+0x7e>
 8000af0:	e7e9      	b.n	8000ac6 <__aeabi_i2f+0x6a>
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	fbffffff 	.word	0xfbffffff

08000af8 <__aeabi_dadd>:
 8000af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000afa:	464f      	mov	r7, r9
 8000afc:	4646      	mov	r6, r8
 8000afe:	46d6      	mov	lr, sl
 8000b00:	000d      	movs	r5, r1
 8000b02:	0004      	movs	r4, r0
 8000b04:	b5c0      	push	{r6, r7, lr}
 8000b06:	001f      	movs	r7, r3
 8000b08:	0011      	movs	r1, r2
 8000b0a:	0328      	lsls	r0, r5, #12
 8000b0c:	0f62      	lsrs	r2, r4, #29
 8000b0e:	0a40      	lsrs	r0, r0, #9
 8000b10:	4310      	orrs	r0, r2
 8000b12:	007a      	lsls	r2, r7, #1
 8000b14:	0d52      	lsrs	r2, r2, #21
 8000b16:	00e3      	lsls	r3, r4, #3
 8000b18:	033c      	lsls	r4, r7, #12
 8000b1a:	4691      	mov	r9, r2
 8000b1c:	0a64      	lsrs	r4, r4, #9
 8000b1e:	0ffa      	lsrs	r2, r7, #31
 8000b20:	0f4f      	lsrs	r7, r1, #29
 8000b22:	006e      	lsls	r6, r5, #1
 8000b24:	4327      	orrs	r7, r4
 8000b26:	4692      	mov	sl, r2
 8000b28:	46b8      	mov	r8, r7
 8000b2a:	0d76      	lsrs	r6, r6, #21
 8000b2c:	0fed      	lsrs	r5, r5, #31
 8000b2e:	00c9      	lsls	r1, r1, #3
 8000b30:	4295      	cmp	r5, r2
 8000b32:	d100      	bne.n	8000b36 <__aeabi_dadd+0x3e>
 8000b34:	e099      	b.n	8000c6a <__aeabi_dadd+0x172>
 8000b36:	464c      	mov	r4, r9
 8000b38:	1b34      	subs	r4, r6, r4
 8000b3a:	46a4      	mov	ip, r4
 8000b3c:	2c00      	cmp	r4, #0
 8000b3e:	dc00      	bgt.n	8000b42 <__aeabi_dadd+0x4a>
 8000b40:	e07c      	b.n	8000c3c <__aeabi_dadd+0x144>
 8000b42:	464a      	mov	r2, r9
 8000b44:	2a00      	cmp	r2, #0
 8000b46:	d100      	bne.n	8000b4a <__aeabi_dadd+0x52>
 8000b48:	e0b8      	b.n	8000cbc <__aeabi_dadd+0x1c4>
 8000b4a:	4ac5      	ldr	r2, [pc, #788]	; (8000e60 <__aeabi_dadd+0x368>)
 8000b4c:	4296      	cmp	r6, r2
 8000b4e:	d100      	bne.n	8000b52 <__aeabi_dadd+0x5a>
 8000b50:	e11c      	b.n	8000d8c <__aeabi_dadd+0x294>
 8000b52:	2280      	movs	r2, #128	; 0x80
 8000b54:	003c      	movs	r4, r7
 8000b56:	0412      	lsls	r2, r2, #16
 8000b58:	4314      	orrs	r4, r2
 8000b5a:	46a0      	mov	r8, r4
 8000b5c:	4662      	mov	r2, ip
 8000b5e:	2a38      	cmp	r2, #56	; 0x38
 8000b60:	dd00      	ble.n	8000b64 <__aeabi_dadd+0x6c>
 8000b62:	e161      	b.n	8000e28 <__aeabi_dadd+0x330>
 8000b64:	2a1f      	cmp	r2, #31
 8000b66:	dd00      	ble.n	8000b6a <__aeabi_dadd+0x72>
 8000b68:	e1cc      	b.n	8000f04 <__aeabi_dadd+0x40c>
 8000b6a:	4664      	mov	r4, ip
 8000b6c:	2220      	movs	r2, #32
 8000b6e:	1b12      	subs	r2, r2, r4
 8000b70:	4644      	mov	r4, r8
 8000b72:	4094      	lsls	r4, r2
 8000b74:	000f      	movs	r7, r1
 8000b76:	46a1      	mov	r9, r4
 8000b78:	4664      	mov	r4, ip
 8000b7a:	4091      	lsls	r1, r2
 8000b7c:	40e7      	lsrs	r7, r4
 8000b7e:	464c      	mov	r4, r9
 8000b80:	1e4a      	subs	r2, r1, #1
 8000b82:	4191      	sbcs	r1, r2
 8000b84:	433c      	orrs	r4, r7
 8000b86:	4642      	mov	r2, r8
 8000b88:	4321      	orrs	r1, r4
 8000b8a:	4664      	mov	r4, ip
 8000b8c:	40e2      	lsrs	r2, r4
 8000b8e:	1a80      	subs	r0, r0, r2
 8000b90:	1a5c      	subs	r4, r3, r1
 8000b92:	42a3      	cmp	r3, r4
 8000b94:	419b      	sbcs	r3, r3
 8000b96:	425f      	negs	r7, r3
 8000b98:	1bc7      	subs	r7, r0, r7
 8000b9a:	023b      	lsls	r3, r7, #8
 8000b9c:	d400      	bmi.n	8000ba0 <__aeabi_dadd+0xa8>
 8000b9e:	e0d0      	b.n	8000d42 <__aeabi_dadd+0x24a>
 8000ba0:	027f      	lsls	r7, r7, #9
 8000ba2:	0a7f      	lsrs	r7, r7, #9
 8000ba4:	2f00      	cmp	r7, #0
 8000ba6:	d100      	bne.n	8000baa <__aeabi_dadd+0xb2>
 8000ba8:	e0ff      	b.n	8000daa <__aeabi_dadd+0x2b2>
 8000baa:	0038      	movs	r0, r7
 8000bac:	f001 fe5a 	bl	8002864 <__clzsi2>
 8000bb0:	0001      	movs	r1, r0
 8000bb2:	3908      	subs	r1, #8
 8000bb4:	2320      	movs	r3, #32
 8000bb6:	0022      	movs	r2, r4
 8000bb8:	1a5b      	subs	r3, r3, r1
 8000bba:	408f      	lsls	r7, r1
 8000bbc:	40da      	lsrs	r2, r3
 8000bbe:	408c      	lsls	r4, r1
 8000bc0:	4317      	orrs	r7, r2
 8000bc2:	42b1      	cmp	r1, r6
 8000bc4:	da00      	bge.n	8000bc8 <__aeabi_dadd+0xd0>
 8000bc6:	e0ff      	b.n	8000dc8 <__aeabi_dadd+0x2d0>
 8000bc8:	1b89      	subs	r1, r1, r6
 8000bca:	1c4b      	adds	r3, r1, #1
 8000bcc:	2b1f      	cmp	r3, #31
 8000bce:	dd00      	ble.n	8000bd2 <__aeabi_dadd+0xda>
 8000bd0:	e0a8      	b.n	8000d24 <__aeabi_dadd+0x22c>
 8000bd2:	2220      	movs	r2, #32
 8000bd4:	0039      	movs	r1, r7
 8000bd6:	1ad2      	subs	r2, r2, r3
 8000bd8:	0020      	movs	r0, r4
 8000bda:	4094      	lsls	r4, r2
 8000bdc:	4091      	lsls	r1, r2
 8000bde:	40d8      	lsrs	r0, r3
 8000be0:	1e62      	subs	r2, r4, #1
 8000be2:	4194      	sbcs	r4, r2
 8000be4:	40df      	lsrs	r7, r3
 8000be6:	2600      	movs	r6, #0
 8000be8:	4301      	orrs	r1, r0
 8000bea:	430c      	orrs	r4, r1
 8000bec:	0763      	lsls	r3, r4, #29
 8000bee:	d009      	beq.n	8000c04 <__aeabi_dadd+0x10c>
 8000bf0:	230f      	movs	r3, #15
 8000bf2:	4023      	ands	r3, r4
 8000bf4:	2b04      	cmp	r3, #4
 8000bf6:	d005      	beq.n	8000c04 <__aeabi_dadd+0x10c>
 8000bf8:	1d23      	adds	r3, r4, #4
 8000bfa:	42a3      	cmp	r3, r4
 8000bfc:	41a4      	sbcs	r4, r4
 8000bfe:	4264      	negs	r4, r4
 8000c00:	193f      	adds	r7, r7, r4
 8000c02:	001c      	movs	r4, r3
 8000c04:	023b      	lsls	r3, r7, #8
 8000c06:	d400      	bmi.n	8000c0a <__aeabi_dadd+0x112>
 8000c08:	e09e      	b.n	8000d48 <__aeabi_dadd+0x250>
 8000c0a:	4b95      	ldr	r3, [pc, #596]	; (8000e60 <__aeabi_dadd+0x368>)
 8000c0c:	3601      	adds	r6, #1
 8000c0e:	429e      	cmp	r6, r3
 8000c10:	d100      	bne.n	8000c14 <__aeabi_dadd+0x11c>
 8000c12:	e0b7      	b.n	8000d84 <__aeabi_dadd+0x28c>
 8000c14:	4a93      	ldr	r2, [pc, #588]	; (8000e64 <__aeabi_dadd+0x36c>)
 8000c16:	08e4      	lsrs	r4, r4, #3
 8000c18:	4017      	ands	r7, r2
 8000c1a:	077b      	lsls	r3, r7, #29
 8000c1c:	0571      	lsls	r1, r6, #21
 8000c1e:	027f      	lsls	r7, r7, #9
 8000c20:	4323      	orrs	r3, r4
 8000c22:	0b3f      	lsrs	r7, r7, #12
 8000c24:	0d4a      	lsrs	r2, r1, #21
 8000c26:	0512      	lsls	r2, r2, #20
 8000c28:	433a      	orrs	r2, r7
 8000c2a:	07ed      	lsls	r5, r5, #31
 8000c2c:	432a      	orrs	r2, r5
 8000c2e:	0018      	movs	r0, r3
 8000c30:	0011      	movs	r1, r2
 8000c32:	bce0      	pop	{r5, r6, r7}
 8000c34:	46ba      	mov	sl, r7
 8000c36:	46b1      	mov	r9, r6
 8000c38:	46a8      	mov	r8, r5
 8000c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c3c:	2c00      	cmp	r4, #0
 8000c3e:	d04b      	beq.n	8000cd8 <__aeabi_dadd+0x1e0>
 8000c40:	464c      	mov	r4, r9
 8000c42:	1ba4      	subs	r4, r4, r6
 8000c44:	46a4      	mov	ip, r4
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d000      	beq.n	8000c4c <__aeabi_dadd+0x154>
 8000c4a:	e123      	b.n	8000e94 <__aeabi_dadd+0x39c>
 8000c4c:	0004      	movs	r4, r0
 8000c4e:	431c      	orrs	r4, r3
 8000c50:	d100      	bne.n	8000c54 <__aeabi_dadd+0x15c>
 8000c52:	e1af      	b.n	8000fb4 <__aeabi_dadd+0x4bc>
 8000c54:	4662      	mov	r2, ip
 8000c56:	1e54      	subs	r4, r2, #1
 8000c58:	2a01      	cmp	r2, #1
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dadd+0x166>
 8000c5c:	e215      	b.n	800108a <__aeabi_dadd+0x592>
 8000c5e:	4d80      	ldr	r5, [pc, #512]	; (8000e60 <__aeabi_dadd+0x368>)
 8000c60:	45ac      	cmp	ip, r5
 8000c62:	d100      	bne.n	8000c66 <__aeabi_dadd+0x16e>
 8000c64:	e1c8      	b.n	8000ff8 <__aeabi_dadd+0x500>
 8000c66:	46a4      	mov	ip, r4
 8000c68:	e11b      	b.n	8000ea2 <__aeabi_dadd+0x3aa>
 8000c6a:	464a      	mov	r2, r9
 8000c6c:	1ab2      	subs	r2, r6, r2
 8000c6e:	4694      	mov	ip, r2
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	dc00      	bgt.n	8000c76 <__aeabi_dadd+0x17e>
 8000c74:	e0ac      	b.n	8000dd0 <__aeabi_dadd+0x2d8>
 8000c76:	464a      	mov	r2, r9
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	d043      	beq.n	8000d04 <__aeabi_dadd+0x20c>
 8000c7c:	4a78      	ldr	r2, [pc, #480]	; (8000e60 <__aeabi_dadd+0x368>)
 8000c7e:	4296      	cmp	r6, r2
 8000c80:	d100      	bne.n	8000c84 <__aeabi_dadd+0x18c>
 8000c82:	e1af      	b.n	8000fe4 <__aeabi_dadd+0x4ec>
 8000c84:	2280      	movs	r2, #128	; 0x80
 8000c86:	003c      	movs	r4, r7
 8000c88:	0412      	lsls	r2, r2, #16
 8000c8a:	4314      	orrs	r4, r2
 8000c8c:	46a0      	mov	r8, r4
 8000c8e:	4662      	mov	r2, ip
 8000c90:	2a38      	cmp	r2, #56	; 0x38
 8000c92:	dc67      	bgt.n	8000d64 <__aeabi_dadd+0x26c>
 8000c94:	2a1f      	cmp	r2, #31
 8000c96:	dc00      	bgt.n	8000c9a <__aeabi_dadd+0x1a2>
 8000c98:	e15f      	b.n	8000f5a <__aeabi_dadd+0x462>
 8000c9a:	4647      	mov	r7, r8
 8000c9c:	3a20      	subs	r2, #32
 8000c9e:	40d7      	lsrs	r7, r2
 8000ca0:	4662      	mov	r2, ip
 8000ca2:	2a20      	cmp	r2, #32
 8000ca4:	d005      	beq.n	8000cb2 <__aeabi_dadd+0x1ba>
 8000ca6:	4664      	mov	r4, ip
 8000ca8:	2240      	movs	r2, #64	; 0x40
 8000caa:	1b12      	subs	r2, r2, r4
 8000cac:	4644      	mov	r4, r8
 8000cae:	4094      	lsls	r4, r2
 8000cb0:	4321      	orrs	r1, r4
 8000cb2:	1e4a      	subs	r2, r1, #1
 8000cb4:	4191      	sbcs	r1, r2
 8000cb6:	000c      	movs	r4, r1
 8000cb8:	433c      	orrs	r4, r7
 8000cba:	e057      	b.n	8000d6c <__aeabi_dadd+0x274>
 8000cbc:	003a      	movs	r2, r7
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	d100      	bne.n	8000cc4 <__aeabi_dadd+0x1cc>
 8000cc2:	e105      	b.n	8000ed0 <__aeabi_dadd+0x3d8>
 8000cc4:	0022      	movs	r2, r4
 8000cc6:	3a01      	subs	r2, #1
 8000cc8:	2c01      	cmp	r4, #1
 8000cca:	d100      	bne.n	8000cce <__aeabi_dadd+0x1d6>
 8000ccc:	e182      	b.n	8000fd4 <__aeabi_dadd+0x4dc>
 8000cce:	4c64      	ldr	r4, [pc, #400]	; (8000e60 <__aeabi_dadd+0x368>)
 8000cd0:	45a4      	cmp	ip, r4
 8000cd2:	d05b      	beq.n	8000d8c <__aeabi_dadd+0x294>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	e741      	b.n	8000b5c <__aeabi_dadd+0x64>
 8000cd8:	4c63      	ldr	r4, [pc, #396]	; (8000e68 <__aeabi_dadd+0x370>)
 8000cda:	1c77      	adds	r7, r6, #1
 8000cdc:	4227      	tst	r7, r4
 8000cde:	d000      	beq.n	8000ce2 <__aeabi_dadd+0x1ea>
 8000ce0:	e0c4      	b.n	8000e6c <__aeabi_dadd+0x374>
 8000ce2:	0004      	movs	r4, r0
 8000ce4:	431c      	orrs	r4, r3
 8000ce6:	2e00      	cmp	r6, #0
 8000ce8:	d000      	beq.n	8000cec <__aeabi_dadd+0x1f4>
 8000cea:	e169      	b.n	8000fc0 <__aeabi_dadd+0x4c8>
 8000cec:	2c00      	cmp	r4, #0
 8000cee:	d100      	bne.n	8000cf2 <__aeabi_dadd+0x1fa>
 8000cf0:	e1bf      	b.n	8001072 <__aeabi_dadd+0x57a>
 8000cf2:	4644      	mov	r4, r8
 8000cf4:	430c      	orrs	r4, r1
 8000cf6:	d000      	beq.n	8000cfa <__aeabi_dadd+0x202>
 8000cf8:	e1d0      	b.n	800109c <__aeabi_dadd+0x5a4>
 8000cfa:	0742      	lsls	r2, r0, #29
 8000cfc:	08db      	lsrs	r3, r3, #3
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	08c0      	lsrs	r0, r0, #3
 8000d02:	e029      	b.n	8000d58 <__aeabi_dadd+0x260>
 8000d04:	003a      	movs	r2, r7
 8000d06:	430a      	orrs	r2, r1
 8000d08:	d100      	bne.n	8000d0c <__aeabi_dadd+0x214>
 8000d0a:	e170      	b.n	8000fee <__aeabi_dadd+0x4f6>
 8000d0c:	4662      	mov	r2, ip
 8000d0e:	4664      	mov	r4, ip
 8000d10:	3a01      	subs	r2, #1
 8000d12:	2c01      	cmp	r4, #1
 8000d14:	d100      	bne.n	8000d18 <__aeabi_dadd+0x220>
 8000d16:	e0e0      	b.n	8000eda <__aeabi_dadd+0x3e2>
 8000d18:	4c51      	ldr	r4, [pc, #324]	; (8000e60 <__aeabi_dadd+0x368>)
 8000d1a:	45a4      	cmp	ip, r4
 8000d1c:	d100      	bne.n	8000d20 <__aeabi_dadd+0x228>
 8000d1e:	e161      	b.n	8000fe4 <__aeabi_dadd+0x4ec>
 8000d20:	4694      	mov	ip, r2
 8000d22:	e7b4      	b.n	8000c8e <__aeabi_dadd+0x196>
 8000d24:	003a      	movs	r2, r7
 8000d26:	391f      	subs	r1, #31
 8000d28:	40ca      	lsrs	r2, r1
 8000d2a:	0011      	movs	r1, r2
 8000d2c:	2b20      	cmp	r3, #32
 8000d2e:	d003      	beq.n	8000d38 <__aeabi_dadd+0x240>
 8000d30:	2240      	movs	r2, #64	; 0x40
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	409f      	lsls	r7, r3
 8000d36:	433c      	orrs	r4, r7
 8000d38:	1e63      	subs	r3, r4, #1
 8000d3a:	419c      	sbcs	r4, r3
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	2600      	movs	r6, #0
 8000d40:	430c      	orrs	r4, r1
 8000d42:	0763      	lsls	r3, r4, #29
 8000d44:	d000      	beq.n	8000d48 <__aeabi_dadd+0x250>
 8000d46:	e753      	b.n	8000bf0 <__aeabi_dadd+0xf8>
 8000d48:	46b4      	mov	ip, r6
 8000d4a:	08e4      	lsrs	r4, r4, #3
 8000d4c:	077b      	lsls	r3, r7, #29
 8000d4e:	4323      	orrs	r3, r4
 8000d50:	08f8      	lsrs	r0, r7, #3
 8000d52:	4a43      	ldr	r2, [pc, #268]	; (8000e60 <__aeabi_dadd+0x368>)
 8000d54:	4594      	cmp	ip, r2
 8000d56:	d01d      	beq.n	8000d94 <__aeabi_dadd+0x29c>
 8000d58:	4662      	mov	r2, ip
 8000d5a:	0307      	lsls	r7, r0, #12
 8000d5c:	0552      	lsls	r2, r2, #21
 8000d5e:	0b3f      	lsrs	r7, r7, #12
 8000d60:	0d52      	lsrs	r2, r2, #21
 8000d62:	e760      	b.n	8000c26 <__aeabi_dadd+0x12e>
 8000d64:	4644      	mov	r4, r8
 8000d66:	430c      	orrs	r4, r1
 8000d68:	1e62      	subs	r2, r4, #1
 8000d6a:	4194      	sbcs	r4, r2
 8000d6c:	18e4      	adds	r4, r4, r3
 8000d6e:	429c      	cmp	r4, r3
 8000d70:	419b      	sbcs	r3, r3
 8000d72:	425f      	negs	r7, r3
 8000d74:	183f      	adds	r7, r7, r0
 8000d76:	023b      	lsls	r3, r7, #8
 8000d78:	d5e3      	bpl.n	8000d42 <__aeabi_dadd+0x24a>
 8000d7a:	4b39      	ldr	r3, [pc, #228]	; (8000e60 <__aeabi_dadd+0x368>)
 8000d7c:	3601      	adds	r6, #1
 8000d7e:	429e      	cmp	r6, r3
 8000d80:	d000      	beq.n	8000d84 <__aeabi_dadd+0x28c>
 8000d82:	e0b5      	b.n	8000ef0 <__aeabi_dadd+0x3f8>
 8000d84:	0032      	movs	r2, r6
 8000d86:	2700      	movs	r7, #0
 8000d88:	2300      	movs	r3, #0
 8000d8a:	e74c      	b.n	8000c26 <__aeabi_dadd+0x12e>
 8000d8c:	0742      	lsls	r2, r0, #29
 8000d8e:	08db      	lsrs	r3, r3, #3
 8000d90:	4313      	orrs	r3, r2
 8000d92:	08c0      	lsrs	r0, r0, #3
 8000d94:	001a      	movs	r2, r3
 8000d96:	4302      	orrs	r2, r0
 8000d98:	d100      	bne.n	8000d9c <__aeabi_dadd+0x2a4>
 8000d9a:	e1e1      	b.n	8001160 <__aeabi_dadd+0x668>
 8000d9c:	2780      	movs	r7, #128	; 0x80
 8000d9e:	033f      	lsls	r7, r7, #12
 8000da0:	4307      	orrs	r7, r0
 8000da2:	033f      	lsls	r7, r7, #12
 8000da4:	4a2e      	ldr	r2, [pc, #184]	; (8000e60 <__aeabi_dadd+0x368>)
 8000da6:	0b3f      	lsrs	r7, r7, #12
 8000da8:	e73d      	b.n	8000c26 <__aeabi_dadd+0x12e>
 8000daa:	0020      	movs	r0, r4
 8000dac:	f001 fd5a 	bl	8002864 <__clzsi2>
 8000db0:	0001      	movs	r1, r0
 8000db2:	3118      	adds	r1, #24
 8000db4:	291f      	cmp	r1, #31
 8000db6:	dc00      	bgt.n	8000dba <__aeabi_dadd+0x2c2>
 8000db8:	e6fc      	b.n	8000bb4 <__aeabi_dadd+0xbc>
 8000dba:	3808      	subs	r0, #8
 8000dbc:	4084      	lsls	r4, r0
 8000dbe:	0027      	movs	r7, r4
 8000dc0:	2400      	movs	r4, #0
 8000dc2:	42b1      	cmp	r1, r6
 8000dc4:	db00      	blt.n	8000dc8 <__aeabi_dadd+0x2d0>
 8000dc6:	e6ff      	b.n	8000bc8 <__aeabi_dadd+0xd0>
 8000dc8:	4a26      	ldr	r2, [pc, #152]	; (8000e64 <__aeabi_dadd+0x36c>)
 8000dca:	1a76      	subs	r6, r6, r1
 8000dcc:	4017      	ands	r7, r2
 8000dce:	e70d      	b.n	8000bec <__aeabi_dadd+0xf4>
 8000dd0:	2a00      	cmp	r2, #0
 8000dd2:	d02f      	beq.n	8000e34 <__aeabi_dadd+0x33c>
 8000dd4:	464a      	mov	r2, r9
 8000dd6:	1b92      	subs	r2, r2, r6
 8000dd8:	4694      	mov	ip, r2
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	d100      	bne.n	8000de0 <__aeabi_dadd+0x2e8>
 8000dde:	e0ad      	b.n	8000f3c <__aeabi_dadd+0x444>
 8000de0:	4a1f      	ldr	r2, [pc, #124]	; (8000e60 <__aeabi_dadd+0x368>)
 8000de2:	4591      	cmp	r9, r2
 8000de4:	d100      	bne.n	8000de8 <__aeabi_dadd+0x2f0>
 8000de6:	e10f      	b.n	8001008 <__aeabi_dadd+0x510>
 8000de8:	2280      	movs	r2, #128	; 0x80
 8000dea:	0412      	lsls	r2, r2, #16
 8000dec:	4310      	orrs	r0, r2
 8000dee:	4662      	mov	r2, ip
 8000df0:	2a38      	cmp	r2, #56	; 0x38
 8000df2:	dd00      	ble.n	8000df6 <__aeabi_dadd+0x2fe>
 8000df4:	e10f      	b.n	8001016 <__aeabi_dadd+0x51e>
 8000df6:	2a1f      	cmp	r2, #31
 8000df8:	dd00      	ble.n	8000dfc <__aeabi_dadd+0x304>
 8000dfa:	e180      	b.n	80010fe <__aeabi_dadd+0x606>
 8000dfc:	4664      	mov	r4, ip
 8000dfe:	2220      	movs	r2, #32
 8000e00:	001e      	movs	r6, r3
 8000e02:	1b12      	subs	r2, r2, r4
 8000e04:	4667      	mov	r7, ip
 8000e06:	0004      	movs	r4, r0
 8000e08:	4093      	lsls	r3, r2
 8000e0a:	4094      	lsls	r4, r2
 8000e0c:	40fe      	lsrs	r6, r7
 8000e0e:	1e5a      	subs	r2, r3, #1
 8000e10:	4193      	sbcs	r3, r2
 8000e12:	40f8      	lsrs	r0, r7
 8000e14:	4334      	orrs	r4, r6
 8000e16:	431c      	orrs	r4, r3
 8000e18:	4480      	add	r8, r0
 8000e1a:	1864      	adds	r4, r4, r1
 8000e1c:	428c      	cmp	r4, r1
 8000e1e:	41bf      	sbcs	r7, r7
 8000e20:	427f      	negs	r7, r7
 8000e22:	464e      	mov	r6, r9
 8000e24:	4447      	add	r7, r8
 8000e26:	e7a6      	b.n	8000d76 <__aeabi_dadd+0x27e>
 8000e28:	4642      	mov	r2, r8
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	0011      	movs	r1, r2
 8000e2e:	1e4a      	subs	r2, r1, #1
 8000e30:	4191      	sbcs	r1, r2
 8000e32:	e6ad      	b.n	8000b90 <__aeabi_dadd+0x98>
 8000e34:	4c0c      	ldr	r4, [pc, #48]	; (8000e68 <__aeabi_dadd+0x370>)
 8000e36:	1c72      	adds	r2, r6, #1
 8000e38:	4222      	tst	r2, r4
 8000e3a:	d000      	beq.n	8000e3e <__aeabi_dadd+0x346>
 8000e3c:	e0a1      	b.n	8000f82 <__aeabi_dadd+0x48a>
 8000e3e:	0002      	movs	r2, r0
 8000e40:	431a      	orrs	r2, r3
 8000e42:	2e00      	cmp	r6, #0
 8000e44:	d000      	beq.n	8000e48 <__aeabi_dadd+0x350>
 8000e46:	e0fa      	b.n	800103e <__aeabi_dadd+0x546>
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	d100      	bne.n	8000e4e <__aeabi_dadd+0x356>
 8000e4c:	e145      	b.n	80010da <__aeabi_dadd+0x5e2>
 8000e4e:	003a      	movs	r2, r7
 8000e50:	430a      	orrs	r2, r1
 8000e52:	d000      	beq.n	8000e56 <__aeabi_dadd+0x35e>
 8000e54:	e146      	b.n	80010e4 <__aeabi_dadd+0x5ec>
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	08db      	lsrs	r3, r3, #3
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	08c0      	lsrs	r0, r0, #3
 8000e5e:	e77b      	b.n	8000d58 <__aeabi_dadd+0x260>
 8000e60:	000007ff 	.word	0x000007ff
 8000e64:	ff7fffff 	.word	0xff7fffff
 8000e68:	000007fe 	.word	0x000007fe
 8000e6c:	4647      	mov	r7, r8
 8000e6e:	1a5c      	subs	r4, r3, r1
 8000e70:	1bc2      	subs	r2, r0, r7
 8000e72:	42a3      	cmp	r3, r4
 8000e74:	41bf      	sbcs	r7, r7
 8000e76:	427f      	negs	r7, r7
 8000e78:	46b9      	mov	r9, r7
 8000e7a:	0017      	movs	r7, r2
 8000e7c:	464a      	mov	r2, r9
 8000e7e:	1abf      	subs	r7, r7, r2
 8000e80:	023a      	lsls	r2, r7, #8
 8000e82:	d500      	bpl.n	8000e86 <__aeabi_dadd+0x38e>
 8000e84:	e08d      	b.n	8000fa2 <__aeabi_dadd+0x4aa>
 8000e86:	0023      	movs	r3, r4
 8000e88:	433b      	orrs	r3, r7
 8000e8a:	d000      	beq.n	8000e8e <__aeabi_dadd+0x396>
 8000e8c:	e68a      	b.n	8000ba4 <__aeabi_dadd+0xac>
 8000e8e:	2000      	movs	r0, #0
 8000e90:	2500      	movs	r5, #0
 8000e92:	e761      	b.n	8000d58 <__aeabi_dadd+0x260>
 8000e94:	4cb4      	ldr	r4, [pc, #720]	; (8001168 <__aeabi_dadd+0x670>)
 8000e96:	45a1      	cmp	r9, r4
 8000e98:	d100      	bne.n	8000e9c <__aeabi_dadd+0x3a4>
 8000e9a:	e0ad      	b.n	8000ff8 <__aeabi_dadd+0x500>
 8000e9c:	2480      	movs	r4, #128	; 0x80
 8000e9e:	0424      	lsls	r4, r4, #16
 8000ea0:	4320      	orrs	r0, r4
 8000ea2:	4664      	mov	r4, ip
 8000ea4:	2c38      	cmp	r4, #56	; 0x38
 8000ea6:	dc3d      	bgt.n	8000f24 <__aeabi_dadd+0x42c>
 8000ea8:	4662      	mov	r2, ip
 8000eaa:	2c1f      	cmp	r4, #31
 8000eac:	dd00      	ble.n	8000eb0 <__aeabi_dadd+0x3b8>
 8000eae:	e0b7      	b.n	8001020 <__aeabi_dadd+0x528>
 8000eb0:	2520      	movs	r5, #32
 8000eb2:	001e      	movs	r6, r3
 8000eb4:	1b2d      	subs	r5, r5, r4
 8000eb6:	0004      	movs	r4, r0
 8000eb8:	40ab      	lsls	r3, r5
 8000eba:	40ac      	lsls	r4, r5
 8000ebc:	40d6      	lsrs	r6, r2
 8000ebe:	40d0      	lsrs	r0, r2
 8000ec0:	4642      	mov	r2, r8
 8000ec2:	1e5d      	subs	r5, r3, #1
 8000ec4:	41ab      	sbcs	r3, r5
 8000ec6:	4334      	orrs	r4, r6
 8000ec8:	1a12      	subs	r2, r2, r0
 8000eca:	4690      	mov	r8, r2
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	e02c      	b.n	8000f2a <__aeabi_dadd+0x432>
 8000ed0:	0742      	lsls	r2, r0, #29
 8000ed2:	08db      	lsrs	r3, r3, #3
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	08c0      	lsrs	r0, r0, #3
 8000ed8:	e73b      	b.n	8000d52 <__aeabi_dadd+0x25a>
 8000eda:	185c      	adds	r4, r3, r1
 8000edc:	429c      	cmp	r4, r3
 8000ede:	419b      	sbcs	r3, r3
 8000ee0:	4440      	add	r0, r8
 8000ee2:	425b      	negs	r3, r3
 8000ee4:	18c7      	adds	r7, r0, r3
 8000ee6:	2601      	movs	r6, #1
 8000ee8:	023b      	lsls	r3, r7, #8
 8000eea:	d400      	bmi.n	8000eee <__aeabi_dadd+0x3f6>
 8000eec:	e729      	b.n	8000d42 <__aeabi_dadd+0x24a>
 8000eee:	2602      	movs	r6, #2
 8000ef0:	4a9e      	ldr	r2, [pc, #632]	; (800116c <__aeabi_dadd+0x674>)
 8000ef2:	0863      	lsrs	r3, r4, #1
 8000ef4:	4017      	ands	r7, r2
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	4014      	ands	r4, r2
 8000efa:	431c      	orrs	r4, r3
 8000efc:	07fb      	lsls	r3, r7, #31
 8000efe:	431c      	orrs	r4, r3
 8000f00:	087f      	lsrs	r7, r7, #1
 8000f02:	e673      	b.n	8000bec <__aeabi_dadd+0xf4>
 8000f04:	4644      	mov	r4, r8
 8000f06:	3a20      	subs	r2, #32
 8000f08:	40d4      	lsrs	r4, r2
 8000f0a:	4662      	mov	r2, ip
 8000f0c:	2a20      	cmp	r2, #32
 8000f0e:	d005      	beq.n	8000f1c <__aeabi_dadd+0x424>
 8000f10:	4667      	mov	r7, ip
 8000f12:	2240      	movs	r2, #64	; 0x40
 8000f14:	1bd2      	subs	r2, r2, r7
 8000f16:	4647      	mov	r7, r8
 8000f18:	4097      	lsls	r7, r2
 8000f1a:	4339      	orrs	r1, r7
 8000f1c:	1e4a      	subs	r2, r1, #1
 8000f1e:	4191      	sbcs	r1, r2
 8000f20:	4321      	orrs	r1, r4
 8000f22:	e635      	b.n	8000b90 <__aeabi_dadd+0x98>
 8000f24:	4303      	orrs	r3, r0
 8000f26:	1e58      	subs	r0, r3, #1
 8000f28:	4183      	sbcs	r3, r0
 8000f2a:	1acc      	subs	r4, r1, r3
 8000f2c:	42a1      	cmp	r1, r4
 8000f2e:	41bf      	sbcs	r7, r7
 8000f30:	4643      	mov	r3, r8
 8000f32:	427f      	negs	r7, r7
 8000f34:	4655      	mov	r5, sl
 8000f36:	464e      	mov	r6, r9
 8000f38:	1bdf      	subs	r7, r3, r7
 8000f3a:	e62e      	b.n	8000b9a <__aeabi_dadd+0xa2>
 8000f3c:	0002      	movs	r2, r0
 8000f3e:	431a      	orrs	r2, r3
 8000f40:	d100      	bne.n	8000f44 <__aeabi_dadd+0x44c>
 8000f42:	e0bd      	b.n	80010c0 <__aeabi_dadd+0x5c8>
 8000f44:	4662      	mov	r2, ip
 8000f46:	4664      	mov	r4, ip
 8000f48:	3a01      	subs	r2, #1
 8000f4a:	2c01      	cmp	r4, #1
 8000f4c:	d100      	bne.n	8000f50 <__aeabi_dadd+0x458>
 8000f4e:	e0e5      	b.n	800111c <__aeabi_dadd+0x624>
 8000f50:	4c85      	ldr	r4, [pc, #532]	; (8001168 <__aeabi_dadd+0x670>)
 8000f52:	45a4      	cmp	ip, r4
 8000f54:	d058      	beq.n	8001008 <__aeabi_dadd+0x510>
 8000f56:	4694      	mov	ip, r2
 8000f58:	e749      	b.n	8000dee <__aeabi_dadd+0x2f6>
 8000f5a:	4664      	mov	r4, ip
 8000f5c:	2220      	movs	r2, #32
 8000f5e:	1b12      	subs	r2, r2, r4
 8000f60:	4644      	mov	r4, r8
 8000f62:	4094      	lsls	r4, r2
 8000f64:	000f      	movs	r7, r1
 8000f66:	46a1      	mov	r9, r4
 8000f68:	4664      	mov	r4, ip
 8000f6a:	4091      	lsls	r1, r2
 8000f6c:	40e7      	lsrs	r7, r4
 8000f6e:	464c      	mov	r4, r9
 8000f70:	1e4a      	subs	r2, r1, #1
 8000f72:	4191      	sbcs	r1, r2
 8000f74:	433c      	orrs	r4, r7
 8000f76:	4642      	mov	r2, r8
 8000f78:	430c      	orrs	r4, r1
 8000f7a:	4661      	mov	r1, ip
 8000f7c:	40ca      	lsrs	r2, r1
 8000f7e:	1880      	adds	r0, r0, r2
 8000f80:	e6f4      	b.n	8000d6c <__aeabi_dadd+0x274>
 8000f82:	4c79      	ldr	r4, [pc, #484]	; (8001168 <__aeabi_dadd+0x670>)
 8000f84:	42a2      	cmp	r2, r4
 8000f86:	d100      	bne.n	8000f8a <__aeabi_dadd+0x492>
 8000f88:	e6fd      	b.n	8000d86 <__aeabi_dadd+0x28e>
 8000f8a:	1859      	adds	r1, r3, r1
 8000f8c:	4299      	cmp	r1, r3
 8000f8e:	419b      	sbcs	r3, r3
 8000f90:	4440      	add	r0, r8
 8000f92:	425f      	negs	r7, r3
 8000f94:	19c7      	adds	r7, r0, r7
 8000f96:	07fc      	lsls	r4, r7, #31
 8000f98:	0849      	lsrs	r1, r1, #1
 8000f9a:	0016      	movs	r6, r2
 8000f9c:	430c      	orrs	r4, r1
 8000f9e:	087f      	lsrs	r7, r7, #1
 8000fa0:	e6cf      	b.n	8000d42 <__aeabi_dadd+0x24a>
 8000fa2:	1acc      	subs	r4, r1, r3
 8000fa4:	42a1      	cmp	r1, r4
 8000fa6:	41bf      	sbcs	r7, r7
 8000fa8:	4643      	mov	r3, r8
 8000faa:	427f      	negs	r7, r7
 8000fac:	1a18      	subs	r0, r3, r0
 8000fae:	4655      	mov	r5, sl
 8000fb0:	1bc7      	subs	r7, r0, r7
 8000fb2:	e5f7      	b.n	8000ba4 <__aeabi_dadd+0xac>
 8000fb4:	08c9      	lsrs	r1, r1, #3
 8000fb6:	077b      	lsls	r3, r7, #29
 8000fb8:	4655      	mov	r5, sl
 8000fba:	430b      	orrs	r3, r1
 8000fbc:	08f8      	lsrs	r0, r7, #3
 8000fbe:	e6c8      	b.n	8000d52 <__aeabi_dadd+0x25a>
 8000fc0:	2c00      	cmp	r4, #0
 8000fc2:	d000      	beq.n	8000fc6 <__aeabi_dadd+0x4ce>
 8000fc4:	e081      	b.n	80010ca <__aeabi_dadd+0x5d2>
 8000fc6:	4643      	mov	r3, r8
 8000fc8:	430b      	orrs	r3, r1
 8000fca:	d115      	bne.n	8000ff8 <__aeabi_dadd+0x500>
 8000fcc:	2080      	movs	r0, #128	; 0x80
 8000fce:	2500      	movs	r5, #0
 8000fd0:	0300      	lsls	r0, r0, #12
 8000fd2:	e6e3      	b.n	8000d9c <__aeabi_dadd+0x2a4>
 8000fd4:	1a5c      	subs	r4, r3, r1
 8000fd6:	42a3      	cmp	r3, r4
 8000fd8:	419b      	sbcs	r3, r3
 8000fda:	1bc7      	subs	r7, r0, r7
 8000fdc:	425b      	negs	r3, r3
 8000fde:	2601      	movs	r6, #1
 8000fe0:	1aff      	subs	r7, r7, r3
 8000fe2:	e5da      	b.n	8000b9a <__aeabi_dadd+0xa2>
 8000fe4:	0742      	lsls	r2, r0, #29
 8000fe6:	08db      	lsrs	r3, r3, #3
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	08c0      	lsrs	r0, r0, #3
 8000fec:	e6d2      	b.n	8000d94 <__aeabi_dadd+0x29c>
 8000fee:	0742      	lsls	r2, r0, #29
 8000ff0:	08db      	lsrs	r3, r3, #3
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	08c0      	lsrs	r0, r0, #3
 8000ff6:	e6ac      	b.n	8000d52 <__aeabi_dadd+0x25a>
 8000ff8:	4643      	mov	r3, r8
 8000ffa:	4642      	mov	r2, r8
 8000ffc:	08c9      	lsrs	r1, r1, #3
 8000ffe:	075b      	lsls	r3, r3, #29
 8001000:	4655      	mov	r5, sl
 8001002:	430b      	orrs	r3, r1
 8001004:	08d0      	lsrs	r0, r2, #3
 8001006:	e6c5      	b.n	8000d94 <__aeabi_dadd+0x29c>
 8001008:	4643      	mov	r3, r8
 800100a:	4642      	mov	r2, r8
 800100c:	075b      	lsls	r3, r3, #29
 800100e:	08c9      	lsrs	r1, r1, #3
 8001010:	430b      	orrs	r3, r1
 8001012:	08d0      	lsrs	r0, r2, #3
 8001014:	e6be      	b.n	8000d94 <__aeabi_dadd+0x29c>
 8001016:	4303      	orrs	r3, r0
 8001018:	001c      	movs	r4, r3
 800101a:	1e63      	subs	r3, r4, #1
 800101c:	419c      	sbcs	r4, r3
 800101e:	e6fc      	b.n	8000e1a <__aeabi_dadd+0x322>
 8001020:	0002      	movs	r2, r0
 8001022:	3c20      	subs	r4, #32
 8001024:	40e2      	lsrs	r2, r4
 8001026:	0014      	movs	r4, r2
 8001028:	4662      	mov	r2, ip
 800102a:	2a20      	cmp	r2, #32
 800102c:	d003      	beq.n	8001036 <__aeabi_dadd+0x53e>
 800102e:	2540      	movs	r5, #64	; 0x40
 8001030:	1aad      	subs	r5, r5, r2
 8001032:	40a8      	lsls	r0, r5
 8001034:	4303      	orrs	r3, r0
 8001036:	1e58      	subs	r0, r3, #1
 8001038:	4183      	sbcs	r3, r0
 800103a:	4323      	orrs	r3, r4
 800103c:	e775      	b.n	8000f2a <__aeabi_dadd+0x432>
 800103e:	2a00      	cmp	r2, #0
 8001040:	d0e2      	beq.n	8001008 <__aeabi_dadd+0x510>
 8001042:	003a      	movs	r2, r7
 8001044:	430a      	orrs	r2, r1
 8001046:	d0cd      	beq.n	8000fe4 <__aeabi_dadd+0x4ec>
 8001048:	0742      	lsls	r2, r0, #29
 800104a:	08db      	lsrs	r3, r3, #3
 800104c:	4313      	orrs	r3, r2
 800104e:	2280      	movs	r2, #128	; 0x80
 8001050:	08c0      	lsrs	r0, r0, #3
 8001052:	0312      	lsls	r2, r2, #12
 8001054:	4210      	tst	r0, r2
 8001056:	d006      	beq.n	8001066 <__aeabi_dadd+0x56e>
 8001058:	08fc      	lsrs	r4, r7, #3
 800105a:	4214      	tst	r4, r2
 800105c:	d103      	bne.n	8001066 <__aeabi_dadd+0x56e>
 800105e:	0020      	movs	r0, r4
 8001060:	08cb      	lsrs	r3, r1, #3
 8001062:	077a      	lsls	r2, r7, #29
 8001064:	4313      	orrs	r3, r2
 8001066:	0f5a      	lsrs	r2, r3, #29
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	0752      	lsls	r2, r2, #29
 800106c:	08db      	lsrs	r3, r3, #3
 800106e:	4313      	orrs	r3, r2
 8001070:	e690      	b.n	8000d94 <__aeabi_dadd+0x29c>
 8001072:	4643      	mov	r3, r8
 8001074:	430b      	orrs	r3, r1
 8001076:	d100      	bne.n	800107a <__aeabi_dadd+0x582>
 8001078:	e709      	b.n	8000e8e <__aeabi_dadd+0x396>
 800107a:	4643      	mov	r3, r8
 800107c:	4642      	mov	r2, r8
 800107e:	08c9      	lsrs	r1, r1, #3
 8001080:	075b      	lsls	r3, r3, #29
 8001082:	4655      	mov	r5, sl
 8001084:	430b      	orrs	r3, r1
 8001086:	08d0      	lsrs	r0, r2, #3
 8001088:	e666      	b.n	8000d58 <__aeabi_dadd+0x260>
 800108a:	1acc      	subs	r4, r1, r3
 800108c:	42a1      	cmp	r1, r4
 800108e:	4189      	sbcs	r1, r1
 8001090:	1a3f      	subs	r7, r7, r0
 8001092:	4249      	negs	r1, r1
 8001094:	4655      	mov	r5, sl
 8001096:	2601      	movs	r6, #1
 8001098:	1a7f      	subs	r7, r7, r1
 800109a:	e57e      	b.n	8000b9a <__aeabi_dadd+0xa2>
 800109c:	4642      	mov	r2, r8
 800109e:	1a5c      	subs	r4, r3, r1
 80010a0:	1a87      	subs	r7, r0, r2
 80010a2:	42a3      	cmp	r3, r4
 80010a4:	4192      	sbcs	r2, r2
 80010a6:	4252      	negs	r2, r2
 80010a8:	1abf      	subs	r7, r7, r2
 80010aa:	023a      	lsls	r2, r7, #8
 80010ac:	d53d      	bpl.n	800112a <__aeabi_dadd+0x632>
 80010ae:	1acc      	subs	r4, r1, r3
 80010b0:	42a1      	cmp	r1, r4
 80010b2:	4189      	sbcs	r1, r1
 80010b4:	4643      	mov	r3, r8
 80010b6:	4249      	negs	r1, r1
 80010b8:	1a1f      	subs	r7, r3, r0
 80010ba:	4655      	mov	r5, sl
 80010bc:	1a7f      	subs	r7, r7, r1
 80010be:	e595      	b.n	8000bec <__aeabi_dadd+0xf4>
 80010c0:	077b      	lsls	r3, r7, #29
 80010c2:	08c9      	lsrs	r1, r1, #3
 80010c4:	430b      	orrs	r3, r1
 80010c6:	08f8      	lsrs	r0, r7, #3
 80010c8:	e643      	b.n	8000d52 <__aeabi_dadd+0x25a>
 80010ca:	4644      	mov	r4, r8
 80010cc:	08db      	lsrs	r3, r3, #3
 80010ce:	430c      	orrs	r4, r1
 80010d0:	d130      	bne.n	8001134 <__aeabi_dadd+0x63c>
 80010d2:	0742      	lsls	r2, r0, #29
 80010d4:	4313      	orrs	r3, r2
 80010d6:	08c0      	lsrs	r0, r0, #3
 80010d8:	e65c      	b.n	8000d94 <__aeabi_dadd+0x29c>
 80010da:	077b      	lsls	r3, r7, #29
 80010dc:	08c9      	lsrs	r1, r1, #3
 80010de:	430b      	orrs	r3, r1
 80010e0:	08f8      	lsrs	r0, r7, #3
 80010e2:	e639      	b.n	8000d58 <__aeabi_dadd+0x260>
 80010e4:	185c      	adds	r4, r3, r1
 80010e6:	429c      	cmp	r4, r3
 80010e8:	419b      	sbcs	r3, r3
 80010ea:	4440      	add	r0, r8
 80010ec:	425b      	negs	r3, r3
 80010ee:	18c7      	adds	r7, r0, r3
 80010f0:	023b      	lsls	r3, r7, #8
 80010f2:	d400      	bmi.n	80010f6 <__aeabi_dadd+0x5fe>
 80010f4:	e625      	b.n	8000d42 <__aeabi_dadd+0x24a>
 80010f6:	4b1d      	ldr	r3, [pc, #116]	; (800116c <__aeabi_dadd+0x674>)
 80010f8:	2601      	movs	r6, #1
 80010fa:	401f      	ands	r7, r3
 80010fc:	e621      	b.n	8000d42 <__aeabi_dadd+0x24a>
 80010fe:	0004      	movs	r4, r0
 8001100:	3a20      	subs	r2, #32
 8001102:	40d4      	lsrs	r4, r2
 8001104:	4662      	mov	r2, ip
 8001106:	2a20      	cmp	r2, #32
 8001108:	d004      	beq.n	8001114 <__aeabi_dadd+0x61c>
 800110a:	2240      	movs	r2, #64	; 0x40
 800110c:	4666      	mov	r6, ip
 800110e:	1b92      	subs	r2, r2, r6
 8001110:	4090      	lsls	r0, r2
 8001112:	4303      	orrs	r3, r0
 8001114:	1e5a      	subs	r2, r3, #1
 8001116:	4193      	sbcs	r3, r2
 8001118:	431c      	orrs	r4, r3
 800111a:	e67e      	b.n	8000e1a <__aeabi_dadd+0x322>
 800111c:	185c      	adds	r4, r3, r1
 800111e:	428c      	cmp	r4, r1
 8001120:	4189      	sbcs	r1, r1
 8001122:	4440      	add	r0, r8
 8001124:	4249      	negs	r1, r1
 8001126:	1847      	adds	r7, r0, r1
 8001128:	e6dd      	b.n	8000ee6 <__aeabi_dadd+0x3ee>
 800112a:	0023      	movs	r3, r4
 800112c:	433b      	orrs	r3, r7
 800112e:	d100      	bne.n	8001132 <__aeabi_dadd+0x63a>
 8001130:	e6ad      	b.n	8000e8e <__aeabi_dadd+0x396>
 8001132:	e606      	b.n	8000d42 <__aeabi_dadd+0x24a>
 8001134:	0744      	lsls	r4, r0, #29
 8001136:	4323      	orrs	r3, r4
 8001138:	2480      	movs	r4, #128	; 0x80
 800113a:	08c0      	lsrs	r0, r0, #3
 800113c:	0324      	lsls	r4, r4, #12
 800113e:	4220      	tst	r0, r4
 8001140:	d008      	beq.n	8001154 <__aeabi_dadd+0x65c>
 8001142:	4642      	mov	r2, r8
 8001144:	08d6      	lsrs	r6, r2, #3
 8001146:	4226      	tst	r6, r4
 8001148:	d104      	bne.n	8001154 <__aeabi_dadd+0x65c>
 800114a:	4655      	mov	r5, sl
 800114c:	0030      	movs	r0, r6
 800114e:	08cb      	lsrs	r3, r1, #3
 8001150:	0751      	lsls	r1, r2, #29
 8001152:	430b      	orrs	r3, r1
 8001154:	0f5a      	lsrs	r2, r3, #29
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	08db      	lsrs	r3, r3, #3
 800115a:	0752      	lsls	r2, r2, #29
 800115c:	4313      	orrs	r3, r2
 800115e:	e619      	b.n	8000d94 <__aeabi_dadd+0x29c>
 8001160:	2300      	movs	r3, #0
 8001162:	4a01      	ldr	r2, [pc, #4]	; (8001168 <__aeabi_dadd+0x670>)
 8001164:	001f      	movs	r7, r3
 8001166:	e55e      	b.n	8000c26 <__aeabi_dadd+0x12e>
 8001168:	000007ff 	.word	0x000007ff
 800116c:	ff7fffff 	.word	0xff7fffff

08001170 <__aeabi_ddiv>:
 8001170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001172:	4657      	mov	r7, sl
 8001174:	464e      	mov	r6, r9
 8001176:	4645      	mov	r5, r8
 8001178:	46de      	mov	lr, fp
 800117a:	b5e0      	push	{r5, r6, r7, lr}
 800117c:	4681      	mov	r9, r0
 800117e:	0005      	movs	r5, r0
 8001180:	030c      	lsls	r4, r1, #12
 8001182:	0048      	lsls	r0, r1, #1
 8001184:	4692      	mov	sl, r2
 8001186:	001f      	movs	r7, r3
 8001188:	b085      	sub	sp, #20
 800118a:	0b24      	lsrs	r4, r4, #12
 800118c:	0d40      	lsrs	r0, r0, #21
 800118e:	0fce      	lsrs	r6, r1, #31
 8001190:	2800      	cmp	r0, #0
 8001192:	d100      	bne.n	8001196 <__aeabi_ddiv+0x26>
 8001194:	e156      	b.n	8001444 <__aeabi_ddiv+0x2d4>
 8001196:	4bd4      	ldr	r3, [pc, #848]	; (80014e8 <__aeabi_ddiv+0x378>)
 8001198:	4298      	cmp	r0, r3
 800119a:	d100      	bne.n	800119e <__aeabi_ddiv+0x2e>
 800119c:	e172      	b.n	8001484 <__aeabi_ddiv+0x314>
 800119e:	0f6b      	lsrs	r3, r5, #29
 80011a0:	00e4      	lsls	r4, r4, #3
 80011a2:	431c      	orrs	r4, r3
 80011a4:	2380      	movs	r3, #128	; 0x80
 80011a6:	041b      	lsls	r3, r3, #16
 80011a8:	4323      	orrs	r3, r4
 80011aa:	4698      	mov	r8, r3
 80011ac:	4bcf      	ldr	r3, [pc, #828]	; (80014ec <__aeabi_ddiv+0x37c>)
 80011ae:	00ed      	lsls	r5, r5, #3
 80011b0:	469b      	mov	fp, r3
 80011b2:	2300      	movs	r3, #0
 80011b4:	4699      	mov	r9, r3
 80011b6:	4483      	add	fp, r0
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	033c      	lsls	r4, r7, #12
 80011bc:	007b      	lsls	r3, r7, #1
 80011be:	4650      	mov	r0, sl
 80011c0:	0b24      	lsrs	r4, r4, #12
 80011c2:	0d5b      	lsrs	r3, r3, #21
 80011c4:	0fff      	lsrs	r7, r7, #31
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d100      	bne.n	80011cc <__aeabi_ddiv+0x5c>
 80011ca:	e11f      	b.n	800140c <__aeabi_ddiv+0x29c>
 80011cc:	4ac6      	ldr	r2, [pc, #792]	; (80014e8 <__aeabi_ddiv+0x378>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d100      	bne.n	80011d4 <__aeabi_ddiv+0x64>
 80011d2:	e162      	b.n	800149a <__aeabi_ddiv+0x32a>
 80011d4:	49c5      	ldr	r1, [pc, #788]	; (80014ec <__aeabi_ddiv+0x37c>)
 80011d6:	0f42      	lsrs	r2, r0, #29
 80011d8:	468c      	mov	ip, r1
 80011da:	00e4      	lsls	r4, r4, #3
 80011dc:	4659      	mov	r1, fp
 80011de:	4314      	orrs	r4, r2
 80011e0:	2280      	movs	r2, #128	; 0x80
 80011e2:	4463      	add	r3, ip
 80011e4:	0412      	lsls	r2, r2, #16
 80011e6:	1acb      	subs	r3, r1, r3
 80011e8:	4314      	orrs	r4, r2
 80011ea:	469b      	mov	fp, r3
 80011ec:	00c2      	lsls	r2, r0, #3
 80011ee:	2000      	movs	r0, #0
 80011f0:	0033      	movs	r3, r6
 80011f2:	407b      	eors	r3, r7
 80011f4:	469a      	mov	sl, r3
 80011f6:	464b      	mov	r3, r9
 80011f8:	2b0f      	cmp	r3, #15
 80011fa:	d827      	bhi.n	800124c <__aeabi_ddiv+0xdc>
 80011fc:	49bc      	ldr	r1, [pc, #752]	; (80014f0 <__aeabi_ddiv+0x380>)
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	58cb      	ldr	r3, [r1, r3]
 8001202:	469f      	mov	pc, r3
 8001204:	46b2      	mov	sl, r6
 8001206:	9b00      	ldr	r3, [sp, #0]
 8001208:	2b02      	cmp	r3, #2
 800120a:	d016      	beq.n	800123a <__aeabi_ddiv+0xca>
 800120c:	2b03      	cmp	r3, #3
 800120e:	d100      	bne.n	8001212 <__aeabi_ddiv+0xa2>
 8001210:	e28e      	b.n	8001730 <__aeabi_ddiv+0x5c0>
 8001212:	2b01      	cmp	r3, #1
 8001214:	d000      	beq.n	8001218 <__aeabi_ddiv+0xa8>
 8001216:	e0d9      	b.n	80013cc <__aeabi_ddiv+0x25c>
 8001218:	2300      	movs	r3, #0
 800121a:	2400      	movs	r4, #0
 800121c:	2500      	movs	r5, #0
 800121e:	4652      	mov	r2, sl
 8001220:	051b      	lsls	r3, r3, #20
 8001222:	4323      	orrs	r3, r4
 8001224:	07d2      	lsls	r2, r2, #31
 8001226:	4313      	orrs	r3, r2
 8001228:	0028      	movs	r0, r5
 800122a:	0019      	movs	r1, r3
 800122c:	b005      	add	sp, #20
 800122e:	bcf0      	pop	{r4, r5, r6, r7}
 8001230:	46bb      	mov	fp, r7
 8001232:	46b2      	mov	sl, r6
 8001234:	46a9      	mov	r9, r5
 8001236:	46a0      	mov	r8, r4
 8001238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800123a:	2400      	movs	r4, #0
 800123c:	2500      	movs	r5, #0
 800123e:	4baa      	ldr	r3, [pc, #680]	; (80014e8 <__aeabi_ddiv+0x378>)
 8001240:	e7ed      	b.n	800121e <__aeabi_ddiv+0xae>
 8001242:	46ba      	mov	sl, r7
 8001244:	46a0      	mov	r8, r4
 8001246:	0015      	movs	r5, r2
 8001248:	9000      	str	r0, [sp, #0]
 800124a:	e7dc      	b.n	8001206 <__aeabi_ddiv+0x96>
 800124c:	4544      	cmp	r4, r8
 800124e:	d200      	bcs.n	8001252 <__aeabi_ddiv+0xe2>
 8001250:	e1c7      	b.n	80015e2 <__aeabi_ddiv+0x472>
 8001252:	d100      	bne.n	8001256 <__aeabi_ddiv+0xe6>
 8001254:	e1c2      	b.n	80015dc <__aeabi_ddiv+0x46c>
 8001256:	2301      	movs	r3, #1
 8001258:	425b      	negs	r3, r3
 800125a:	469c      	mov	ip, r3
 800125c:	002e      	movs	r6, r5
 800125e:	4640      	mov	r0, r8
 8001260:	2500      	movs	r5, #0
 8001262:	44e3      	add	fp, ip
 8001264:	0223      	lsls	r3, r4, #8
 8001266:	0e14      	lsrs	r4, r2, #24
 8001268:	431c      	orrs	r4, r3
 800126a:	0c1b      	lsrs	r3, r3, #16
 800126c:	4699      	mov	r9, r3
 800126e:	0423      	lsls	r3, r4, #16
 8001270:	0c1f      	lsrs	r7, r3, #16
 8001272:	0212      	lsls	r2, r2, #8
 8001274:	4649      	mov	r1, r9
 8001276:	9200      	str	r2, [sp, #0]
 8001278:	9701      	str	r7, [sp, #4]
 800127a:	f7fe fff1 	bl	8000260 <__aeabi_uidivmod>
 800127e:	0002      	movs	r2, r0
 8001280:	437a      	muls	r2, r7
 8001282:	040b      	lsls	r3, r1, #16
 8001284:	0c31      	lsrs	r1, r6, #16
 8001286:	4680      	mov	r8, r0
 8001288:	4319      	orrs	r1, r3
 800128a:	428a      	cmp	r2, r1
 800128c:	d907      	bls.n	800129e <__aeabi_ddiv+0x12e>
 800128e:	2301      	movs	r3, #1
 8001290:	425b      	negs	r3, r3
 8001292:	469c      	mov	ip, r3
 8001294:	1909      	adds	r1, r1, r4
 8001296:	44e0      	add	r8, ip
 8001298:	428c      	cmp	r4, r1
 800129a:	d800      	bhi.n	800129e <__aeabi_ddiv+0x12e>
 800129c:	e207      	b.n	80016ae <__aeabi_ddiv+0x53e>
 800129e:	1a88      	subs	r0, r1, r2
 80012a0:	4649      	mov	r1, r9
 80012a2:	f7fe ffdd 	bl	8000260 <__aeabi_uidivmod>
 80012a6:	0409      	lsls	r1, r1, #16
 80012a8:	468c      	mov	ip, r1
 80012aa:	0431      	lsls	r1, r6, #16
 80012ac:	4666      	mov	r6, ip
 80012ae:	9a01      	ldr	r2, [sp, #4]
 80012b0:	0c09      	lsrs	r1, r1, #16
 80012b2:	4342      	muls	r2, r0
 80012b4:	0003      	movs	r3, r0
 80012b6:	4331      	orrs	r1, r6
 80012b8:	428a      	cmp	r2, r1
 80012ba:	d904      	bls.n	80012c6 <__aeabi_ddiv+0x156>
 80012bc:	1909      	adds	r1, r1, r4
 80012be:	3b01      	subs	r3, #1
 80012c0:	428c      	cmp	r4, r1
 80012c2:	d800      	bhi.n	80012c6 <__aeabi_ddiv+0x156>
 80012c4:	e1ed      	b.n	80016a2 <__aeabi_ddiv+0x532>
 80012c6:	1a88      	subs	r0, r1, r2
 80012c8:	4642      	mov	r2, r8
 80012ca:	0412      	lsls	r2, r2, #16
 80012cc:	431a      	orrs	r2, r3
 80012ce:	4690      	mov	r8, r2
 80012d0:	4641      	mov	r1, r8
 80012d2:	9b00      	ldr	r3, [sp, #0]
 80012d4:	040e      	lsls	r6, r1, #16
 80012d6:	0c1b      	lsrs	r3, r3, #16
 80012d8:	001f      	movs	r7, r3
 80012da:	9302      	str	r3, [sp, #8]
 80012dc:	9b00      	ldr	r3, [sp, #0]
 80012de:	0c36      	lsrs	r6, r6, #16
 80012e0:	041b      	lsls	r3, r3, #16
 80012e2:	0c19      	lsrs	r1, r3, #16
 80012e4:	000b      	movs	r3, r1
 80012e6:	4373      	muls	r3, r6
 80012e8:	0c12      	lsrs	r2, r2, #16
 80012ea:	437e      	muls	r6, r7
 80012ec:	9103      	str	r1, [sp, #12]
 80012ee:	4351      	muls	r1, r2
 80012f0:	437a      	muls	r2, r7
 80012f2:	0c1f      	lsrs	r7, r3, #16
 80012f4:	46bc      	mov	ip, r7
 80012f6:	1876      	adds	r6, r6, r1
 80012f8:	4466      	add	r6, ip
 80012fa:	42b1      	cmp	r1, r6
 80012fc:	d903      	bls.n	8001306 <__aeabi_ddiv+0x196>
 80012fe:	2180      	movs	r1, #128	; 0x80
 8001300:	0249      	lsls	r1, r1, #9
 8001302:	468c      	mov	ip, r1
 8001304:	4462      	add	r2, ip
 8001306:	0c31      	lsrs	r1, r6, #16
 8001308:	188a      	adds	r2, r1, r2
 800130a:	0431      	lsls	r1, r6, #16
 800130c:	041e      	lsls	r6, r3, #16
 800130e:	0c36      	lsrs	r6, r6, #16
 8001310:	198e      	adds	r6, r1, r6
 8001312:	4290      	cmp	r0, r2
 8001314:	d302      	bcc.n	800131c <__aeabi_ddiv+0x1ac>
 8001316:	d112      	bne.n	800133e <__aeabi_ddiv+0x1ce>
 8001318:	42b5      	cmp	r5, r6
 800131a:	d210      	bcs.n	800133e <__aeabi_ddiv+0x1ce>
 800131c:	4643      	mov	r3, r8
 800131e:	1e59      	subs	r1, r3, #1
 8001320:	9b00      	ldr	r3, [sp, #0]
 8001322:	469c      	mov	ip, r3
 8001324:	4465      	add	r5, ip
 8001326:	001f      	movs	r7, r3
 8001328:	429d      	cmp	r5, r3
 800132a:	419b      	sbcs	r3, r3
 800132c:	425b      	negs	r3, r3
 800132e:	191b      	adds	r3, r3, r4
 8001330:	18c0      	adds	r0, r0, r3
 8001332:	4284      	cmp	r4, r0
 8001334:	d200      	bcs.n	8001338 <__aeabi_ddiv+0x1c8>
 8001336:	e1a0      	b.n	800167a <__aeabi_ddiv+0x50a>
 8001338:	d100      	bne.n	800133c <__aeabi_ddiv+0x1cc>
 800133a:	e19b      	b.n	8001674 <__aeabi_ddiv+0x504>
 800133c:	4688      	mov	r8, r1
 800133e:	1bae      	subs	r6, r5, r6
 8001340:	42b5      	cmp	r5, r6
 8001342:	41ad      	sbcs	r5, r5
 8001344:	1a80      	subs	r0, r0, r2
 8001346:	426d      	negs	r5, r5
 8001348:	1b40      	subs	r0, r0, r5
 800134a:	4284      	cmp	r4, r0
 800134c:	d100      	bne.n	8001350 <__aeabi_ddiv+0x1e0>
 800134e:	e1d5      	b.n	80016fc <__aeabi_ddiv+0x58c>
 8001350:	4649      	mov	r1, r9
 8001352:	f7fe ff85 	bl	8000260 <__aeabi_uidivmod>
 8001356:	9a01      	ldr	r2, [sp, #4]
 8001358:	040b      	lsls	r3, r1, #16
 800135a:	4342      	muls	r2, r0
 800135c:	0c31      	lsrs	r1, r6, #16
 800135e:	0005      	movs	r5, r0
 8001360:	4319      	orrs	r1, r3
 8001362:	428a      	cmp	r2, r1
 8001364:	d900      	bls.n	8001368 <__aeabi_ddiv+0x1f8>
 8001366:	e16c      	b.n	8001642 <__aeabi_ddiv+0x4d2>
 8001368:	1a88      	subs	r0, r1, r2
 800136a:	4649      	mov	r1, r9
 800136c:	f7fe ff78 	bl	8000260 <__aeabi_uidivmod>
 8001370:	9a01      	ldr	r2, [sp, #4]
 8001372:	0436      	lsls	r6, r6, #16
 8001374:	4342      	muls	r2, r0
 8001376:	0409      	lsls	r1, r1, #16
 8001378:	0c36      	lsrs	r6, r6, #16
 800137a:	0003      	movs	r3, r0
 800137c:	430e      	orrs	r6, r1
 800137e:	42b2      	cmp	r2, r6
 8001380:	d900      	bls.n	8001384 <__aeabi_ddiv+0x214>
 8001382:	e153      	b.n	800162c <__aeabi_ddiv+0x4bc>
 8001384:	9803      	ldr	r0, [sp, #12]
 8001386:	1ab6      	subs	r6, r6, r2
 8001388:	0002      	movs	r2, r0
 800138a:	042d      	lsls	r5, r5, #16
 800138c:	431d      	orrs	r5, r3
 800138e:	9f02      	ldr	r7, [sp, #8]
 8001390:	042b      	lsls	r3, r5, #16
 8001392:	0c1b      	lsrs	r3, r3, #16
 8001394:	435a      	muls	r2, r3
 8001396:	437b      	muls	r3, r7
 8001398:	469c      	mov	ip, r3
 800139a:	0c29      	lsrs	r1, r5, #16
 800139c:	4348      	muls	r0, r1
 800139e:	0c13      	lsrs	r3, r2, #16
 80013a0:	4484      	add	ip, r0
 80013a2:	4463      	add	r3, ip
 80013a4:	4379      	muls	r1, r7
 80013a6:	4298      	cmp	r0, r3
 80013a8:	d903      	bls.n	80013b2 <__aeabi_ddiv+0x242>
 80013aa:	2080      	movs	r0, #128	; 0x80
 80013ac:	0240      	lsls	r0, r0, #9
 80013ae:	4684      	mov	ip, r0
 80013b0:	4461      	add	r1, ip
 80013b2:	0c18      	lsrs	r0, r3, #16
 80013b4:	0412      	lsls	r2, r2, #16
 80013b6:	041b      	lsls	r3, r3, #16
 80013b8:	0c12      	lsrs	r2, r2, #16
 80013ba:	1841      	adds	r1, r0, r1
 80013bc:	189b      	adds	r3, r3, r2
 80013be:	428e      	cmp	r6, r1
 80013c0:	d200      	bcs.n	80013c4 <__aeabi_ddiv+0x254>
 80013c2:	e0ff      	b.n	80015c4 <__aeabi_ddiv+0x454>
 80013c4:	d100      	bne.n	80013c8 <__aeabi_ddiv+0x258>
 80013c6:	e0fa      	b.n	80015be <__aeabi_ddiv+0x44e>
 80013c8:	2301      	movs	r3, #1
 80013ca:	431d      	orrs	r5, r3
 80013cc:	4a49      	ldr	r2, [pc, #292]	; (80014f4 <__aeabi_ddiv+0x384>)
 80013ce:	445a      	add	r2, fp
 80013d0:	2a00      	cmp	r2, #0
 80013d2:	dc00      	bgt.n	80013d6 <__aeabi_ddiv+0x266>
 80013d4:	e0aa      	b.n	800152c <__aeabi_ddiv+0x3bc>
 80013d6:	076b      	lsls	r3, r5, #29
 80013d8:	d000      	beq.n	80013dc <__aeabi_ddiv+0x26c>
 80013da:	e13d      	b.n	8001658 <__aeabi_ddiv+0x4e8>
 80013dc:	08ed      	lsrs	r5, r5, #3
 80013de:	4643      	mov	r3, r8
 80013e0:	01db      	lsls	r3, r3, #7
 80013e2:	d506      	bpl.n	80013f2 <__aeabi_ddiv+0x282>
 80013e4:	4642      	mov	r2, r8
 80013e6:	4b44      	ldr	r3, [pc, #272]	; (80014f8 <__aeabi_ddiv+0x388>)
 80013e8:	401a      	ands	r2, r3
 80013ea:	4690      	mov	r8, r2
 80013ec:	2280      	movs	r2, #128	; 0x80
 80013ee:	00d2      	lsls	r2, r2, #3
 80013f0:	445a      	add	r2, fp
 80013f2:	4b42      	ldr	r3, [pc, #264]	; (80014fc <__aeabi_ddiv+0x38c>)
 80013f4:	429a      	cmp	r2, r3
 80013f6:	dd00      	ble.n	80013fa <__aeabi_ddiv+0x28a>
 80013f8:	e71f      	b.n	800123a <__aeabi_ddiv+0xca>
 80013fa:	4643      	mov	r3, r8
 80013fc:	075b      	lsls	r3, r3, #29
 80013fe:	431d      	orrs	r5, r3
 8001400:	4643      	mov	r3, r8
 8001402:	0552      	lsls	r2, r2, #21
 8001404:	025c      	lsls	r4, r3, #9
 8001406:	0b24      	lsrs	r4, r4, #12
 8001408:	0d53      	lsrs	r3, r2, #21
 800140a:	e708      	b.n	800121e <__aeabi_ddiv+0xae>
 800140c:	4652      	mov	r2, sl
 800140e:	4322      	orrs	r2, r4
 8001410:	d100      	bne.n	8001414 <__aeabi_ddiv+0x2a4>
 8001412:	e07b      	b.n	800150c <__aeabi_ddiv+0x39c>
 8001414:	2c00      	cmp	r4, #0
 8001416:	d100      	bne.n	800141a <__aeabi_ddiv+0x2aa>
 8001418:	e0fa      	b.n	8001610 <__aeabi_ddiv+0x4a0>
 800141a:	0020      	movs	r0, r4
 800141c:	f001 fa22 	bl	8002864 <__clzsi2>
 8001420:	0002      	movs	r2, r0
 8001422:	3a0b      	subs	r2, #11
 8001424:	231d      	movs	r3, #29
 8001426:	0001      	movs	r1, r0
 8001428:	1a9b      	subs	r3, r3, r2
 800142a:	4652      	mov	r2, sl
 800142c:	3908      	subs	r1, #8
 800142e:	40da      	lsrs	r2, r3
 8001430:	408c      	lsls	r4, r1
 8001432:	4314      	orrs	r4, r2
 8001434:	4652      	mov	r2, sl
 8001436:	408a      	lsls	r2, r1
 8001438:	4b31      	ldr	r3, [pc, #196]	; (8001500 <__aeabi_ddiv+0x390>)
 800143a:	4458      	add	r0, fp
 800143c:	469b      	mov	fp, r3
 800143e:	4483      	add	fp, r0
 8001440:	2000      	movs	r0, #0
 8001442:	e6d5      	b.n	80011f0 <__aeabi_ddiv+0x80>
 8001444:	464b      	mov	r3, r9
 8001446:	4323      	orrs	r3, r4
 8001448:	4698      	mov	r8, r3
 800144a:	d044      	beq.n	80014d6 <__aeabi_ddiv+0x366>
 800144c:	2c00      	cmp	r4, #0
 800144e:	d100      	bne.n	8001452 <__aeabi_ddiv+0x2e2>
 8001450:	e0ce      	b.n	80015f0 <__aeabi_ddiv+0x480>
 8001452:	0020      	movs	r0, r4
 8001454:	f001 fa06 	bl	8002864 <__clzsi2>
 8001458:	0001      	movs	r1, r0
 800145a:	0002      	movs	r2, r0
 800145c:	390b      	subs	r1, #11
 800145e:	231d      	movs	r3, #29
 8001460:	1a5b      	subs	r3, r3, r1
 8001462:	4649      	mov	r1, r9
 8001464:	0010      	movs	r0, r2
 8001466:	40d9      	lsrs	r1, r3
 8001468:	3808      	subs	r0, #8
 800146a:	4084      	lsls	r4, r0
 800146c:	000b      	movs	r3, r1
 800146e:	464d      	mov	r5, r9
 8001470:	4323      	orrs	r3, r4
 8001472:	4698      	mov	r8, r3
 8001474:	4085      	lsls	r5, r0
 8001476:	4823      	ldr	r0, [pc, #140]	; (8001504 <__aeabi_ddiv+0x394>)
 8001478:	1a83      	subs	r3, r0, r2
 800147a:	469b      	mov	fp, r3
 800147c:	2300      	movs	r3, #0
 800147e:	4699      	mov	r9, r3
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	e69a      	b.n	80011ba <__aeabi_ddiv+0x4a>
 8001484:	464b      	mov	r3, r9
 8001486:	4323      	orrs	r3, r4
 8001488:	4698      	mov	r8, r3
 800148a:	d11d      	bne.n	80014c8 <__aeabi_ddiv+0x358>
 800148c:	2308      	movs	r3, #8
 800148e:	4699      	mov	r9, r3
 8001490:	3b06      	subs	r3, #6
 8001492:	2500      	movs	r5, #0
 8001494:	4683      	mov	fp, r0
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	e68f      	b.n	80011ba <__aeabi_ddiv+0x4a>
 800149a:	4652      	mov	r2, sl
 800149c:	4322      	orrs	r2, r4
 800149e:	d109      	bne.n	80014b4 <__aeabi_ddiv+0x344>
 80014a0:	2302      	movs	r3, #2
 80014a2:	4649      	mov	r1, r9
 80014a4:	4319      	orrs	r1, r3
 80014a6:	4b18      	ldr	r3, [pc, #96]	; (8001508 <__aeabi_ddiv+0x398>)
 80014a8:	4689      	mov	r9, r1
 80014aa:	469c      	mov	ip, r3
 80014ac:	2400      	movs	r4, #0
 80014ae:	2002      	movs	r0, #2
 80014b0:	44e3      	add	fp, ip
 80014b2:	e69d      	b.n	80011f0 <__aeabi_ddiv+0x80>
 80014b4:	2303      	movs	r3, #3
 80014b6:	464a      	mov	r2, r9
 80014b8:	431a      	orrs	r2, r3
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <__aeabi_ddiv+0x398>)
 80014bc:	4691      	mov	r9, r2
 80014be:	469c      	mov	ip, r3
 80014c0:	4652      	mov	r2, sl
 80014c2:	2003      	movs	r0, #3
 80014c4:	44e3      	add	fp, ip
 80014c6:	e693      	b.n	80011f0 <__aeabi_ddiv+0x80>
 80014c8:	230c      	movs	r3, #12
 80014ca:	4699      	mov	r9, r3
 80014cc:	3b09      	subs	r3, #9
 80014ce:	46a0      	mov	r8, r4
 80014d0:	4683      	mov	fp, r0
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	e671      	b.n	80011ba <__aeabi_ddiv+0x4a>
 80014d6:	2304      	movs	r3, #4
 80014d8:	4699      	mov	r9, r3
 80014da:	2300      	movs	r3, #0
 80014dc:	469b      	mov	fp, r3
 80014de:	3301      	adds	r3, #1
 80014e0:	2500      	movs	r5, #0
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	e669      	b.n	80011ba <__aeabi_ddiv+0x4a>
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	000007ff 	.word	0x000007ff
 80014ec:	fffffc01 	.word	0xfffffc01
 80014f0:	0800a0a4 	.word	0x0800a0a4
 80014f4:	000003ff 	.word	0x000003ff
 80014f8:	feffffff 	.word	0xfeffffff
 80014fc:	000007fe 	.word	0x000007fe
 8001500:	000003f3 	.word	0x000003f3
 8001504:	fffffc0d 	.word	0xfffffc0d
 8001508:	fffff801 	.word	0xfffff801
 800150c:	4649      	mov	r1, r9
 800150e:	2301      	movs	r3, #1
 8001510:	4319      	orrs	r1, r3
 8001512:	4689      	mov	r9, r1
 8001514:	2400      	movs	r4, #0
 8001516:	2001      	movs	r0, #1
 8001518:	e66a      	b.n	80011f0 <__aeabi_ddiv+0x80>
 800151a:	2300      	movs	r3, #0
 800151c:	2480      	movs	r4, #128	; 0x80
 800151e:	469a      	mov	sl, r3
 8001520:	2500      	movs	r5, #0
 8001522:	4b8a      	ldr	r3, [pc, #552]	; (800174c <__aeabi_ddiv+0x5dc>)
 8001524:	0324      	lsls	r4, r4, #12
 8001526:	e67a      	b.n	800121e <__aeabi_ddiv+0xae>
 8001528:	2501      	movs	r5, #1
 800152a:	426d      	negs	r5, r5
 800152c:	2301      	movs	r3, #1
 800152e:	1a9b      	subs	r3, r3, r2
 8001530:	2b38      	cmp	r3, #56	; 0x38
 8001532:	dd00      	ble.n	8001536 <__aeabi_ddiv+0x3c6>
 8001534:	e670      	b.n	8001218 <__aeabi_ddiv+0xa8>
 8001536:	2b1f      	cmp	r3, #31
 8001538:	dc00      	bgt.n	800153c <__aeabi_ddiv+0x3cc>
 800153a:	e0bf      	b.n	80016bc <__aeabi_ddiv+0x54c>
 800153c:	211f      	movs	r1, #31
 800153e:	4249      	negs	r1, r1
 8001540:	1a8a      	subs	r2, r1, r2
 8001542:	4641      	mov	r1, r8
 8001544:	40d1      	lsrs	r1, r2
 8001546:	000a      	movs	r2, r1
 8001548:	2b20      	cmp	r3, #32
 800154a:	d004      	beq.n	8001556 <__aeabi_ddiv+0x3e6>
 800154c:	4641      	mov	r1, r8
 800154e:	4b80      	ldr	r3, [pc, #512]	; (8001750 <__aeabi_ddiv+0x5e0>)
 8001550:	445b      	add	r3, fp
 8001552:	4099      	lsls	r1, r3
 8001554:	430d      	orrs	r5, r1
 8001556:	1e6b      	subs	r3, r5, #1
 8001558:	419d      	sbcs	r5, r3
 800155a:	2307      	movs	r3, #7
 800155c:	432a      	orrs	r2, r5
 800155e:	001d      	movs	r5, r3
 8001560:	2400      	movs	r4, #0
 8001562:	4015      	ands	r5, r2
 8001564:	4213      	tst	r3, r2
 8001566:	d100      	bne.n	800156a <__aeabi_ddiv+0x3fa>
 8001568:	e0d4      	b.n	8001714 <__aeabi_ddiv+0x5a4>
 800156a:	210f      	movs	r1, #15
 800156c:	2300      	movs	r3, #0
 800156e:	4011      	ands	r1, r2
 8001570:	2904      	cmp	r1, #4
 8001572:	d100      	bne.n	8001576 <__aeabi_ddiv+0x406>
 8001574:	e0cb      	b.n	800170e <__aeabi_ddiv+0x59e>
 8001576:	1d11      	adds	r1, r2, #4
 8001578:	4291      	cmp	r1, r2
 800157a:	4192      	sbcs	r2, r2
 800157c:	4252      	negs	r2, r2
 800157e:	189b      	adds	r3, r3, r2
 8001580:	000a      	movs	r2, r1
 8001582:	0219      	lsls	r1, r3, #8
 8001584:	d400      	bmi.n	8001588 <__aeabi_ddiv+0x418>
 8001586:	e0c2      	b.n	800170e <__aeabi_ddiv+0x59e>
 8001588:	2301      	movs	r3, #1
 800158a:	2400      	movs	r4, #0
 800158c:	2500      	movs	r5, #0
 800158e:	e646      	b.n	800121e <__aeabi_ddiv+0xae>
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	4641      	mov	r1, r8
 8001594:	031b      	lsls	r3, r3, #12
 8001596:	4219      	tst	r1, r3
 8001598:	d008      	beq.n	80015ac <__aeabi_ddiv+0x43c>
 800159a:	421c      	tst	r4, r3
 800159c:	d106      	bne.n	80015ac <__aeabi_ddiv+0x43c>
 800159e:	431c      	orrs	r4, r3
 80015a0:	0324      	lsls	r4, r4, #12
 80015a2:	46ba      	mov	sl, r7
 80015a4:	0015      	movs	r5, r2
 80015a6:	4b69      	ldr	r3, [pc, #420]	; (800174c <__aeabi_ddiv+0x5dc>)
 80015a8:	0b24      	lsrs	r4, r4, #12
 80015aa:	e638      	b.n	800121e <__aeabi_ddiv+0xae>
 80015ac:	2480      	movs	r4, #128	; 0x80
 80015ae:	4643      	mov	r3, r8
 80015b0:	0324      	lsls	r4, r4, #12
 80015b2:	431c      	orrs	r4, r3
 80015b4:	0324      	lsls	r4, r4, #12
 80015b6:	46b2      	mov	sl, r6
 80015b8:	4b64      	ldr	r3, [pc, #400]	; (800174c <__aeabi_ddiv+0x5dc>)
 80015ba:	0b24      	lsrs	r4, r4, #12
 80015bc:	e62f      	b.n	800121e <__aeabi_ddiv+0xae>
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d100      	bne.n	80015c4 <__aeabi_ddiv+0x454>
 80015c2:	e703      	b.n	80013cc <__aeabi_ddiv+0x25c>
 80015c4:	19a6      	adds	r6, r4, r6
 80015c6:	1e68      	subs	r0, r5, #1
 80015c8:	42a6      	cmp	r6, r4
 80015ca:	d200      	bcs.n	80015ce <__aeabi_ddiv+0x45e>
 80015cc:	e08d      	b.n	80016ea <__aeabi_ddiv+0x57a>
 80015ce:	428e      	cmp	r6, r1
 80015d0:	d200      	bcs.n	80015d4 <__aeabi_ddiv+0x464>
 80015d2:	e0a3      	b.n	800171c <__aeabi_ddiv+0x5ac>
 80015d4:	d100      	bne.n	80015d8 <__aeabi_ddiv+0x468>
 80015d6:	e0b3      	b.n	8001740 <__aeabi_ddiv+0x5d0>
 80015d8:	0005      	movs	r5, r0
 80015da:	e6f5      	b.n	80013c8 <__aeabi_ddiv+0x258>
 80015dc:	42aa      	cmp	r2, r5
 80015de:	d900      	bls.n	80015e2 <__aeabi_ddiv+0x472>
 80015e0:	e639      	b.n	8001256 <__aeabi_ddiv+0xe6>
 80015e2:	4643      	mov	r3, r8
 80015e4:	07de      	lsls	r6, r3, #31
 80015e6:	0858      	lsrs	r0, r3, #1
 80015e8:	086b      	lsrs	r3, r5, #1
 80015ea:	431e      	orrs	r6, r3
 80015ec:	07ed      	lsls	r5, r5, #31
 80015ee:	e639      	b.n	8001264 <__aeabi_ddiv+0xf4>
 80015f0:	4648      	mov	r0, r9
 80015f2:	f001 f937 	bl	8002864 <__clzsi2>
 80015f6:	0001      	movs	r1, r0
 80015f8:	0002      	movs	r2, r0
 80015fa:	3115      	adds	r1, #21
 80015fc:	3220      	adds	r2, #32
 80015fe:	291c      	cmp	r1, #28
 8001600:	dc00      	bgt.n	8001604 <__aeabi_ddiv+0x494>
 8001602:	e72c      	b.n	800145e <__aeabi_ddiv+0x2ee>
 8001604:	464b      	mov	r3, r9
 8001606:	3808      	subs	r0, #8
 8001608:	4083      	lsls	r3, r0
 800160a:	2500      	movs	r5, #0
 800160c:	4698      	mov	r8, r3
 800160e:	e732      	b.n	8001476 <__aeabi_ddiv+0x306>
 8001610:	f001 f928 	bl	8002864 <__clzsi2>
 8001614:	0003      	movs	r3, r0
 8001616:	001a      	movs	r2, r3
 8001618:	3215      	adds	r2, #21
 800161a:	3020      	adds	r0, #32
 800161c:	2a1c      	cmp	r2, #28
 800161e:	dc00      	bgt.n	8001622 <__aeabi_ddiv+0x4b2>
 8001620:	e700      	b.n	8001424 <__aeabi_ddiv+0x2b4>
 8001622:	4654      	mov	r4, sl
 8001624:	3b08      	subs	r3, #8
 8001626:	2200      	movs	r2, #0
 8001628:	409c      	lsls	r4, r3
 800162a:	e705      	b.n	8001438 <__aeabi_ddiv+0x2c8>
 800162c:	1936      	adds	r6, r6, r4
 800162e:	3b01      	subs	r3, #1
 8001630:	42b4      	cmp	r4, r6
 8001632:	d900      	bls.n	8001636 <__aeabi_ddiv+0x4c6>
 8001634:	e6a6      	b.n	8001384 <__aeabi_ddiv+0x214>
 8001636:	42b2      	cmp	r2, r6
 8001638:	d800      	bhi.n	800163c <__aeabi_ddiv+0x4cc>
 800163a:	e6a3      	b.n	8001384 <__aeabi_ddiv+0x214>
 800163c:	1e83      	subs	r3, r0, #2
 800163e:	1936      	adds	r6, r6, r4
 8001640:	e6a0      	b.n	8001384 <__aeabi_ddiv+0x214>
 8001642:	1909      	adds	r1, r1, r4
 8001644:	3d01      	subs	r5, #1
 8001646:	428c      	cmp	r4, r1
 8001648:	d900      	bls.n	800164c <__aeabi_ddiv+0x4dc>
 800164a:	e68d      	b.n	8001368 <__aeabi_ddiv+0x1f8>
 800164c:	428a      	cmp	r2, r1
 800164e:	d800      	bhi.n	8001652 <__aeabi_ddiv+0x4e2>
 8001650:	e68a      	b.n	8001368 <__aeabi_ddiv+0x1f8>
 8001652:	1e85      	subs	r5, r0, #2
 8001654:	1909      	adds	r1, r1, r4
 8001656:	e687      	b.n	8001368 <__aeabi_ddiv+0x1f8>
 8001658:	230f      	movs	r3, #15
 800165a:	402b      	ands	r3, r5
 800165c:	2b04      	cmp	r3, #4
 800165e:	d100      	bne.n	8001662 <__aeabi_ddiv+0x4f2>
 8001660:	e6bc      	b.n	80013dc <__aeabi_ddiv+0x26c>
 8001662:	2305      	movs	r3, #5
 8001664:	425b      	negs	r3, r3
 8001666:	42ab      	cmp	r3, r5
 8001668:	419b      	sbcs	r3, r3
 800166a:	3504      	adds	r5, #4
 800166c:	425b      	negs	r3, r3
 800166e:	08ed      	lsrs	r5, r5, #3
 8001670:	4498      	add	r8, r3
 8001672:	e6b4      	b.n	80013de <__aeabi_ddiv+0x26e>
 8001674:	42af      	cmp	r7, r5
 8001676:	d900      	bls.n	800167a <__aeabi_ddiv+0x50a>
 8001678:	e660      	b.n	800133c <__aeabi_ddiv+0x1cc>
 800167a:	4282      	cmp	r2, r0
 800167c:	d804      	bhi.n	8001688 <__aeabi_ddiv+0x518>
 800167e:	d000      	beq.n	8001682 <__aeabi_ddiv+0x512>
 8001680:	e65c      	b.n	800133c <__aeabi_ddiv+0x1cc>
 8001682:	42ae      	cmp	r6, r5
 8001684:	d800      	bhi.n	8001688 <__aeabi_ddiv+0x518>
 8001686:	e659      	b.n	800133c <__aeabi_ddiv+0x1cc>
 8001688:	2302      	movs	r3, #2
 800168a:	425b      	negs	r3, r3
 800168c:	469c      	mov	ip, r3
 800168e:	9b00      	ldr	r3, [sp, #0]
 8001690:	44e0      	add	r8, ip
 8001692:	469c      	mov	ip, r3
 8001694:	4465      	add	r5, ip
 8001696:	429d      	cmp	r5, r3
 8001698:	419b      	sbcs	r3, r3
 800169a:	425b      	negs	r3, r3
 800169c:	191b      	adds	r3, r3, r4
 800169e:	18c0      	adds	r0, r0, r3
 80016a0:	e64d      	b.n	800133e <__aeabi_ddiv+0x1ce>
 80016a2:	428a      	cmp	r2, r1
 80016a4:	d800      	bhi.n	80016a8 <__aeabi_ddiv+0x538>
 80016a6:	e60e      	b.n	80012c6 <__aeabi_ddiv+0x156>
 80016a8:	1e83      	subs	r3, r0, #2
 80016aa:	1909      	adds	r1, r1, r4
 80016ac:	e60b      	b.n	80012c6 <__aeabi_ddiv+0x156>
 80016ae:	428a      	cmp	r2, r1
 80016b0:	d800      	bhi.n	80016b4 <__aeabi_ddiv+0x544>
 80016b2:	e5f4      	b.n	800129e <__aeabi_ddiv+0x12e>
 80016b4:	1e83      	subs	r3, r0, #2
 80016b6:	4698      	mov	r8, r3
 80016b8:	1909      	adds	r1, r1, r4
 80016ba:	e5f0      	b.n	800129e <__aeabi_ddiv+0x12e>
 80016bc:	4925      	ldr	r1, [pc, #148]	; (8001754 <__aeabi_ddiv+0x5e4>)
 80016be:	0028      	movs	r0, r5
 80016c0:	4459      	add	r1, fp
 80016c2:	408d      	lsls	r5, r1
 80016c4:	4642      	mov	r2, r8
 80016c6:	408a      	lsls	r2, r1
 80016c8:	1e69      	subs	r1, r5, #1
 80016ca:	418d      	sbcs	r5, r1
 80016cc:	4641      	mov	r1, r8
 80016ce:	40d8      	lsrs	r0, r3
 80016d0:	40d9      	lsrs	r1, r3
 80016d2:	4302      	orrs	r2, r0
 80016d4:	432a      	orrs	r2, r5
 80016d6:	000b      	movs	r3, r1
 80016d8:	0751      	lsls	r1, r2, #29
 80016da:	d100      	bne.n	80016de <__aeabi_ddiv+0x56e>
 80016dc:	e751      	b.n	8001582 <__aeabi_ddiv+0x412>
 80016de:	210f      	movs	r1, #15
 80016e0:	4011      	ands	r1, r2
 80016e2:	2904      	cmp	r1, #4
 80016e4:	d000      	beq.n	80016e8 <__aeabi_ddiv+0x578>
 80016e6:	e746      	b.n	8001576 <__aeabi_ddiv+0x406>
 80016e8:	e74b      	b.n	8001582 <__aeabi_ddiv+0x412>
 80016ea:	0005      	movs	r5, r0
 80016ec:	428e      	cmp	r6, r1
 80016ee:	d000      	beq.n	80016f2 <__aeabi_ddiv+0x582>
 80016f0:	e66a      	b.n	80013c8 <__aeabi_ddiv+0x258>
 80016f2:	9a00      	ldr	r2, [sp, #0]
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d000      	beq.n	80016fa <__aeabi_ddiv+0x58a>
 80016f8:	e666      	b.n	80013c8 <__aeabi_ddiv+0x258>
 80016fa:	e667      	b.n	80013cc <__aeabi_ddiv+0x25c>
 80016fc:	4a16      	ldr	r2, [pc, #88]	; (8001758 <__aeabi_ddiv+0x5e8>)
 80016fe:	445a      	add	r2, fp
 8001700:	2a00      	cmp	r2, #0
 8001702:	dc00      	bgt.n	8001706 <__aeabi_ddiv+0x596>
 8001704:	e710      	b.n	8001528 <__aeabi_ddiv+0x3b8>
 8001706:	2301      	movs	r3, #1
 8001708:	2500      	movs	r5, #0
 800170a:	4498      	add	r8, r3
 800170c:	e667      	b.n	80013de <__aeabi_ddiv+0x26e>
 800170e:	075d      	lsls	r5, r3, #29
 8001710:	025b      	lsls	r3, r3, #9
 8001712:	0b1c      	lsrs	r4, r3, #12
 8001714:	08d2      	lsrs	r2, r2, #3
 8001716:	2300      	movs	r3, #0
 8001718:	4315      	orrs	r5, r2
 800171a:	e580      	b.n	800121e <__aeabi_ddiv+0xae>
 800171c:	9800      	ldr	r0, [sp, #0]
 800171e:	3d02      	subs	r5, #2
 8001720:	0042      	lsls	r2, r0, #1
 8001722:	4282      	cmp	r2, r0
 8001724:	41bf      	sbcs	r7, r7
 8001726:	427f      	negs	r7, r7
 8001728:	193c      	adds	r4, r7, r4
 800172a:	1936      	adds	r6, r6, r4
 800172c:	9200      	str	r2, [sp, #0]
 800172e:	e7dd      	b.n	80016ec <__aeabi_ddiv+0x57c>
 8001730:	2480      	movs	r4, #128	; 0x80
 8001732:	4643      	mov	r3, r8
 8001734:	0324      	lsls	r4, r4, #12
 8001736:	431c      	orrs	r4, r3
 8001738:	0324      	lsls	r4, r4, #12
 800173a:	4b04      	ldr	r3, [pc, #16]	; (800174c <__aeabi_ddiv+0x5dc>)
 800173c:	0b24      	lsrs	r4, r4, #12
 800173e:	e56e      	b.n	800121e <__aeabi_ddiv+0xae>
 8001740:	9a00      	ldr	r2, [sp, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	d3ea      	bcc.n	800171c <__aeabi_ddiv+0x5ac>
 8001746:	0005      	movs	r5, r0
 8001748:	e7d3      	b.n	80016f2 <__aeabi_ddiv+0x582>
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	000007ff 	.word	0x000007ff
 8001750:	0000043e 	.word	0x0000043e
 8001754:	0000041e 	.word	0x0000041e
 8001758:	000003ff 	.word	0x000003ff

0800175c <__eqdf2>:
 800175c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800175e:	464e      	mov	r6, r9
 8001760:	4645      	mov	r5, r8
 8001762:	46de      	mov	lr, fp
 8001764:	4657      	mov	r7, sl
 8001766:	4690      	mov	r8, r2
 8001768:	b5e0      	push	{r5, r6, r7, lr}
 800176a:	0017      	movs	r7, r2
 800176c:	031a      	lsls	r2, r3, #12
 800176e:	0b12      	lsrs	r2, r2, #12
 8001770:	0005      	movs	r5, r0
 8001772:	4684      	mov	ip, r0
 8001774:	4819      	ldr	r0, [pc, #100]	; (80017dc <__eqdf2+0x80>)
 8001776:	030e      	lsls	r6, r1, #12
 8001778:	004c      	lsls	r4, r1, #1
 800177a:	4691      	mov	r9, r2
 800177c:	005a      	lsls	r2, r3, #1
 800177e:	0fdb      	lsrs	r3, r3, #31
 8001780:	469b      	mov	fp, r3
 8001782:	0b36      	lsrs	r6, r6, #12
 8001784:	0d64      	lsrs	r4, r4, #21
 8001786:	0fc9      	lsrs	r1, r1, #31
 8001788:	0d52      	lsrs	r2, r2, #21
 800178a:	4284      	cmp	r4, r0
 800178c:	d019      	beq.n	80017c2 <__eqdf2+0x66>
 800178e:	4282      	cmp	r2, r0
 8001790:	d010      	beq.n	80017b4 <__eqdf2+0x58>
 8001792:	2001      	movs	r0, #1
 8001794:	4294      	cmp	r4, r2
 8001796:	d10e      	bne.n	80017b6 <__eqdf2+0x5a>
 8001798:	454e      	cmp	r6, r9
 800179a:	d10c      	bne.n	80017b6 <__eqdf2+0x5a>
 800179c:	2001      	movs	r0, #1
 800179e:	45c4      	cmp	ip, r8
 80017a0:	d109      	bne.n	80017b6 <__eqdf2+0x5a>
 80017a2:	4559      	cmp	r1, fp
 80017a4:	d017      	beq.n	80017d6 <__eqdf2+0x7a>
 80017a6:	2c00      	cmp	r4, #0
 80017a8:	d105      	bne.n	80017b6 <__eqdf2+0x5a>
 80017aa:	0030      	movs	r0, r6
 80017ac:	4328      	orrs	r0, r5
 80017ae:	1e43      	subs	r3, r0, #1
 80017b0:	4198      	sbcs	r0, r3
 80017b2:	e000      	b.n	80017b6 <__eqdf2+0x5a>
 80017b4:	2001      	movs	r0, #1
 80017b6:	bcf0      	pop	{r4, r5, r6, r7}
 80017b8:	46bb      	mov	fp, r7
 80017ba:	46b2      	mov	sl, r6
 80017bc:	46a9      	mov	r9, r5
 80017be:	46a0      	mov	r8, r4
 80017c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017c2:	0033      	movs	r3, r6
 80017c4:	2001      	movs	r0, #1
 80017c6:	432b      	orrs	r3, r5
 80017c8:	d1f5      	bne.n	80017b6 <__eqdf2+0x5a>
 80017ca:	42a2      	cmp	r2, r4
 80017cc:	d1f3      	bne.n	80017b6 <__eqdf2+0x5a>
 80017ce:	464b      	mov	r3, r9
 80017d0:	433b      	orrs	r3, r7
 80017d2:	d1f0      	bne.n	80017b6 <__eqdf2+0x5a>
 80017d4:	e7e2      	b.n	800179c <__eqdf2+0x40>
 80017d6:	2000      	movs	r0, #0
 80017d8:	e7ed      	b.n	80017b6 <__eqdf2+0x5a>
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	000007ff 	.word	0x000007ff

080017e0 <__gedf2>:
 80017e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017e2:	4647      	mov	r7, r8
 80017e4:	46ce      	mov	lr, r9
 80017e6:	0004      	movs	r4, r0
 80017e8:	0018      	movs	r0, r3
 80017ea:	0016      	movs	r6, r2
 80017ec:	031b      	lsls	r3, r3, #12
 80017ee:	0b1b      	lsrs	r3, r3, #12
 80017f0:	4d2d      	ldr	r5, [pc, #180]	; (80018a8 <__gedf2+0xc8>)
 80017f2:	004a      	lsls	r2, r1, #1
 80017f4:	4699      	mov	r9, r3
 80017f6:	b580      	push	{r7, lr}
 80017f8:	0043      	lsls	r3, r0, #1
 80017fa:	030f      	lsls	r7, r1, #12
 80017fc:	46a4      	mov	ip, r4
 80017fe:	46b0      	mov	r8, r6
 8001800:	0b3f      	lsrs	r7, r7, #12
 8001802:	0d52      	lsrs	r2, r2, #21
 8001804:	0fc9      	lsrs	r1, r1, #31
 8001806:	0d5b      	lsrs	r3, r3, #21
 8001808:	0fc0      	lsrs	r0, r0, #31
 800180a:	42aa      	cmp	r2, r5
 800180c:	d021      	beq.n	8001852 <__gedf2+0x72>
 800180e:	42ab      	cmp	r3, r5
 8001810:	d013      	beq.n	800183a <__gedf2+0x5a>
 8001812:	2a00      	cmp	r2, #0
 8001814:	d122      	bne.n	800185c <__gedf2+0x7c>
 8001816:	433c      	orrs	r4, r7
 8001818:	2b00      	cmp	r3, #0
 800181a:	d102      	bne.n	8001822 <__gedf2+0x42>
 800181c:	464d      	mov	r5, r9
 800181e:	432e      	orrs	r6, r5
 8001820:	d022      	beq.n	8001868 <__gedf2+0x88>
 8001822:	2c00      	cmp	r4, #0
 8001824:	d010      	beq.n	8001848 <__gedf2+0x68>
 8001826:	4281      	cmp	r1, r0
 8001828:	d022      	beq.n	8001870 <__gedf2+0x90>
 800182a:	2002      	movs	r0, #2
 800182c:	3901      	subs	r1, #1
 800182e:	4008      	ands	r0, r1
 8001830:	3801      	subs	r0, #1
 8001832:	bcc0      	pop	{r6, r7}
 8001834:	46b9      	mov	r9, r7
 8001836:	46b0      	mov	r8, r6
 8001838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800183a:	464d      	mov	r5, r9
 800183c:	432e      	orrs	r6, r5
 800183e:	d129      	bne.n	8001894 <__gedf2+0xb4>
 8001840:	2a00      	cmp	r2, #0
 8001842:	d1f0      	bne.n	8001826 <__gedf2+0x46>
 8001844:	433c      	orrs	r4, r7
 8001846:	d1ee      	bne.n	8001826 <__gedf2+0x46>
 8001848:	2800      	cmp	r0, #0
 800184a:	d1f2      	bne.n	8001832 <__gedf2+0x52>
 800184c:	2001      	movs	r0, #1
 800184e:	4240      	negs	r0, r0
 8001850:	e7ef      	b.n	8001832 <__gedf2+0x52>
 8001852:	003d      	movs	r5, r7
 8001854:	4325      	orrs	r5, r4
 8001856:	d11d      	bne.n	8001894 <__gedf2+0xb4>
 8001858:	4293      	cmp	r3, r2
 800185a:	d0ee      	beq.n	800183a <__gedf2+0x5a>
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1e2      	bne.n	8001826 <__gedf2+0x46>
 8001860:	464c      	mov	r4, r9
 8001862:	4326      	orrs	r6, r4
 8001864:	d1df      	bne.n	8001826 <__gedf2+0x46>
 8001866:	e7e0      	b.n	800182a <__gedf2+0x4a>
 8001868:	2000      	movs	r0, #0
 800186a:	2c00      	cmp	r4, #0
 800186c:	d0e1      	beq.n	8001832 <__gedf2+0x52>
 800186e:	e7dc      	b.n	800182a <__gedf2+0x4a>
 8001870:	429a      	cmp	r2, r3
 8001872:	dc0a      	bgt.n	800188a <__gedf2+0xaa>
 8001874:	dbe8      	blt.n	8001848 <__gedf2+0x68>
 8001876:	454f      	cmp	r7, r9
 8001878:	d8d7      	bhi.n	800182a <__gedf2+0x4a>
 800187a:	d00e      	beq.n	800189a <__gedf2+0xba>
 800187c:	2000      	movs	r0, #0
 800187e:	454f      	cmp	r7, r9
 8001880:	d2d7      	bcs.n	8001832 <__gedf2+0x52>
 8001882:	2900      	cmp	r1, #0
 8001884:	d0e2      	beq.n	800184c <__gedf2+0x6c>
 8001886:	0008      	movs	r0, r1
 8001888:	e7d3      	b.n	8001832 <__gedf2+0x52>
 800188a:	4243      	negs	r3, r0
 800188c:	4158      	adcs	r0, r3
 800188e:	0040      	lsls	r0, r0, #1
 8001890:	3801      	subs	r0, #1
 8001892:	e7ce      	b.n	8001832 <__gedf2+0x52>
 8001894:	2002      	movs	r0, #2
 8001896:	4240      	negs	r0, r0
 8001898:	e7cb      	b.n	8001832 <__gedf2+0x52>
 800189a:	45c4      	cmp	ip, r8
 800189c:	d8c5      	bhi.n	800182a <__gedf2+0x4a>
 800189e:	2000      	movs	r0, #0
 80018a0:	45c4      	cmp	ip, r8
 80018a2:	d2c6      	bcs.n	8001832 <__gedf2+0x52>
 80018a4:	e7ed      	b.n	8001882 <__gedf2+0xa2>
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	000007ff 	.word	0x000007ff

080018ac <__ledf2>:
 80018ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ae:	4647      	mov	r7, r8
 80018b0:	46ce      	mov	lr, r9
 80018b2:	0004      	movs	r4, r0
 80018b4:	0018      	movs	r0, r3
 80018b6:	0016      	movs	r6, r2
 80018b8:	031b      	lsls	r3, r3, #12
 80018ba:	0b1b      	lsrs	r3, r3, #12
 80018bc:	4d2c      	ldr	r5, [pc, #176]	; (8001970 <__ledf2+0xc4>)
 80018be:	004a      	lsls	r2, r1, #1
 80018c0:	4699      	mov	r9, r3
 80018c2:	b580      	push	{r7, lr}
 80018c4:	0043      	lsls	r3, r0, #1
 80018c6:	030f      	lsls	r7, r1, #12
 80018c8:	46a4      	mov	ip, r4
 80018ca:	46b0      	mov	r8, r6
 80018cc:	0b3f      	lsrs	r7, r7, #12
 80018ce:	0d52      	lsrs	r2, r2, #21
 80018d0:	0fc9      	lsrs	r1, r1, #31
 80018d2:	0d5b      	lsrs	r3, r3, #21
 80018d4:	0fc0      	lsrs	r0, r0, #31
 80018d6:	42aa      	cmp	r2, r5
 80018d8:	d00d      	beq.n	80018f6 <__ledf2+0x4a>
 80018da:	42ab      	cmp	r3, r5
 80018dc:	d010      	beq.n	8001900 <__ledf2+0x54>
 80018de:	2a00      	cmp	r2, #0
 80018e0:	d127      	bne.n	8001932 <__ledf2+0x86>
 80018e2:	433c      	orrs	r4, r7
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d111      	bne.n	800190c <__ledf2+0x60>
 80018e8:	464d      	mov	r5, r9
 80018ea:	432e      	orrs	r6, r5
 80018ec:	d10e      	bne.n	800190c <__ledf2+0x60>
 80018ee:	2000      	movs	r0, #0
 80018f0:	2c00      	cmp	r4, #0
 80018f2:	d015      	beq.n	8001920 <__ledf2+0x74>
 80018f4:	e00e      	b.n	8001914 <__ledf2+0x68>
 80018f6:	003d      	movs	r5, r7
 80018f8:	4325      	orrs	r5, r4
 80018fa:	d110      	bne.n	800191e <__ledf2+0x72>
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d118      	bne.n	8001932 <__ledf2+0x86>
 8001900:	464d      	mov	r5, r9
 8001902:	432e      	orrs	r6, r5
 8001904:	d10b      	bne.n	800191e <__ledf2+0x72>
 8001906:	2a00      	cmp	r2, #0
 8001908:	d102      	bne.n	8001910 <__ledf2+0x64>
 800190a:	433c      	orrs	r4, r7
 800190c:	2c00      	cmp	r4, #0
 800190e:	d00b      	beq.n	8001928 <__ledf2+0x7c>
 8001910:	4281      	cmp	r1, r0
 8001912:	d014      	beq.n	800193e <__ledf2+0x92>
 8001914:	2002      	movs	r0, #2
 8001916:	3901      	subs	r1, #1
 8001918:	4008      	ands	r0, r1
 800191a:	3801      	subs	r0, #1
 800191c:	e000      	b.n	8001920 <__ledf2+0x74>
 800191e:	2002      	movs	r0, #2
 8001920:	bcc0      	pop	{r6, r7}
 8001922:	46b9      	mov	r9, r7
 8001924:	46b0      	mov	r8, r6
 8001926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001928:	2800      	cmp	r0, #0
 800192a:	d1f9      	bne.n	8001920 <__ledf2+0x74>
 800192c:	2001      	movs	r0, #1
 800192e:	4240      	negs	r0, r0
 8001930:	e7f6      	b.n	8001920 <__ledf2+0x74>
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1ec      	bne.n	8001910 <__ledf2+0x64>
 8001936:	464c      	mov	r4, r9
 8001938:	4326      	orrs	r6, r4
 800193a:	d1e9      	bne.n	8001910 <__ledf2+0x64>
 800193c:	e7ea      	b.n	8001914 <__ledf2+0x68>
 800193e:	429a      	cmp	r2, r3
 8001940:	dd04      	ble.n	800194c <__ledf2+0xa0>
 8001942:	4243      	negs	r3, r0
 8001944:	4158      	adcs	r0, r3
 8001946:	0040      	lsls	r0, r0, #1
 8001948:	3801      	subs	r0, #1
 800194a:	e7e9      	b.n	8001920 <__ledf2+0x74>
 800194c:	429a      	cmp	r2, r3
 800194e:	dbeb      	blt.n	8001928 <__ledf2+0x7c>
 8001950:	454f      	cmp	r7, r9
 8001952:	d8df      	bhi.n	8001914 <__ledf2+0x68>
 8001954:	d006      	beq.n	8001964 <__ledf2+0xb8>
 8001956:	2000      	movs	r0, #0
 8001958:	454f      	cmp	r7, r9
 800195a:	d2e1      	bcs.n	8001920 <__ledf2+0x74>
 800195c:	2900      	cmp	r1, #0
 800195e:	d0e5      	beq.n	800192c <__ledf2+0x80>
 8001960:	0008      	movs	r0, r1
 8001962:	e7dd      	b.n	8001920 <__ledf2+0x74>
 8001964:	45c4      	cmp	ip, r8
 8001966:	d8d5      	bhi.n	8001914 <__ledf2+0x68>
 8001968:	2000      	movs	r0, #0
 800196a:	45c4      	cmp	ip, r8
 800196c:	d2d8      	bcs.n	8001920 <__ledf2+0x74>
 800196e:	e7f5      	b.n	800195c <__ledf2+0xb0>
 8001970:	000007ff 	.word	0x000007ff

08001974 <__aeabi_dmul>:
 8001974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001976:	4657      	mov	r7, sl
 8001978:	464e      	mov	r6, r9
 800197a:	4645      	mov	r5, r8
 800197c:	46de      	mov	lr, fp
 800197e:	b5e0      	push	{r5, r6, r7, lr}
 8001980:	4698      	mov	r8, r3
 8001982:	030c      	lsls	r4, r1, #12
 8001984:	004b      	lsls	r3, r1, #1
 8001986:	0006      	movs	r6, r0
 8001988:	4692      	mov	sl, r2
 800198a:	b087      	sub	sp, #28
 800198c:	0b24      	lsrs	r4, r4, #12
 800198e:	0d5b      	lsrs	r3, r3, #21
 8001990:	0fcf      	lsrs	r7, r1, #31
 8001992:	2b00      	cmp	r3, #0
 8001994:	d100      	bne.n	8001998 <__aeabi_dmul+0x24>
 8001996:	e15c      	b.n	8001c52 <__aeabi_dmul+0x2de>
 8001998:	4ad9      	ldr	r2, [pc, #868]	; (8001d00 <__aeabi_dmul+0x38c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d100      	bne.n	80019a0 <__aeabi_dmul+0x2c>
 800199e:	e175      	b.n	8001c8c <__aeabi_dmul+0x318>
 80019a0:	0f42      	lsrs	r2, r0, #29
 80019a2:	00e4      	lsls	r4, r4, #3
 80019a4:	4314      	orrs	r4, r2
 80019a6:	2280      	movs	r2, #128	; 0x80
 80019a8:	0412      	lsls	r2, r2, #16
 80019aa:	4314      	orrs	r4, r2
 80019ac:	4ad5      	ldr	r2, [pc, #852]	; (8001d04 <__aeabi_dmul+0x390>)
 80019ae:	00c5      	lsls	r5, r0, #3
 80019b0:	4694      	mov	ip, r2
 80019b2:	4463      	add	r3, ip
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	2300      	movs	r3, #0
 80019b8:	4699      	mov	r9, r3
 80019ba:	469b      	mov	fp, r3
 80019bc:	4643      	mov	r3, r8
 80019be:	4642      	mov	r2, r8
 80019c0:	031e      	lsls	r6, r3, #12
 80019c2:	0fd2      	lsrs	r2, r2, #31
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	4650      	mov	r0, sl
 80019c8:	4690      	mov	r8, r2
 80019ca:	0b36      	lsrs	r6, r6, #12
 80019cc:	0d5b      	lsrs	r3, r3, #21
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dmul+0x5e>
 80019d0:	e120      	b.n	8001c14 <__aeabi_dmul+0x2a0>
 80019d2:	4acb      	ldr	r2, [pc, #812]	; (8001d00 <__aeabi_dmul+0x38c>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d100      	bne.n	80019da <__aeabi_dmul+0x66>
 80019d8:	e162      	b.n	8001ca0 <__aeabi_dmul+0x32c>
 80019da:	49ca      	ldr	r1, [pc, #808]	; (8001d04 <__aeabi_dmul+0x390>)
 80019dc:	0f42      	lsrs	r2, r0, #29
 80019de:	468c      	mov	ip, r1
 80019e0:	9900      	ldr	r1, [sp, #0]
 80019e2:	4463      	add	r3, ip
 80019e4:	00f6      	lsls	r6, r6, #3
 80019e6:	468c      	mov	ip, r1
 80019e8:	4316      	orrs	r6, r2
 80019ea:	2280      	movs	r2, #128	; 0x80
 80019ec:	449c      	add	ip, r3
 80019ee:	0412      	lsls	r2, r2, #16
 80019f0:	4663      	mov	r3, ip
 80019f2:	4316      	orrs	r6, r2
 80019f4:	00c2      	lsls	r2, r0, #3
 80019f6:	2000      	movs	r0, #0
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	9900      	ldr	r1, [sp, #0]
 80019fc:	4643      	mov	r3, r8
 80019fe:	3101      	adds	r1, #1
 8001a00:	468c      	mov	ip, r1
 8001a02:	4649      	mov	r1, r9
 8001a04:	407b      	eors	r3, r7
 8001a06:	9301      	str	r3, [sp, #4]
 8001a08:	290f      	cmp	r1, #15
 8001a0a:	d826      	bhi.n	8001a5a <__aeabi_dmul+0xe6>
 8001a0c:	4bbe      	ldr	r3, [pc, #760]	; (8001d08 <__aeabi_dmul+0x394>)
 8001a0e:	0089      	lsls	r1, r1, #2
 8001a10:	5859      	ldr	r1, [r3, r1]
 8001a12:	468f      	mov	pc, r1
 8001a14:	4643      	mov	r3, r8
 8001a16:	9301      	str	r3, [sp, #4]
 8001a18:	0034      	movs	r4, r6
 8001a1a:	0015      	movs	r5, r2
 8001a1c:	4683      	mov	fp, r0
 8001a1e:	465b      	mov	r3, fp
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d016      	beq.n	8001a52 <__aeabi_dmul+0xde>
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	d100      	bne.n	8001a2a <__aeabi_dmul+0xb6>
 8001a28:	e203      	b.n	8001e32 <__aeabi_dmul+0x4be>
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d000      	beq.n	8001a30 <__aeabi_dmul+0xbc>
 8001a2e:	e0cd      	b.n	8001bcc <__aeabi_dmul+0x258>
 8001a30:	2200      	movs	r2, #0
 8001a32:	2400      	movs	r4, #0
 8001a34:	2500      	movs	r5, #0
 8001a36:	9b01      	ldr	r3, [sp, #4]
 8001a38:	0512      	lsls	r2, r2, #20
 8001a3a:	4322      	orrs	r2, r4
 8001a3c:	07db      	lsls	r3, r3, #31
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	0028      	movs	r0, r5
 8001a42:	0011      	movs	r1, r2
 8001a44:	b007      	add	sp, #28
 8001a46:	bcf0      	pop	{r4, r5, r6, r7}
 8001a48:	46bb      	mov	fp, r7
 8001a4a:	46b2      	mov	sl, r6
 8001a4c:	46a9      	mov	r9, r5
 8001a4e:	46a0      	mov	r8, r4
 8001a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a52:	2400      	movs	r4, #0
 8001a54:	2500      	movs	r5, #0
 8001a56:	4aaa      	ldr	r2, [pc, #680]	; (8001d00 <__aeabi_dmul+0x38c>)
 8001a58:	e7ed      	b.n	8001a36 <__aeabi_dmul+0xc2>
 8001a5a:	0c28      	lsrs	r0, r5, #16
 8001a5c:	042d      	lsls	r5, r5, #16
 8001a5e:	0c2d      	lsrs	r5, r5, #16
 8001a60:	002b      	movs	r3, r5
 8001a62:	0c11      	lsrs	r1, r2, #16
 8001a64:	0412      	lsls	r2, r2, #16
 8001a66:	0c12      	lsrs	r2, r2, #16
 8001a68:	4353      	muls	r3, r2
 8001a6a:	4698      	mov	r8, r3
 8001a6c:	0013      	movs	r3, r2
 8001a6e:	002f      	movs	r7, r5
 8001a70:	4343      	muls	r3, r0
 8001a72:	4699      	mov	r9, r3
 8001a74:	434f      	muls	r7, r1
 8001a76:	444f      	add	r7, r9
 8001a78:	46bb      	mov	fp, r7
 8001a7a:	4647      	mov	r7, r8
 8001a7c:	000b      	movs	r3, r1
 8001a7e:	0c3f      	lsrs	r7, r7, #16
 8001a80:	46ba      	mov	sl, r7
 8001a82:	4343      	muls	r3, r0
 8001a84:	44da      	add	sl, fp
 8001a86:	9302      	str	r3, [sp, #8]
 8001a88:	45d1      	cmp	r9, sl
 8001a8a:	d904      	bls.n	8001a96 <__aeabi_dmul+0x122>
 8001a8c:	2780      	movs	r7, #128	; 0x80
 8001a8e:	027f      	lsls	r7, r7, #9
 8001a90:	46b9      	mov	r9, r7
 8001a92:	444b      	add	r3, r9
 8001a94:	9302      	str	r3, [sp, #8]
 8001a96:	4653      	mov	r3, sl
 8001a98:	0c1b      	lsrs	r3, r3, #16
 8001a9a:	469b      	mov	fp, r3
 8001a9c:	4653      	mov	r3, sl
 8001a9e:	041f      	lsls	r7, r3, #16
 8001aa0:	4643      	mov	r3, r8
 8001aa2:	041b      	lsls	r3, r3, #16
 8001aa4:	0c1b      	lsrs	r3, r3, #16
 8001aa6:	4698      	mov	r8, r3
 8001aa8:	003b      	movs	r3, r7
 8001aaa:	4443      	add	r3, r8
 8001aac:	9304      	str	r3, [sp, #16]
 8001aae:	0c33      	lsrs	r3, r6, #16
 8001ab0:	0436      	lsls	r6, r6, #16
 8001ab2:	0c36      	lsrs	r6, r6, #16
 8001ab4:	4698      	mov	r8, r3
 8001ab6:	0033      	movs	r3, r6
 8001ab8:	4343      	muls	r3, r0
 8001aba:	4699      	mov	r9, r3
 8001abc:	4643      	mov	r3, r8
 8001abe:	4343      	muls	r3, r0
 8001ac0:	002f      	movs	r7, r5
 8001ac2:	469a      	mov	sl, r3
 8001ac4:	4643      	mov	r3, r8
 8001ac6:	4377      	muls	r7, r6
 8001ac8:	435d      	muls	r5, r3
 8001aca:	0c38      	lsrs	r0, r7, #16
 8001acc:	444d      	add	r5, r9
 8001ace:	1945      	adds	r5, r0, r5
 8001ad0:	45a9      	cmp	r9, r5
 8001ad2:	d903      	bls.n	8001adc <__aeabi_dmul+0x168>
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	025b      	lsls	r3, r3, #9
 8001ad8:	4699      	mov	r9, r3
 8001ada:	44ca      	add	sl, r9
 8001adc:	043f      	lsls	r7, r7, #16
 8001ade:	0c28      	lsrs	r0, r5, #16
 8001ae0:	0c3f      	lsrs	r7, r7, #16
 8001ae2:	042d      	lsls	r5, r5, #16
 8001ae4:	19ed      	adds	r5, r5, r7
 8001ae6:	0c27      	lsrs	r7, r4, #16
 8001ae8:	0424      	lsls	r4, r4, #16
 8001aea:	0c24      	lsrs	r4, r4, #16
 8001aec:	0003      	movs	r3, r0
 8001aee:	0020      	movs	r0, r4
 8001af0:	4350      	muls	r0, r2
 8001af2:	437a      	muls	r2, r7
 8001af4:	4691      	mov	r9, r2
 8001af6:	003a      	movs	r2, r7
 8001af8:	4453      	add	r3, sl
 8001afa:	9305      	str	r3, [sp, #20]
 8001afc:	0c03      	lsrs	r3, r0, #16
 8001afe:	469a      	mov	sl, r3
 8001b00:	434a      	muls	r2, r1
 8001b02:	4361      	muls	r1, r4
 8001b04:	4449      	add	r1, r9
 8001b06:	4451      	add	r1, sl
 8001b08:	44ab      	add	fp, r5
 8001b0a:	4589      	cmp	r9, r1
 8001b0c:	d903      	bls.n	8001b16 <__aeabi_dmul+0x1a2>
 8001b0e:	2380      	movs	r3, #128	; 0x80
 8001b10:	025b      	lsls	r3, r3, #9
 8001b12:	4699      	mov	r9, r3
 8001b14:	444a      	add	r2, r9
 8001b16:	0400      	lsls	r0, r0, #16
 8001b18:	0c0b      	lsrs	r3, r1, #16
 8001b1a:	0c00      	lsrs	r0, r0, #16
 8001b1c:	0409      	lsls	r1, r1, #16
 8001b1e:	1809      	adds	r1, r1, r0
 8001b20:	0020      	movs	r0, r4
 8001b22:	4699      	mov	r9, r3
 8001b24:	4643      	mov	r3, r8
 8001b26:	4370      	muls	r0, r6
 8001b28:	435c      	muls	r4, r3
 8001b2a:	437e      	muls	r6, r7
 8001b2c:	435f      	muls	r7, r3
 8001b2e:	0c03      	lsrs	r3, r0, #16
 8001b30:	4698      	mov	r8, r3
 8001b32:	19a4      	adds	r4, r4, r6
 8001b34:	4444      	add	r4, r8
 8001b36:	444a      	add	r2, r9
 8001b38:	9703      	str	r7, [sp, #12]
 8001b3a:	42a6      	cmp	r6, r4
 8001b3c:	d904      	bls.n	8001b48 <__aeabi_dmul+0x1d4>
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	025b      	lsls	r3, r3, #9
 8001b42:	4698      	mov	r8, r3
 8001b44:	4447      	add	r7, r8
 8001b46:	9703      	str	r7, [sp, #12]
 8001b48:	0423      	lsls	r3, r4, #16
 8001b4a:	9e02      	ldr	r6, [sp, #8]
 8001b4c:	469a      	mov	sl, r3
 8001b4e:	9b05      	ldr	r3, [sp, #20]
 8001b50:	445e      	add	r6, fp
 8001b52:	4698      	mov	r8, r3
 8001b54:	42ae      	cmp	r6, r5
 8001b56:	41ad      	sbcs	r5, r5
 8001b58:	1876      	adds	r6, r6, r1
 8001b5a:	428e      	cmp	r6, r1
 8001b5c:	4189      	sbcs	r1, r1
 8001b5e:	0400      	lsls	r0, r0, #16
 8001b60:	0c00      	lsrs	r0, r0, #16
 8001b62:	4450      	add	r0, sl
 8001b64:	4440      	add	r0, r8
 8001b66:	426d      	negs	r5, r5
 8001b68:	1947      	adds	r7, r0, r5
 8001b6a:	46b8      	mov	r8, r7
 8001b6c:	4693      	mov	fp, r2
 8001b6e:	4249      	negs	r1, r1
 8001b70:	4689      	mov	r9, r1
 8001b72:	44c3      	add	fp, r8
 8001b74:	44d9      	add	r9, fp
 8001b76:	4298      	cmp	r0, r3
 8001b78:	4180      	sbcs	r0, r0
 8001b7a:	45a8      	cmp	r8, r5
 8001b7c:	41ad      	sbcs	r5, r5
 8001b7e:	4593      	cmp	fp, r2
 8001b80:	4192      	sbcs	r2, r2
 8001b82:	4589      	cmp	r9, r1
 8001b84:	4189      	sbcs	r1, r1
 8001b86:	426d      	negs	r5, r5
 8001b88:	4240      	negs	r0, r0
 8001b8a:	4328      	orrs	r0, r5
 8001b8c:	0c24      	lsrs	r4, r4, #16
 8001b8e:	4252      	negs	r2, r2
 8001b90:	4249      	negs	r1, r1
 8001b92:	430a      	orrs	r2, r1
 8001b94:	9b03      	ldr	r3, [sp, #12]
 8001b96:	1900      	adds	r0, r0, r4
 8001b98:	1880      	adds	r0, r0, r2
 8001b9a:	18c7      	adds	r7, r0, r3
 8001b9c:	464b      	mov	r3, r9
 8001b9e:	0ddc      	lsrs	r4, r3, #23
 8001ba0:	9b04      	ldr	r3, [sp, #16]
 8001ba2:	0275      	lsls	r5, r6, #9
 8001ba4:	431d      	orrs	r5, r3
 8001ba6:	1e6a      	subs	r2, r5, #1
 8001ba8:	4195      	sbcs	r5, r2
 8001baa:	464b      	mov	r3, r9
 8001bac:	0df6      	lsrs	r6, r6, #23
 8001bae:	027f      	lsls	r7, r7, #9
 8001bb0:	4335      	orrs	r5, r6
 8001bb2:	025a      	lsls	r2, r3, #9
 8001bb4:	433c      	orrs	r4, r7
 8001bb6:	4315      	orrs	r5, r2
 8001bb8:	01fb      	lsls	r3, r7, #7
 8001bba:	d400      	bmi.n	8001bbe <__aeabi_dmul+0x24a>
 8001bbc:	e11c      	b.n	8001df8 <__aeabi_dmul+0x484>
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	086a      	lsrs	r2, r5, #1
 8001bc2:	400d      	ands	r5, r1
 8001bc4:	4315      	orrs	r5, r2
 8001bc6:	07e2      	lsls	r2, r4, #31
 8001bc8:	4315      	orrs	r5, r2
 8001bca:	0864      	lsrs	r4, r4, #1
 8001bcc:	494f      	ldr	r1, [pc, #316]	; (8001d0c <__aeabi_dmul+0x398>)
 8001bce:	4461      	add	r1, ip
 8001bd0:	2900      	cmp	r1, #0
 8001bd2:	dc00      	bgt.n	8001bd6 <__aeabi_dmul+0x262>
 8001bd4:	e0b0      	b.n	8001d38 <__aeabi_dmul+0x3c4>
 8001bd6:	076b      	lsls	r3, r5, #29
 8001bd8:	d009      	beq.n	8001bee <__aeabi_dmul+0x27a>
 8001bda:	220f      	movs	r2, #15
 8001bdc:	402a      	ands	r2, r5
 8001bde:	2a04      	cmp	r2, #4
 8001be0:	d005      	beq.n	8001bee <__aeabi_dmul+0x27a>
 8001be2:	1d2a      	adds	r2, r5, #4
 8001be4:	42aa      	cmp	r2, r5
 8001be6:	41ad      	sbcs	r5, r5
 8001be8:	426d      	negs	r5, r5
 8001bea:	1964      	adds	r4, r4, r5
 8001bec:	0015      	movs	r5, r2
 8001bee:	01e3      	lsls	r3, r4, #7
 8001bf0:	d504      	bpl.n	8001bfc <__aeabi_dmul+0x288>
 8001bf2:	2180      	movs	r1, #128	; 0x80
 8001bf4:	4a46      	ldr	r2, [pc, #280]	; (8001d10 <__aeabi_dmul+0x39c>)
 8001bf6:	00c9      	lsls	r1, r1, #3
 8001bf8:	4014      	ands	r4, r2
 8001bfa:	4461      	add	r1, ip
 8001bfc:	4a45      	ldr	r2, [pc, #276]	; (8001d14 <__aeabi_dmul+0x3a0>)
 8001bfe:	4291      	cmp	r1, r2
 8001c00:	dd00      	ble.n	8001c04 <__aeabi_dmul+0x290>
 8001c02:	e726      	b.n	8001a52 <__aeabi_dmul+0xde>
 8001c04:	0762      	lsls	r2, r4, #29
 8001c06:	08ed      	lsrs	r5, r5, #3
 8001c08:	0264      	lsls	r4, r4, #9
 8001c0a:	0549      	lsls	r1, r1, #21
 8001c0c:	4315      	orrs	r5, r2
 8001c0e:	0b24      	lsrs	r4, r4, #12
 8001c10:	0d4a      	lsrs	r2, r1, #21
 8001c12:	e710      	b.n	8001a36 <__aeabi_dmul+0xc2>
 8001c14:	4652      	mov	r2, sl
 8001c16:	4332      	orrs	r2, r6
 8001c18:	d100      	bne.n	8001c1c <__aeabi_dmul+0x2a8>
 8001c1a:	e07f      	b.n	8001d1c <__aeabi_dmul+0x3a8>
 8001c1c:	2e00      	cmp	r6, #0
 8001c1e:	d100      	bne.n	8001c22 <__aeabi_dmul+0x2ae>
 8001c20:	e0dc      	b.n	8001ddc <__aeabi_dmul+0x468>
 8001c22:	0030      	movs	r0, r6
 8001c24:	f000 fe1e 	bl	8002864 <__clzsi2>
 8001c28:	0002      	movs	r2, r0
 8001c2a:	3a0b      	subs	r2, #11
 8001c2c:	231d      	movs	r3, #29
 8001c2e:	0001      	movs	r1, r0
 8001c30:	1a9b      	subs	r3, r3, r2
 8001c32:	4652      	mov	r2, sl
 8001c34:	3908      	subs	r1, #8
 8001c36:	40da      	lsrs	r2, r3
 8001c38:	408e      	lsls	r6, r1
 8001c3a:	4316      	orrs	r6, r2
 8001c3c:	4652      	mov	r2, sl
 8001c3e:	408a      	lsls	r2, r1
 8001c40:	9b00      	ldr	r3, [sp, #0]
 8001c42:	4935      	ldr	r1, [pc, #212]	; (8001d18 <__aeabi_dmul+0x3a4>)
 8001c44:	1a18      	subs	r0, r3, r0
 8001c46:	0003      	movs	r3, r0
 8001c48:	468c      	mov	ip, r1
 8001c4a:	4463      	add	r3, ip
 8001c4c:	2000      	movs	r0, #0
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	e6d3      	b.n	80019fa <__aeabi_dmul+0x86>
 8001c52:	0025      	movs	r5, r4
 8001c54:	4305      	orrs	r5, r0
 8001c56:	d04a      	beq.n	8001cee <__aeabi_dmul+0x37a>
 8001c58:	2c00      	cmp	r4, #0
 8001c5a:	d100      	bne.n	8001c5e <__aeabi_dmul+0x2ea>
 8001c5c:	e0b0      	b.n	8001dc0 <__aeabi_dmul+0x44c>
 8001c5e:	0020      	movs	r0, r4
 8001c60:	f000 fe00 	bl	8002864 <__clzsi2>
 8001c64:	0001      	movs	r1, r0
 8001c66:	0002      	movs	r2, r0
 8001c68:	390b      	subs	r1, #11
 8001c6a:	231d      	movs	r3, #29
 8001c6c:	0010      	movs	r0, r2
 8001c6e:	1a5b      	subs	r3, r3, r1
 8001c70:	0031      	movs	r1, r6
 8001c72:	0035      	movs	r5, r6
 8001c74:	3808      	subs	r0, #8
 8001c76:	4084      	lsls	r4, r0
 8001c78:	40d9      	lsrs	r1, r3
 8001c7a:	4085      	lsls	r5, r0
 8001c7c:	430c      	orrs	r4, r1
 8001c7e:	4826      	ldr	r0, [pc, #152]	; (8001d18 <__aeabi_dmul+0x3a4>)
 8001c80:	1a83      	subs	r3, r0, r2
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	2300      	movs	r3, #0
 8001c86:	4699      	mov	r9, r3
 8001c88:	469b      	mov	fp, r3
 8001c8a:	e697      	b.n	80019bc <__aeabi_dmul+0x48>
 8001c8c:	0005      	movs	r5, r0
 8001c8e:	4325      	orrs	r5, r4
 8001c90:	d126      	bne.n	8001ce0 <__aeabi_dmul+0x36c>
 8001c92:	2208      	movs	r2, #8
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	2302      	movs	r3, #2
 8001c98:	2400      	movs	r4, #0
 8001c9a:	4691      	mov	r9, r2
 8001c9c:	469b      	mov	fp, r3
 8001c9e:	e68d      	b.n	80019bc <__aeabi_dmul+0x48>
 8001ca0:	4652      	mov	r2, sl
 8001ca2:	9b00      	ldr	r3, [sp, #0]
 8001ca4:	4332      	orrs	r2, r6
 8001ca6:	d110      	bne.n	8001cca <__aeabi_dmul+0x356>
 8001ca8:	4915      	ldr	r1, [pc, #84]	; (8001d00 <__aeabi_dmul+0x38c>)
 8001caa:	2600      	movs	r6, #0
 8001cac:	468c      	mov	ip, r1
 8001cae:	4463      	add	r3, ip
 8001cb0:	4649      	mov	r1, r9
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	4319      	orrs	r1, r3
 8001cb8:	4689      	mov	r9, r1
 8001cba:	2002      	movs	r0, #2
 8001cbc:	e69d      	b.n	80019fa <__aeabi_dmul+0x86>
 8001cbe:	465b      	mov	r3, fp
 8001cc0:	9701      	str	r7, [sp, #4]
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d000      	beq.n	8001cc8 <__aeabi_dmul+0x354>
 8001cc6:	e6ad      	b.n	8001a24 <__aeabi_dmul+0xb0>
 8001cc8:	e6c3      	b.n	8001a52 <__aeabi_dmul+0xde>
 8001cca:	4a0d      	ldr	r2, [pc, #52]	; (8001d00 <__aeabi_dmul+0x38c>)
 8001ccc:	2003      	movs	r0, #3
 8001cce:	4694      	mov	ip, r2
 8001cd0:	4463      	add	r3, ip
 8001cd2:	464a      	mov	r2, r9
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	4691      	mov	r9, r2
 8001cdc:	4652      	mov	r2, sl
 8001cde:	e68c      	b.n	80019fa <__aeabi_dmul+0x86>
 8001ce0:	220c      	movs	r2, #12
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	0005      	movs	r5, r0
 8001ce8:	4691      	mov	r9, r2
 8001cea:	469b      	mov	fp, r3
 8001cec:	e666      	b.n	80019bc <__aeabi_dmul+0x48>
 8001cee:	2304      	movs	r3, #4
 8001cf0:	4699      	mov	r9, r3
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	2400      	movs	r4, #0
 8001cfa:	469b      	mov	fp, r3
 8001cfc:	e65e      	b.n	80019bc <__aeabi_dmul+0x48>
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	000007ff 	.word	0x000007ff
 8001d04:	fffffc01 	.word	0xfffffc01
 8001d08:	0800a0e4 	.word	0x0800a0e4
 8001d0c:	000003ff 	.word	0x000003ff
 8001d10:	feffffff 	.word	0xfeffffff
 8001d14:	000007fe 	.word	0x000007fe
 8001d18:	fffffc0d 	.word	0xfffffc0d
 8001d1c:	4649      	mov	r1, r9
 8001d1e:	2301      	movs	r3, #1
 8001d20:	4319      	orrs	r1, r3
 8001d22:	4689      	mov	r9, r1
 8001d24:	2600      	movs	r6, #0
 8001d26:	2001      	movs	r0, #1
 8001d28:	e667      	b.n	80019fa <__aeabi_dmul+0x86>
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	2480      	movs	r4, #128	; 0x80
 8001d2e:	2500      	movs	r5, #0
 8001d30:	4a43      	ldr	r2, [pc, #268]	; (8001e40 <__aeabi_dmul+0x4cc>)
 8001d32:	9301      	str	r3, [sp, #4]
 8001d34:	0324      	lsls	r4, r4, #12
 8001d36:	e67e      	b.n	8001a36 <__aeabi_dmul+0xc2>
 8001d38:	2001      	movs	r0, #1
 8001d3a:	1a40      	subs	r0, r0, r1
 8001d3c:	2838      	cmp	r0, #56	; 0x38
 8001d3e:	dd00      	ble.n	8001d42 <__aeabi_dmul+0x3ce>
 8001d40:	e676      	b.n	8001a30 <__aeabi_dmul+0xbc>
 8001d42:	281f      	cmp	r0, #31
 8001d44:	dd5b      	ble.n	8001dfe <__aeabi_dmul+0x48a>
 8001d46:	221f      	movs	r2, #31
 8001d48:	0023      	movs	r3, r4
 8001d4a:	4252      	negs	r2, r2
 8001d4c:	1a51      	subs	r1, r2, r1
 8001d4e:	40cb      	lsrs	r3, r1
 8001d50:	0019      	movs	r1, r3
 8001d52:	2820      	cmp	r0, #32
 8001d54:	d003      	beq.n	8001d5e <__aeabi_dmul+0x3ea>
 8001d56:	4a3b      	ldr	r2, [pc, #236]	; (8001e44 <__aeabi_dmul+0x4d0>)
 8001d58:	4462      	add	r2, ip
 8001d5a:	4094      	lsls	r4, r2
 8001d5c:	4325      	orrs	r5, r4
 8001d5e:	1e6a      	subs	r2, r5, #1
 8001d60:	4195      	sbcs	r5, r2
 8001d62:	002a      	movs	r2, r5
 8001d64:	430a      	orrs	r2, r1
 8001d66:	2107      	movs	r1, #7
 8001d68:	000d      	movs	r5, r1
 8001d6a:	2400      	movs	r4, #0
 8001d6c:	4015      	ands	r5, r2
 8001d6e:	4211      	tst	r1, r2
 8001d70:	d05b      	beq.n	8001e2a <__aeabi_dmul+0x4b6>
 8001d72:	210f      	movs	r1, #15
 8001d74:	2400      	movs	r4, #0
 8001d76:	4011      	ands	r1, r2
 8001d78:	2904      	cmp	r1, #4
 8001d7a:	d053      	beq.n	8001e24 <__aeabi_dmul+0x4b0>
 8001d7c:	1d11      	adds	r1, r2, #4
 8001d7e:	4291      	cmp	r1, r2
 8001d80:	4192      	sbcs	r2, r2
 8001d82:	4252      	negs	r2, r2
 8001d84:	18a4      	adds	r4, r4, r2
 8001d86:	000a      	movs	r2, r1
 8001d88:	0223      	lsls	r3, r4, #8
 8001d8a:	d54b      	bpl.n	8001e24 <__aeabi_dmul+0x4b0>
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	2400      	movs	r4, #0
 8001d90:	2500      	movs	r5, #0
 8001d92:	e650      	b.n	8001a36 <__aeabi_dmul+0xc2>
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	031b      	lsls	r3, r3, #12
 8001d98:	421c      	tst	r4, r3
 8001d9a:	d009      	beq.n	8001db0 <__aeabi_dmul+0x43c>
 8001d9c:	421e      	tst	r6, r3
 8001d9e:	d107      	bne.n	8001db0 <__aeabi_dmul+0x43c>
 8001da0:	4333      	orrs	r3, r6
 8001da2:	031c      	lsls	r4, r3, #12
 8001da4:	4643      	mov	r3, r8
 8001da6:	0015      	movs	r5, r2
 8001da8:	0b24      	lsrs	r4, r4, #12
 8001daa:	4a25      	ldr	r2, [pc, #148]	; (8001e40 <__aeabi_dmul+0x4cc>)
 8001dac:	9301      	str	r3, [sp, #4]
 8001dae:	e642      	b.n	8001a36 <__aeabi_dmul+0xc2>
 8001db0:	2280      	movs	r2, #128	; 0x80
 8001db2:	0312      	lsls	r2, r2, #12
 8001db4:	4314      	orrs	r4, r2
 8001db6:	0324      	lsls	r4, r4, #12
 8001db8:	4a21      	ldr	r2, [pc, #132]	; (8001e40 <__aeabi_dmul+0x4cc>)
 8001dba:	0b24      	lsrs	r4, r4, #12
 8001dbc:	9701      	str	r7, [sp, #4]
 8001dbe:	e63a      	b.n	8001a36 <__aeabi_dmul+0xc2>
 8001dc0:	f000 fd50 	bl	8002864 <__clzsi2>
 8001dc4:	0001      	movs	r1, r0
 8001dc6:	0002      	movs	r2, r0
 8001dc8:	3115      	adds	r1, #21
 8001dca:	3220      	adds	r2, #32
 8001dcc:	291c      	cmp	r1, #28
 8001dce:	dc00      	bgt.n	8001dd2 <__aeabi_dmul+0x45e>
 8001dd0:	e74b      	b.n	8001c6a <__aeabi_dmul+0x2f6>
 8001dd2:	0034      	movs	r4, r6
 8001dd4:	3808      	subs	r0, #8
 8001dd6:	2500      	movs	r5, #0
 8001dd8:	4084      	lsls	r4, r0
 8001dda:	e750      	b.n	8001c7e <__aeabi_dmul+0x30a>
 8001ddc:	f000 fd42 	bl	8002864 <__clzsi2>
 8001de0:	0003      	movs	r3, r0
 8001de2:	001a      	movs	r2, r3
 8001de4:	3215      	adds	r2, #21
 8001de6:	3020      	adds	r0, #32
 8001de8:	2a1c      	cmp	r2, #28
 8001dea:	dc00      	bgt.n	8001dee <__aeabi_dmul+0x47a>
 8001dec:	e71e      	b.n	8001c2c <__aeabi_dmul+0x2b8>
 8001dee:	4656      	mov	r6, sl
 8001df0:	3b08      	subs	r3, #8
 8001df2:	2200      	movs	r2, #0
 8001df4:	409e      	lsls	r6, r3
 8001df6:	e723      	b.n	8001c40 <__aeabi_dmul+0x2cc>
 8001df8:	9b00      	ldr	r3, [sp, #0]
 8001dfa:	469c      	mov	ip, r3
 8001dfc:	e6e6      	b.n	8001bcc <__aeabi_dmul+0x258>
 8001dfe:	4912      	ldr	r1, [pc, #72]	; (8001e48 <__aeabi_dmul+0x4d4>)
 8001e00:	0022      	movs	r2, r4
 8001e02:	4461      	add	r1, ip
 8001e04:	002e      	movs	r6, r5
 8001e06:	408d      	lsls	r5, r1
 8001e08:	408a      	lsls	r2, r1
 8001e0a:	40c6      	lsrs	r6, r0
 8001e0c:	1e69      	subs	r1, r5, #1
 8001e0e:	418d      	sbcs	r5, r1
 8001e10:	4332      	orrs	r2, r6
 8001e12:	432a      	orrs	r2, r5
 8001e14:	40c4      	lsrs	r4, r0
 8001e16:	0753      	lsls	r3, r2, #29
 8001e18:	d0b6      	beq.n	8001d88 <__aeabi_dmul+0x414>
 8001e1a:	210f      	movs	r1, #15
 8001e1c:	4011      	ands	r1, r2
 8001e1e:	2904      	cmp	r1, #4
 8001e20:	d1ac      	bne.n	8001d7c <__aeabi_dmul+0x408>
 8001e22:	e7b1      	b.n	8001d88 <__aeabi_dmul+0x414>
 8001e24:	0765      	lsls	r5, r4, #29
 8001e26:	0264      	lsls	r4, r4, #9
 8001e28:	0b24      	lsrs	r4, r4, #12
 8001e2a:	08d2      	lsrs	r2, r2, #3
 8001e2c:	4315      	orrs	r5, r2
 8001e2e:	2200      	movs	r2, #0
 8001e30:	e601      	b.n	8001a36 <__aeabi_dmul+0xc2>
 8001e32:	2280      	movs	r2, #128	; 0x80
 8001e34:	0312      	lsls	r2, r2, #12
 8001e36:	4314      	orrs	r4, r2
 8001e38:	0324      	lsls	r4, r4, #12
 8001e3a:	4a01      	ldr	r2, [pc, #4]	; (8001e40 <__aeabi_dmul+0x4cc>)
 8001e3c:	0b24      	lsrs	r4, r4, #12
 8001e3e:	e5fa      	b.n	8001a36 <__aeabi_dmul+0xc2>
 8001e40:	000007ff 	.word	0x000007ff
 8001e44:	0000043e 	.word	0x0000043e
 8001e48:	0000041e 	.word	0x0000041e

08001e4c <__aeabi_dsub>:
 8001e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e4e:	4657      	mov	r7, sl
 8001e50:	464e      	mov	r6, r9
 8001e52:	4645      	mov	r5, r8
 8001e54:	46de      	mov	lr, fp
 8001e56:	b5e0      	push	{r5, r6, r7, lr}
 8001e58:	001e      	movs	r6, r3
 8001e5a:	0017      	movs	r7, r2
 8001e5c:	004a      	lsls	r2, r1, #1
 8001e5e:	030b      	lsls	r3, r1, #12
 8001e60:	0d52      	lsrs	r2, r2, #21
 8001e62:	0a5b      	lsrs	r3, r3, #9
 8001e64:	4690      	mov	r8, r2
 8001e66:	0f42      	lsrs	r2, r0, #29
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	0fcd      	lsrs	r5, r1, #31
 8001e6c:	4ccd      	ldr	r4, [pc, #820]	; (80021a4 <__aeabi_dsub+0x358>)
 8001e6e:	0331      	lsls	r1, r6, #12
 8001e70:	00c3      	lsls	r3, r0, #3
 8001e72:	4694      	mov	ip, r2
 8001e74:	0070      	lsls	r0, r6, #1
 8001e76:	0f7a      	lsrs	r2, r7, #29
 8001e78:	0a49      	lsrs	r1, r1, #9
 8001e7a:	00ff      	lsls	r7, r7, #3
 8001e7c:	469a      	mov	sl, r3
 8001e7e:	46b9      	mov	r9, r7
 8001e80:	0d40      	lsrs	r0, r0, #21
 8001e82:	0ff6      	lsrs	r6, r6, #31
 8001e84:	4311      	orrs	r1, r2
 8001e86:	42a0      	cmp	r0, r4
 8001e88:	d100      	bne.n	8001e8c <__aeabi_dsub+0x40>
 8001e8a:	e0b1      	b.n	8001ff0 <__aeabi_dsub+0x1a4>
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	4056      	eors	r6, r2
 8001e90:	46b3      	mov	fp, r6
 8001e92:	42b5      	cmp	r5, r6
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dsub+0x4c>
 8001e96:	e088      	b.n	8001faa <__aeabi_dsub+0x15e>
 8001e98:	4642      	mov	r2, r8
 8001e9a:	1a12      	subs	r2, r2, r0
 8001e9c:	2a00      	cmp	r2, #0
 8001e9e:	dc00      	bgt.n	8001ea2 <__aeabi_dsub+0x56>
 8001ea0:	e0ae      	b.n	8002000 <__aeabi_dsub+0x1b4>
 8001ea2:	2800      	cmp	r0, #0
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_dsub+0x5c>
 8001ea6:	e0c1      	b.n	800202c <__aeabi_dsub+0x1e0>
 8001ea8:	48be      	ldr	r0, [pc, #760]	; (80021a4 <__aeabi_dsub+0x358>)
 8001eaa:	4580      	cmp	r8, r0
 8001eac:	d100      	bne.n	8001eb0 <__aeabi_dsub+0x64>
 8001eae:	e151      	b.n	8002154 <__aeabi_dsub+0x308>
 8001eb0:	2080      	movs	r0, #128	; 0x80
 8001eb2:	0400      	lsls	r0, r0, #16
 8001eb4:	4301      	orrs	r1, r0
 8001eb6:	2a38      	cmp	r2, #56	; 0x38
 8001eb8:	dd00      	ble.n	8001ebc <__aeabi_dsub+0x70>
 8001eba:	e17b      	b.n	80021b4 <__aeabi_dsub+0x368>
 8001ebc:	2a1f      	cmp	r2, #31
 8001ebe:	dd00      	ble.n	8001ec2 <__aeabi_dsub+0x76>
 8001ec0:	e1ee      	b.n	80022a0 <__aeabi_dsub+0x454>
 8001ec2:	2020      	movs	r0, #32
 8001ec4:	003e      	movs	r6, r7
 8001ec6:	1a80      	subs	r0, r0, r2
 8001ec8:	000c      	movs	r4, r1
 8001eca:	40d6      	lsrs	r6, r2
 8001ecc:	40d1      	lsrs	r1, r2
 8001ece:	4087      	lsls	r7, r0
 8001ed0:	4662      	mov	r2, ip
 8001ed2:	4084      	lsls	r4, r0
 8001ed4:	1a52      	subs	r2, r2, r1
 8001ed6:	1e78      	subs	r0, r7, #1
 8001ed8:	4187      	sbcs	r7, r0
 8001eda:	4694      	mov	ip, r2
 8001edc:	4334      	orrs	r4, r6
 8001ede:	4327      	orrs	r7, r4
 8001ee0:	1bdc      	subs	r4, r3, r7
 8001ee2:	42a3      	cmp	r3, r4
 8001ee4:	419b      	sbcs	r3, r3
 8001ee6:	4662      	mov	r2, ip
 8001ee8:	425b      	negs	r3, r3
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	4699      	mov	r9, r3
 8001eee:	464b      	mov	r3, r9
 8001ef0:	021b      	lsls	r3, r3, #8
 8001ef2:	d400      	bmi.n	8001ef6 <__aeabi_dsub+0xaa>
 8001ef4:	e118      	b.n	8002128 <__aeabi_dsub+0x2dc>
 8001ef6:	464b      	mov	r3, r9
 8001ef8:	0258      	lsls	r0, r3, #9
 8001efa:	0a43      	lsrs	r3, r0, #9
 8001efc:	4699      	mov	r9, r3
 8001efe:	464b      	mov	r3, r9
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d100      	bne.n	8001f06 <__aeabi_dsub+0xba>
 8001f04:	e137      	b.n	8002176 <__aeabi_dsub+0x32a>
 8001f06:	4648      	mov	r0, r9
 8001f08:	f000 fcac 	bl	8002864 <__clzsi2>
 8001f0c:	0001      	movs	r1, r0
 8001f0e:	3908      	subs	r1, #8
 8001f10:	2320      	movs	r3, #32
 8001f12:	0022      	movs	r2, r4
 8001f14:	4648      	mov	r0, r9
 8001f16:	1a5b      	subs	r3, r3, r1
 8001f18:	40da      	lsrs	r2, r3
 8001f1a:	4088      	lsls	r0, r1
 8001f1c:	408c      	lsls	r4, r1
 8001f1e:	4643      	mov	r3, r8
 8001f20:	4310      	orrs	r0, r2
 8001f22:	4588      	cmp	r8, r1
 8001f24:	dd00      	ble.n	8001f28 <__aeabi_dsub+0xdc>
 8001f26:	e136      	b.n	8002196 <__aeabi_dsub+0x34a>
 8001f28:	1ac9      	subs	r1, r1, r3
 8001f2a:	1c4b      	adds	r3, r1, #1
 8001f2c:	2b1f      	cmp	r3, #31
 8001f2e:	dd00      	ble.n	8001f32 <__aeabi_dsub+0xe6>
 8001f30:	e0ea      	b.n	8002108 <__aeabi_dsub+0x2bc>
 8001f32:	2220      	movs	r2, #32
 8001f34:	0026      	movs	r6, r4
 8001f36:	1ad2      	subs	r2, r2, r3
 8001f38:	0001      	movs	r1, r0
 8001f3a:	4094      	lsls	r4, r2
 8001f3c:	40de      	lsrs	r6, r3
 8001f3e:	40d8      	lsrs	r0, r3
 8001f40:	2300      	movs	r3, #0
 8001f42:	4091      	lsls	r1, r2
 8001f44:	1e62      	subs	r2, r4, #1
 8001f46:	4194      	sbcs	r4, r2
 8001f48:	4681      	mov	r9, r0
 8001f4a:	4698      	mov	r8, r3
 8001f4c:	4331      	orrs	r1, r6
 8001f4e:	430c      	orrs	r4, r1
 8001f50:	0763      	lsls	r3, r4, #29
 8001f52:	d009      	beq.n	8001f68 <__aeabi_dsub+0x11c>
 8001f54:	230f      	movs	r3, #15
 8001f56:	4023      	ands	r3, r4
 8001f58:	2b04      	cmp	r3, #4
 8001f5a:	d005      	beq.n	8001f68 <__aeabi_dsub+0x11c>
 8001f5c:	1d23      	adds	r3, r4, #4
 8001f5e:	42a3      	cmp	r3, r4
 8001f60:	41a4      	sbcs	r4, r4
 8001f62:	4264      	negs	r4, r4
 8001f64:	44a1      	add	r9, r4
 8001f66:	001c      	movs	r4, r3
 8001f68:	464b      	mov	r3, r9
 8001f6a:	021b      	lsls	r3, r3, #8
 8001f6c:	d400      	bmi.n	8001f70 <__aeabi_dsub+0x124>
 8001f6e:	e0de      	b.n	800212e <__aeabi_dsub+0x2e2>
 8001f70:	4641      	mov	r1, r8
 8001f72:	4b8c      	ldr	r3, [pc, #560]	; (80021a4 <__aeabi_dsub+0x358>)
 8001f74:	3101      	adds	r1, #1
 8001f76:	4299      	cmp	r1, r3
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x130>
 8001f7a:	e0e7      	b.n	800214c <__aeabi_dsub+0x300>
 8001f7c:	464b      	mov	r3, r9
 8001f7e:	488a      	ldr	r0, [pc, #552]	; (80021a8 <__aeabi_dsub+0x35c>)
 8001f80:	08e4      	lsrs	r4, r4, #3
 8001f82:	4003      	ands	r3, r0
 8001f84:	0018      	movs	r0, r3
 8001f86:	0549      	lsls	r1, r1, #21
 8001f88:	075b      	lsls	r3, r3, #29
 8001f8a:	0240      	lsls	r0, r0, #9
 8001f8c:	4323      	orrs	r3, r4
 8001f8e:	0d4a      	lsrs	r2, r1, #21
 8001f90:	0b04      	lsrs	r4, r0, #12
 8001f92:	0512      	lsls	r2, r2, #20
 8001f94:	07ed      	lsls	r5, r5, #31
 8001f96:	4322      	orrs	r2, r4
 8001f98:	432a      	orrs	r2, r5
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	0011      	movs	r1, r2
 8001f9e:	bcf0      	pop	{r4, r5, r6, r7}
 8001fa0:	46bb      	mov	fp, r7
 8001fa2:	46b2      	mov	sl, r6
 8001fa4:	46a9      	mov	r9, r5
 8001fa6:	46a0      	mov	r8, r4
 8001fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001faa:	4642      	mov	r2, r8
 8001fac:	1a12      	subs	r2, r2, r0
 8001fae:	2a00      	cmp	r2, #0
 8001fb0:	dd52      	ble.n	8002058 <__aeabi_dsub+0x20c>
 8001fb2:	2800      	cmp	r0, #0
 8001fb4:	d100      	bne.n	8001fb8 <__aeabi_dsub+0x16c>
 8001fb6:	e09c      	b.n	80020f2 <__aeabi_dsub+0x2a6>
 8001fb8:	45a0      	cmp	r8, r4
 8001fba:	d100      	bne.n	8001fbe <__aeabi_dsub+0x172>
 8001fbc:	e0ca      	b.n	8002154 <__aeabi_dsub+0x308>
 8001fbe:	2080      	movs	r0, #128	; 0x80
 8001fc0:	0400      	lsls	r0, r0, #16
 8001fc2:	4301      	orrs	r1, r0
 8001fc4:	2a38      	cmp	r2, #56	; 0x38
 8001fc6:	dd00      	ble.n	8001fca <__aeabi_dsub+0x17e>
 8001fc8:	e149      	b.n	800225e <__aeabi_dsub+0x412>
 8001fca:	2a1f      	cmp	r2, #31
 8001fcc:	dc00      	bgt.n	8001fd0 <__aeabi_dsub+0x184>
 8001fce:	e197      	b.n	8002300 <__aeabi_dsub+0x4b4>
 8001fd0:	0010      	movs	r0, r2
 8001fd2:	000e      	movs	r6, r1
 8001fd4:	3820      	subs	r0, #32
 8001fd6:	40c6      	lsrs	r6, r0
 8001fd8:	2a20      	cmp	r2, #32
 8001fda:	d004      	beq.n	8001fe6 <__aeabi_dsub+0x19a>
 8001fdc:	2040      	movs	r0, #64	; 0x40
 8001fde:	1a82      	subs	r2, r0, r2
 8001fe0:	4091      	lsls	r1, r2
 8001fe2:	430f      	orrs	r7, r1
 8001fe4:	46b9      	mov	r9, r7
 8001fe6:	464c      	mov	r4, r9
 8001fe8:	1e62      	subs	r2, r4, #1
 8001fea:	4194      	sbcs	r4, r2
 8001fec:	4334      	orrs	r4, r6
 8001fee:	e13a      	b.n	8002266 <__aeabi_dsub+0x41a>
 8001ff0:	000a      	movs	r2, r1
 8001ff2:	433a      	orrs	r2, r7
 8001ff4:	d028      	beq.n	8002048 <__aeabi_dsub+0x1fc>
 8001ff6:	46b3      	mov	fp, r6
 8001ff8:	42b5      	cmp	r5, r6
 8001ffa:	d02b      	beq.n	8002054 <__aeabi_dsub+0x208>
 8001ffc:	4a6b      	ldr	r2, [pc, #428]	; (80021ac <__aeabi_dsub+0x360>)
 8001ffe:	4442      	add	r2, r8
 8002000:	2a00      	cmp	r2, #0
 8002002:	d05d      	beq.n	80020c0 <__aeabi_dsub+0x274>
 8002004:	4642      	mov	r2, r8
 8002006:	4644      	mov	r4, r8
 8002008:	1a82      	subs	r2, r0, r2
 800200a:	2c00      	cmp	r4, #0
 800200c:	d000      	beq.n	8002010 <__aeabi_dsub+0x1c4>
 800200e:	e0f5      	b.n	80021fc <__aeabi_dsub+0x3b0>
 8002010:	4665      	mov	r5, ip
 8002012:	431d      	orrs	r5, r3
 8002014:	d100      	bne.n	8002018 <__aeabi_dsub+0x1cc>
 8002016:	e19c      	b.n	8002352 <__aeabi_dsub+0x506>
 8002018:	1e55      	subs	r5, r2, #1
 800201a:	2a01      	cmp	r2, #1
 800201c:	d100      	bne.n	8002020 <__aeabi_dsub+0x1d4>
 800201e:	e1fb      	b.n	8002418 <__aeabi_dsub+0x5cc>
 8002020:	4c60      	ldr	r4, [pc, #384]	; (80021a4 <__aeabi_dsub+0x358>)
 8002022:	42a2      	cmp	r2, r4
 8002024:	d100      	bne.n	8002028 <__aeabi_dsub+0x1dc>
 8002026:	e1bd      	b.n	80023a4 <__aeabi_dsub+0x558>
 8002028:	002a      	movs	r2, r5
 800202a:	e0f0      	b.n	800220e <__aeabi_dsub+0x3c2>
 800202c:	0008      	movs	r0, r1
 800202e:	4338      	orrs	r0, r7
 8002030:	d100      	bne.n	8002034 <__aeabi_dsub+0x1e8>
 8002032:	e0c3      	b.n	80021bc <__aeabi_dsub+0x370>
 8002034:	1e50      	subs	r0, r2, #1
 8002036:	2a01      	cmp	r2, #1
 8002038:	d100      	bne.n	800203c <__aeabi_dsub+0x1f0>
 800203a:	e1a8      	b.n	800238e <__aeabi_dsub+0x542>
 800203c:	4c59      	ldr	r4, [pc, #356]	; (80021a4 <__aeabi_dsub+0x358>)
 800203e:	42a2      	cmp	r2, r4
 8002040:	d100      	bne.n	8002044 <__aeabi_dsub+0x1f8>
 8002042:	e087      	b.n	8002154 <__aeabi_dsub+0x308>
 8002044:	0002      	movs	r2, r0
 8002046:	e736      	b.n	8001eb6 <__aeabi_dsub+0x6a>
 8002048:	2201      	movs	r2, #1
 800204a:	4056      	eors	r6, r2
 800204c:	46b3      	mov	fp, r6
 800204e:	42b5      	cmp	r5, r6
 8002050:	d000      	beq.n	8002054 <__aeabi_dsub+0x208>
 8002052:	e721      	b.n	8001e98 <__aeabi_dsub+0x4c>
 8002054:	4a55      	ldr	r2, [pc, #340]	; (80021ac <__aeabi_dsub+0x360>)
 8002056:	4442      	add	r2, r8
 8002058:	2a00      	cmp	r2, #0
 800205a:	d100      	bne.n	800205e <__aeabi_dsub+0x212>
 800205c:	e0b5      	b.n	80021ca <__aeabi_dsub+0x37e>
 800205e:	4642      	mov	r2, r8
 8002060:	4644      	mov	r4, r8
 8002062:	1a82      	subs	r2, r0, r2
 8002064:	2c00      	cmp	r4, #0
 8002066:	d100      	bne.n	800206a <__aeabi_dsub+0x21e>
 8002068:	e138      	b.n	80022dc <__aeabi_dsub+0x490>
 800206a:	4e4e      	ldr	r6, [pc, #312]	; (80021a4 <__aeabi_dsub+0x358>)
 800206c:	42b0      	cmp	r0, r6
 800206e:	d100      	bne.n	8002072 <__aeabi_dsub+0x226>
 8002070:	e1de      	b.n	8002430 <__aeabi_dsub+0x5e4>
 8002072:	2680      	movs	r6, #128	; 0x80
 8002074:	4664      	mov	r4, ip
 8002076:	0436      	lsls	r6, r6, #16
 8002078:	4334      	orrs	r4, r6
 800207a:	46a4      	mov	ip, r4
 800207c:	2a38      	cmp	r2, #56	; 0x38
 800207e:	dd00      	ble.n	8002082 <__aeabi_dsub+0x236>
 8002080:	e196      	b.n	80023b0 <__aeabi_dsub+0x564>
 8002082:	2a1f      	cmp	r2, #31
 8002084:	dd00      	ble.n	8002088 <__aeabi_dsub+0x23c>
 8002086:	e224      	b.n	80024d2 <__aeabi_dsub+0x686>
 8002088:	2620      	movs	r6, #32
 800208a:	1ab4      	subs	r4, r6, r2
 800208c:	46a2      	mov	sl, r4
 800208e:	4664      	mov	r4, ip
 8002090:	4656      	mov	r6, sl
 8002092:	40b4      	lsls	r4, r6
 8002094:	46a1      	mov	r9, r4
 8002096:	001c      	movs	r4, r3
 8002098:	464e      	mov	r6, r9
 800209a:	40d4      	lsrs	r4, r2
 800209c:	4326      	orrs	r6, r4
 800209e:	0034      	movs	r4, r6
 80020a0:	4656      	mov	r6, sl
 80020a2:	40b3      	lsls	r3, r6
 80020a4:	1e5e      	subs	r6, r3, #1
 80020a6:	41b3      	sbcs	r3, r6
 80020a8:	431c      	orrs	r4, r3
 80020aa:	4663      	mov	r3, ip
 80020ac:	40d3      	lsrs	r3, r2
 80020ae:	18c9      	adds	r1, r1, r3
 80020b0:	19e4      	adds	r4, r4, r7
 80020b2:	42bc      	cmp	r4, r7
 80020b4:	41bf      	sbcs	r7, r7
 80020b6:	427f      	negs	r7, r7
 80020b8:	46b9      	mov	r9, r7
 80020ba:	4680      	mov	r8, r0
 80020bc:	4489      	add	r9, r1
 80020be:	e0d8      	b.n	8002272 <__aeabi_dsub+0x426>
 80020c0:	4640      	mov	r0, r8
 80020c2:	4c3b      	ldr	r4, [pc, #236]	; (80021b0 <__aeabi_dsub+0x364>)
 80020c4:	3001      	adds	r0, #1
 80020c6:	4220      	tst	r0, r4
 80020c8:	d000      	beq.n	80020cc <__aeabi_dsub+0x280>
 80020ca:	e0b4      	b.n	8002236 <__aeabi_dsub+0x3ea>
 80020cc:	4640      	mov	r0, r8
 80020ce:	2800      	cmp	r0, #0
 80020d0:	d000      	beq.n	80020d4 <__aeabi_dsub+0x288>
 80020d2:	e144      	b.n	800235e <__aeabi_dsub+0x512>
 80020d4:	4660      	mov	r0, ip
 80020d6:	4318      	orrs	r0, r3
 80020d8:	d100      	bne.n	80020dc <__aeabi_dsub+0x290>
 80020da:	e190      	b.n	80023fe <__aeabi_dsub+0x5b2>
 80020dc:	0008      	movs	r0, r1
 80020de:	4338      	orrs	r0, r7
 80020e0:	d000      	beq.n	80020e4 <__aeabi_dsub+0x298>
 80020e2:	e1aa      	b.n	800243a <__aeabi_dsub+0x5ee>
 80020e4:	4661      	mov	r1, ip
 80020e6:	08db      	lsrs	r3, r3, #3
 80020e8:	0749      	lsls	r1, r1, #29
 80020ea:	430b      	orrs	r3, r1
 80020ec:	4661      	mov	r1, ip
 80020ee:	08cc      	lsrs	r4, r1, #3
 80020f0:	e027      	b.n	8002142 <__aeabi_dsub+0x2f6>
 80020f2:	0008      	movs	r0, r1
 80020f4:	4338      	orrs	r0, r7
 80020f6:	d061      	beq.n	80021bc <__aeabi_dsub+0x370>
 80020f8:	1e50      	subs	r0, r2, #1
 80020fa:	2a01      	cmp	r2, #1
 80020fc:	d100      	bne.n	8002100 <__aeabi_dsub+0x2b4>
 80020fe:	e139      	b.n	8002374 <__aeabi_dsub+0x528>
 8002100:	42a2      	cmp	r2, r4
 8002102:	d027      	beq.n	8002154 <__aeabi_dsub+0x308>
 8002104:	0002      	movs	r2, r0
 8002106:	e75d      	b.n	8001fc4 <__aeabi_dsub+0x178>
 8002108:	0002      	movs	r2, r0
 800210a:	391f      	subs	r1, #31
 800210c:	40ca      	lsrs	r2, r1
 800210e:	0011      	movs	r1, r2
 8002110:	2b20      	cmp	r3, #32
 8002112:	d003      	beq.n	800211c <__aeabi_dsub+0x2d0>
 8002114:	2240      	movs	r2, #64	; 0x40
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	4098      	lsls	r0, r3
 800211a:	4304      	orrs	r4, r0
 800211c:	1e63      	subs	r3, r4, #1
 800211e:	419c      	sbcs	r4, r3
 8002120:	2300      	movs	r3, #0
 8002122:	4699      	mov	r9, r3
 8002124:	4698      	mov	r8, r3
 8002126:	430c      	orrs	r4, r1
 8002128:	0763      	lsls	r3, r4, #29
 800212a:	d000      	beq.n	800212e <__aeabi_dsub+0x2e2>
 800212c:	e712      	b.n	8001f54 <__aeabi_dsub+0x108>
 800212e:	464b      	mov	r3, r9
 8002130:	464a      	mov	r2, r9
 8002132:	08e4      	lsrs	r4, r4, #3
 8002134:	075b      	lsls	r3, r3, #29
 8002136:	4323      	orrs	r3, r4
 8002138:	08d4      	lsrs	r4, r2, #3
 800213a:	4642      	mov	r2, r8
 800213c:	4919      	ldr	r1, [pc, #100]	; (80021a4 <__aeabi_dsub+0x358>)
 800213e:	428a      	cmp	r2, r1
 8002140:	d00e      	beq.n	8002160 <__aeabi_dsub+0x314>
 8002142:	0324      	lsls	r4, r4, #12
 8002144:	0552      	lsls	r2, r2, #21
 8002146:	0b24      	lsrs	r4, r4, #12
 8002148:	0d52      	lsrs	r2, r2, #21
 800214a:	e722      	b.n	8001f92 <__aeabi_dsub+0x146>
 800214c:	000a      	movs	r2, r1
 800214e:	2400      	movs	r4, #0
 8002150:	2300      	movs	r3, #0
 8002152:	e71e      	b.n	8001f92 <__aeabi_dsub+0x146>
 8002154:	08db      	lsrs	r3, r3, #3
 8002156:	4662      	mov	r2, ip
 8002158:	0752      	lsls	r2, r2, #29
 800215a:	4313      	orrs	r3, r2
 800215c:	4662      	mov	r2, ip
 800215e:	08d4      	lsrs	r4, r2, #3
 8002160:	001a      	movs	r2, r3
 8002162:	4322      	orrs	r2, r4
 8002164:	d100      	bne.n	8002168 <__aeabi_dsub+0x31c>
 8002166:	e1fc      	b.n	8002562 <__aeabi_dsub+0x716>
 8002168:	2280      	movs	r2, #128	; 0x80
 800216a:	0312      	lsls	r2, r2, #12
 800216c:	4314      	orrs	r4, r2
 800216e:	0324      	lsls	r4, r4, #12
 8002170:	4a0c      	ldr	r2, [pc, #48]	; (80021a4 <__aeabi_dsub+0x358>)
 8002172:	0b24      	lsrs	r4, r4, #12
 8002174:	e70d      	b.n	8001f92 <__aeabi_dsub+0x146>
 8002176:	0020      	movs	r0, r4
 8002178:	f000 fb74 	bl	8002864 <__clzsi2>
 800217c:	0001      	movs	r1, r0
 800217e:	3118      	adds	r1, #24
 8002180:	291f      	cmp	r1, #31
 8002182:	dc00      	bgt.n	8002186 <__aeabi_dsub+0x33a>
 8002184:	e6c4      	b.n	8001f10 <__aeabi_dsub+0xc4>
 8002186:	3808      	subs	r0, #8
 8002188:	4084      	lsls	r4, r0
 800218a:	4643      	mov	r3, r8
 800218c:	0020      	movs	r0, r4
 800218e:	2400      	movs	r4, #0
 8002190:	4588      	cmp	r8, r1
 8002192:	dc00      	bgt.n	8002196 <__aeabi_dsub+0x34a>
 8002194:	e6c8      	b.n	8001f28 <__aeabi_dsub+0xdc>
 8002196:	4a04      	ldr	r2, [pc, #16]	; (80021a8 <__aeabi_dsub+0x35c>)
 8002198:	1a5b      	subs	r3, r3, r1
 800219a:	4010      	ands	r0, r2
 800219c:	4698      	mov	r8, r3
 800219e:	4681      	mov	r9, r0
 80021a0:	e6d6      	b.n	8001f50 <__aeabi_dsub+0x104>
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	000007ff 	.word	0x000007ff
 80021a8:	ff7fffff 	.word	0xff7fffff
 80021ac:	fffff801 	.word	0xfffff801
 80021b0:	000007fe 	.word	0x000007fe
 80021b4:	430f      	orrs	r7, r1
 80021b6:	1e7a      	subs	r2, r7, #1
 80021b8:	4197      	sbcs	r7, r2
 80021ba:	e691      	b.n	8001ee0 <__aeabi_dsub+0x94>
 80021bc:	4661      	mov	r1, ip
 80021be:	08db      	lsrs	r3, r3, #3
 80021c0:	0749      	lsls	r1, r1, #29
 80021c2:	430b      	orrs	r3, r1
 80021c4:	4661      	mov	r1, ip
 80021c6:	08cc      	lsrs	r4, r1, #3
 80021c8:	e7b8      	b.n	800213c <__aeabi_dsub+0x2f0>
 80021ca:	4640      	mov	r0, r8
 80021cc:	4cd3      	ldr	r4, [pc, #844]	; (800251c <__aeabi_dsub+0x6d0>)
 80021ce:	3001      	adds	r0, #1
 80021d0:	4220      	tst	r0, r4
 80021d2:	d000      	beq.n	80021d6 <__aeabi_dsub+0x38a>
 80021d4:	e0a2      	b.n	800231c <__aeabi_dsub+0x4d0>
 80021d6:	4640      	mov	r0, r8
 80021d8:	2800      	cmp	r0, #0
 80021da:	d000      	beq.n	80021de <__aeabi_dsub+0x392>
 80021dc:	e101      	b.n	80023e2 <__aeabi_dsub+0x596>
 80021de:	4660      	mov	r0, ip
 80021e0:	4318      	orrs	r0, r3
 80021e2:	d100      	bne.n	80021e6 <__aeabi_dsub+0x39a>
 80021e4:	e15e      	b.n	80024a4 <__aeabi_dsub+0x658>
 80021e6:	0008      	movs	r0, r1
 80021e8:	4338      	orrs	r0, r7
 80021ea:	d000      	beq.n	80021ee <__aeabi_dsub+0x3a2>
 80021ec:	e15f      	b.n	80024ae <__aeabi_dsub+0x662>
 80021ee:	4661      	mov	r1, ip
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	0749      	lsls	r1, r1, #29
 80021f4:	430b      	orrs	r3, r1
 80021f6:	4661      	mov	r1, ip
 80021f8:	08cc      	lsrs	r4, r1, #3
 80021fa:	e7a2      	b.n	8002142 <__aeabi_dsub+0x2f6>
 80021fc:	4dc8      	ldr	r5, [pc, #800]	; (8002520 <__aeabi_dsub+0x6d4>)
 80021fe:	42a8      	cmp	r0, r5
 8002200:	d100      	bne.n	8002204 <__aeabi_dsub+0x3b8>
 8002202:	e0cf      	b.n	80023a4 <__aeabi_dsub+0x558>
 8002204:	2580      	movs	r5, #128	; 0x80
 8002206:	4664      	mov	r4, ip
 8002208:	042d      	lsls	r5, r5, #16
 800220a:	432c      	orrs	r4, r5
 800220c:	46a4      	mov	ip, r4
 800220e:	2a38      	cmp	r2, #56	; 0x38
 8002210:	dc56      	bgt.n	80022c0 <__aeabi_dsub+0x474>
 8002212:	2a1f      	cmp	r2, #31
 8002214:	dd00      	ble.n	8002218 <__aeabi_dsub+0x3cc>
 8002216:	e0d1      	b.n	80023bc <__aeabi_dsub+0x570>
 8002218:	2520      	movs	r5, #32
 800221a:	001e      	movs	r6, r3
 800221c:	1aad      	subs	r5, r5, r2
 800221e:	4664      	mov	r4, ip
 8002220:	40ab      	lsls	r3, r5
 8002222:	40ac      	lsls	r4, r5
 8002224:	40d6      	lsrs	r6, r2
 8002226:	1e5d      	subs	r5, r3, #1
 8002228:	41ab      	sbcs	r3, r5
 800222a:	4334      	orrs	r4, r6
 800222c:	4323      	orrs	r3, r4
 800222e:	4664      	mov	r4, ip
 8002230:	40d4      	lsrs	r4, r2
 8002232:	1b09      	subs	r1, r1, r4
 8002234:	e049      	b.n	80022ca <__aeabi_dsub+0x47e>
 8002236:	4660      	mov	r0, ip
 8002238:	1bdc      	subs	r4, r3, r7
 800223a:	1a46      	subs	r6, r0, r1
 800223c:	42a3      	cmp	r3, r4
 800223e:	4180      	sbcs	r0, r0
 8002240:	4240      	negs	r0, r0
 8002242:	4681      	mov	r9, r0
 8002244:	0030      	movs	r0, r6
 8002246:	464e      	mov	r6, r9
 8002248:	1b80      	subs	r0, r0, r6
 800224a:	4681      	mov	r9, r0
 800224c:	0200      	lsls	r0, r0, #8
 800224e:	d476      	bmi.n	800233e <__aeabi_dsub+0x4f2>
 8002250:	464b      	mov	r3, r9
 8002252:	4323      	orrs	r3, r4
 8002254:	d000      	beq.n	8002258 <__aeabi_dsub+0x40c>
 8002256:	e652      	b.n	8001efe <__aeabi_dsub+0xb2>
 8002258:	2400      	movs	r4, #0
 800225a:	2500      	movs	r5, #0
 800225c:	e771      	b.n	8002142 <__aeabi_dsub+0x2f6>
 800225e:	4339      	orrs	r1, r7
 8002260:	000c      	movs	r4, r1
 8002262:	1e62      	subs	r2, r4, #1
 8002264:	4194      	sbcs	r4, r2
 8002266:	18e4      	adds	r4, r4, r3
 8002268:	429c      	cmp	r4, r3
 800226a:	419b      	sbcs	r3, r3
 800226c:	425b      	negs	r3, r3
 800226e:	4463      	add	r3, ip
 8002270:	4699      	mov	r9, r3
 8002272:	464b      	mov	r3, r9
 8002274:	021b      	lsls	r3, r3, #8
 8002276:	d400      	bmi.n	800227a <__aeabi_dsub+0x42e>
 8002278:	e756      	b.n	8002128 <__aeabi_dsub+0x2dc>
 800227a:	2301      	movs	r3, #1
 800227c:	469c      	mov	ip, r3
 800227e:	4ba8      	ldr	r3, [pc, #672]	; (8002520 <__aeabi_dsub+0x6d4>)
 8002280:	44e0      	add	r8, ip
 8002282:	4598      	cmp	r8, r3
 8002284:	d038      	beq.n	80022f8 <__aeabi_dsub+0x4ac>
 8002286:	464b      	mov	r3, r9
 8002288:	48a6      	ldr	r0, [pc, #664]	; (8002524 <__aeabi_dsub+0x6d8>)
 800228a:	2201      	movs	r2, #1
 800228c:	4003      	ands	r3, r0
 800228e:	0018      	movs	r0, r3
 8002290:	0863      	lsrs	r3, r4, #1
 8002292:	4014      	ands	r4, r2
 8002294:	431c      	orrs	r4, r3
 8002296:	07c3      	lsls	r3, r0, #31
 8002298:	431c      	orrs	r4, r3
 800229a:	0843      	lsrs	r3, r0, #1
 800229c:	4699      	mov	r9, r3
 800229e:	e657      	b.n	8001f50 <__aeabi_dsub+0x104>
 80022a0:	0010      	movs	r0, r2
 80022a2:	000e      	movs	r6, r1
 80022a4:	3820      	subs	r0, #32
 80022a6:	40c6      	lsrs	r6, r0
 80022a8:	2a20      	cmp	r2, #32
 80022aa:	d004      	beq.n	80022b6 <__aeabi_dsub+0x46a>
 80022ac:	2040      	movs	r0, #64	; 0x40
 80022ae:	1a82      	subs	r2, r0, r2
 80022b0:	4091      	lsls	r1, r2
 80022b2:	430f      	orrs	r7, r1
 80022b4:	46b9      	mov	r9, r7
 80022b6:	464f      	mov	r7, r9
 80022b8:	1e7a      	subs	r2, r7, #1
 80022ba:	4197      	sbcs	r7, r2
 80022bc:	4337      	orrs	r7, r6
 80022be:	e60f      	b.n	8001ee0 <__aeabi_dsub+0x94>
 80022c0:	4662      	mov	r2, ip
 80022c2:	431a      	orrs	r2, r3
 80022c4:	0013      	movs	r3, r2
 80022c6:	1e5a      	subs	r2, r3, #1
 80022c8:	4193      	sbcs	r3, r2
 80022ca:	1afc      	subs	r4, r7, r3
 80022cc:	42a7      	cmp	r7, r4
 80022ce:	41bf      	sbcs	r7, r7
 80022d0:	427f      	negs	r7, r7
 80022d2:	1bcb      	subs	r3, r1, r7
 80022d4:	4699      	mov	r9, r3
 80022d6:	465d      	mov	r5, fp
 80022d8:	4680      	mov	r8, r0
 80022da:	e608      	b.n	8001eee <__aeabi_dsub+0xa2>
 80022dc:	4666      	mov	r6, ip
 80022de:	431e      	orrs	r6, r3
 80022e0:	d100      	bne.n	80022e4 <__aeabi_dsub+0x498>
 80022e2:	e0be      	b.n	8002462 <__aeabi_dsub+0x616>
 80022e4:	1e56      	subs	r6, r2, #1
 80022e6:	2a01      	cmp	r2, #1
 80022e8:	d100      	bne.n	80022ec <__aeabi_dsub+0x4a0>
 80022ea:	e109      	b.n	8002500 <__aeabi_dsub+0x6b4>
 80022ec:	4c8c      	ldr	r4, [pc, #560]	; (8002520 <__aeabi_dsub+0x6d4>)
 80022ee:	42a2      	cmp	r2, r4
 80022f0:	d100      	bne.n	80022f4 <__aeabi_dsub+0x4a8>
 80022f2:	e119      	b.n	8002528 <__aeabi_dsub+0x6dc>
 80022f4:	0032      	movs	r2, r6
 80022f6:	e6c1      	b.n	800207c <__aeabi_dsub+0x230>
 80022f8:	4642      	mov	r2, r8
 80022fa:	2400      	movs	r4, #0
 80022fc:	2300      	movs	r3, #0
 80022fe:	e648      	b.n	8001f92 <__aeabi_dsub+0x146>
 8002300:	2020      	movs	r0, #32
 8002302:	000c      	movs	r4, r1
 8002304:	1a80      	subs	r0, r0, r2
 8002306:	003e      	movs	r6, r7
 8002308:	4087      	lsls	r7, r0
 800230a:	4084      	lsls	r4, r0
 800230c:	40d6      	lsrs	r6, r2
 800230e:	1e78      	subs	r0, r7, #1
 8002310:	4187      	sbcs	r7, r0
 8002312:	40d1      	lsrs	r1, r2
 8002314:	4334      	orrs	r4, r6
 8002316:	433c      	orrs	r4, r7
 8002318:	448c      	add	ip, r1
 800231a:	e7a4      	b.n	8002266 <__aeabi_dsub+0x41a>
 800231c:	4a80      	ldr	r2, [pc, #512]	; (8002520 <__aeabi_dsub+0x6d4>)
 800231e:	4290      	cmp	r0, r2
 8002320:	d100      	bne.n	8002324 <__aeabi_dsub+0x4d8>
 8002322:	e0e9      	b.n	80024f8 <__aeabi_dsub+0x6ac>
 8002324:	19df      	adds	r7, r3, r7
 8002326:	429f      	cmp	r7, r3
 8002328:	419b      	sbcs	r3, r3
 800232a:	4461      	add	r1, ip
 800232c:	425b      	negs	r3, r3
 800232e:	18c9      	adds	r1, r1, r3
 8002330:	07cc      	lsls	r4, r1, #31
 8002332:	087f      	lsrs	r7, r7, #1
 8002334:	084b      	lsrs	r3, r1, #1
 8002336:	4699      	mov	r9, r3
 8002338:	4680      	mov	r8, r0
 800233a:	433c      	orrs	r4, r7
 800233c:	e6f4      	b.n	8002128 <__aeabi_dsub+0x2dc>
 800233e:	1afc      	subs	r4, r7, r3
 8002340:	42a7      	cmp	r7, r4
 8002342:	41bf      	sbcs	r7, r7
 8002344:	4663      	mov	r3, ip
 8002346:	427f      	negs	r7, r7
 8002348:	1ac9      	subs	r1, r1, r3
 800234a:	1bcb      	subs	r3, r1, r7
 800234c:	4699      	mov	r9, r3
 800234e:	465d      	mov	r5, fp
 8002350:	e5d5      	b.n	8001efe <__aeabi_dsub+0xb2>
 8002352:	08ff      	lsrs	r7, r7, #3
 8002354:	074b      	lsls	r3, r1, #29
 8002356:	465d      	mov	r5, fp
 8002358:	433b      	orrs	r3, r7
 800235a:	08cc      	lsrs	r4, r1, #3
 800235c:	e6ee      	b.n	800213c <__aeabi_dsub+0x2f0>
 800235e:	4662      	mov	r2, ip
 8002360:	431a      	orrs	r2, r3
 8002362:	d000      	beq.n	8002366 <__aeabi_dsub+0x51a>
 8002364:	e082      	b.n	800246c <__aeabi_dsub+0x620>
 8002366:	000b      	movs	r3, r1
 8002368:	433b      	orrs	r3, r7
 800236a:	d11b      	bne.n	80023a4 <__aeabi_dsub+0x558>
 800236c:	2480      	movs	r4, #128	; 0x80
 800236e:	2500      	movs	r5, #0
 8002370:	0324      	lsls	r4, r4, #12
 8002372:	e6f9      	b.n	8002168 <__aeabi_dsub+0x31c>
 8002374:	19dc      	adds	r4, r3, r7
 8002376:	429c      	cmp	r4, r3
 8002378:	419b      	sbcs	r3, r3
 800237a:	4461      	add	r1, ip
 800237c:	4689      	mov	r9, r1
 800237e:	425b      	negs	r3, r3
 8002380:	4499      	add	r9, r3
 8002382:	464b      	mov	r3, r9
 8002384:	021b      	lsls	r3, r3, #8
 8002386:	d444      	bmi.n	8002412 <__aeabi_dsub+0x5c6>
 8002388:	2301      	movs	r3, #1
 800238a:	4698      	mov	r8, r3
 800238c:	e6cc      	b.n	8002128 <__aeabi_dsub+0x2dc>
 800238e:	1bdc      	subs	r4, r3, r7
 8002390:	4662      	mov	r2, ip
 8002392:	42a3      	cmp	r3, r4
 8002394:	419b      	sbcs	r3, r3
 8002396:	1a51      	subs	r1, r2, r1
 8002398:	425b      	negs	r3, r3
 800239a:	1acb      	subs	r3, r1, r3
 800239c:	4699      	mov	r9, r3
 800239e:	2301      	movs	r3, #1
 80023a0:	4698      	mov	r8, r3
 80023a2:	e5a4      	b.n	8001eee <__aeabi_dsub+0xa2>
 80023a4:	08ff      	lsrs	r7, r7, #3
 80023a6:	074b      	lsls	r3, r1, #29
 80023a8:	465d      	mov	r5, fp
 80023aa:	433b      	orrs	r3, r7
 80023ac:	08cc      	lsrs	r4, r1, #3
 80023ae:	e6d7      	b.n	8002160 <__aeabi_dsub+0x314>
 80023b0:	4662      	mov	r2, ip
 80023b2:	431a      	orrs	r2, r3
 80023b4:	0014      	movs	r4, r2
 80023b6:	1e63      	subs	r3, r4, #1
 80023b8:	419c      	sbcs	r4, r3
 80023ba:	e679      	b.n	80020b0 <__aeabi_dsub+0x264>
 80023bc:	0015      	movs	r5, r2
 80023be:	4664      	mov	r4, ip
 80023c0:	3d20      	subs	r5, #32
 80023c2:	40ec      	lsrs	r4, r5
 80023c4:	46a0      	mov	r8, r4
 80023c6:	2a20      	cmp	r2, #32
 80023c8:	d005      	beq.n	80023d6 <__aeabi_dsub+0x58a>
 80023ca:	2540      	movs	r5, #64	; 0x40
 80023cc:	4664      	mov	r4, ip
 80023ce:	1aaa      	subs	r2, r5, r2
 80023d0:	4094      	lsls	r4, r2
 80023d2:	4323      	orrs	r3, r4
 80023d4:	469a      	mov	sl, r3
 80023d6:	4654      	mov	r4, sl
 80023d8:	1e63      	subs	r3, r4, #1
 80023da:	419c      	sbcs	r4, r3
 80023dc:	4643      	mov	r3, r8
 80023de:	4323      	orrs	r3, r4
 80023e0:	e773      	b.n	80022ca <__aeabi_dsub+0x47e>
 80023e2:	4662      	mov	r2, ip
 80023e4:	431a      	orrs	r2, r3
 80023e6:	d023      	beq.n	8002430 <__aeabi_dsub+0x5e4>
 80023e8:	000a      	movs	r2, r1
 80023ea:	433a      	orrs	r2, r7
 80023ec:	d000      	beq.n	80023f0 <__aeabi_dsub+0x5a4>
 80023ee:	e0a0      	b.n	8002532 <__aeabi_dsub+0x6e6>
 80023f0:	4662      	mov	r2, ip
 80023f2:	08db      	lsrs	r3, r3, #3
 80023f4:	0752      	lsls	r2, r2, #29
 80023f6:	4313      	orrs	r3, r2
 80023f8:	4662      	mov	r2, ip
 80023fa:	08d4      	lsrs	r4, r2, #3
 80023fc:	e6b0      	b.n	8002160 <__aeabi_dsub+0x314>
 80023fe:	000b      	movs	r3, r1
 8002400:	433b      	orrs	r3, r7
 8002402:	d100      	bne.n	8002406 <__aeabi_dsub+0x5ba>
 8002404:	e728      	b.n	8002258 <__aeabi_dsub+0x40c>
 8002406:	08ff      	lsrs	r7, r7, #3
 8002408:	074b      	lsls	r3, r1, #29
 800240a:	465d      	mov	r5, fp
 800240c:	433b      	orrs	r3, r7
 800240e:	08cc      	lsrs	r4, r1, #3
 8002410:	e697      	b.n	8002142 <__aeabi_dsub+0x2f6>
 8002412:	2302      	movs	r3, #2
 8002414:	4698      	mov	r8, r3
 8002416:	e736      	b.n	8002286 <__aeabi_dsub+0x43a>
 8002418:	1afc      	subs	r4, r7, r3
 800241a:	42a7      	cmp	r7, r4
 800241c:	41bf      	sbcs	r7, r7
 800241e:	4663      	mov	r3, ip
 8002420:	427f      	negs	r7, r7
 8002422:	1ac9      	subs	r1, r1, r3
 8002424:	1bcb      	subs	r3, r1, r7
 8002426:	4699      	mov	r9, r3
 8002428:	2301      	movs	r3, #1
 800242a:	465d      	mov	r5, fp
 800242c:	4698      	mov	r8, r3
 800242e:	e55e      	b.n	8001eee <__aeabi_dsub+0xa2>
 8002430:	074b      	lsls	r3, r1, #29
 8002432:	08ff      	lsrs	r7, r7, #3
 8002434:	433b      	orrs	r3, r7
 8002436:	08cc      	lsrs	r4, r1, #3
 8002438:	e692      	b.n	8002160 <__aeabi_dsub+0x314>
 800243a:	1bdc      	subs	r4, r3, r7
 800243c:	4660      	mov	r0, ip
 800243e:	42a3      	cmp	r3, r4
 8002440:	41b6      	sbcs	r6, r6
 8002442:	1a40      	subs	r0, r0, r1
 8002444:	4276      	negs	r6, r6
 8002446:	1b80      	subs	r0, r0, r6
 8002448:	4681      	mov	r9, r0
 800244a:	0200      	lsls	r0, r0, #8
 800244c:	d560      	bpl.n	8002510 <__aeabi_dsub+0x6c4>
 800244e:	1afc      	subs	r4, r7, r3
 8002450:	42a7      	cmp	r7, r4
 8002452:	41bf      	sbcs	r7, r7
 8002454:	4663      	mov	r3, ip
 8002456:	427f      	negs	r7, r7
 8002458:	1ac9      	subs	r1, r1, r3
 800245a:	1bcb      	subs	r3, r1, r7
 800245c:	4699      	mov	r9, r3
 800245e:	465d      	mov	r5, fp
 8002460:	e576      	b.n	8001f50 <__aeabi_dsub+0x104>
 8002462:	08ff      	lsrs	r7, r7, #3
 8002464:	074b      	lsls	r3, r1, #29
 8002466:	433b      	orrs	r3, r7
 8002468:	08cc      	lsrs	r4, r1, #3
 800246a:	e667      	b.n	800213c <__aeabi_dsub+0x2f0>
 800246c:	000a      	movs	r2, r1
 800246e:	08db      	lsrs	r3, r3, #3
 8002470:	433a      	orrs	r2, r7
 8002472:	d100      	bne.n	8002476 <__aeabi_dsub+0x62a>
 8002474:	e66f      	b.n	8002156 <__aeabi_dsub+0x30a>
 8002476:	4662      	mov	r2, ip
 8002478:	0752      	lsls	r2, r2, #29
 800247a:	4313      	orrs	r3, r2
 800247c:	4662      	mov	r2, ip
 800247e:	08d4      	lsrs	r4, r2, #3
 8002480:	2280      	movs	r2, #128	; 0x80
 8002482:	0312      	lsls	r2, r2, #12
 8002484:	4214      	tst	r4, r2
 8002486:	d007      	beq.n	8002498 <__aeabi_dsub+0x64c>
 8002488:	08c8      	lsrs	r0, r1, #3
 800248a:	4210      	tst	r0, r2
 800248c:	d104      	bne.n	8002498 <__aeabi_dsub+0x64c>
 800248e:	465d      	mov	r5, fp
 8002490:	0004      	movs	r4, r0
 8002492:	08fb      	lsrs	r3, r7, #3
 8002494:	0749      	lsls	r1, r1, #29
 8002496:	430b      	orrs	r3, r1
 8002498:	0f5a      	lsrs	r2, r3, #29
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	08db      	lsrs	r3, r3, #3
 800249e:	0752      	lsls	r2, r2, #29
 80024a0:	4313      	orrs	r3, r2
 80024a2:	e65d      	b.n	8002160 <__aeabi_dsub+0x314>
 80024a4:	074b      	lsls	r3, r1, #29
 80024a6:	08ff      	lsrs	r7, r7, #3
 80024a8:	433b      	orrs	r3, r7
 80024aa:	08cc      	lsrs	r4, r1, #3
 80024ac:	e649      	b.n	8002142 <__aeabi_dsub+0x2f6>
 80024ae:	19dc      	adds	r4, r3, r7
 80024b0:	429c      	cmp	r4, r3
 80024b2:	419b      	sbcs	r3, r3
 80024b4:	4461      	add	r1, ip
 80024b6:	4689      	mov	r9, r1
 80024b8:	425b      	negs	r3, r3
 80024ba:	4499      	add	r9, r3
 80024bc:	464b      	mov	r3, r9
 80024be:	021b      	lsls	r3, r3, #8
 80024c0:	d400      	bmi.n	80024c4 <__aeabi_dsub+0x678>
 80024c2:	e631      	b.n	8002128 <__aeabi_dsub+0x2dc>
 80024c4:	464a      	mov	r2, r9
 80024c6:	4b17      	ldr	r3, [pc, #92]	; (8002524 <__aeabi_dsub+0x6d8>)
 80024c8:	401a      	ands	r2, r3
 80024ca:	2301      	movs	r3, #1
 80024cc:	4691      	mov	r9, r2
 80024ce:	4698      	mov	r8, r3
 80024d0:	e62a      	b.n	8002128 <__aeabi_dsub+0x2dc>
 80024d2:	0016      	movs	r6, r2
 80024d4:	4664      	mov	r4, ip
 80024d6:	3e20      	subs	r6, #32
 80024d8:	40f4      	lsrs	r4, r6
 80024da:	46a0      	mov	r8, r4
 80024dc:	2a20      	cmp	r2, #32
 80024de:	d005      	beq.n	80024ec <__aeabi_dsub+0x6a0>
 80024e0:	2640      	movs	r6, #64	; 0x40
 80024e2:	4664      	mov	r4, ip
 80024e4:	1ab2      	subs	r2, r6, r2
 80024e6:	4094      	lsls	r4, r2
 80024e8:	4323      	orrs	r3, r4
 80024ea:	469a      	mov	sl, r3
 80024ec:	4654      	mov	r4, sl
 80024ee:	1e63      	subs	r3, r4, #1
 80024f0:	419c      	sbcs	r4, r3
 80024f2:	4643      	mov	r3, r8
 80024f4:	431c      	orrs	r4, r3
 80024f6:	e5db      	b.n	80020b0 <__aeabi_dsub+0x264>
 80024f8:	0002      	movs	r2, r0
 80024fa:	2400      	movs	r4, #0
 80024fc:	2300      	movs	r3, #0
 80024fe:	e548      	b.n	8001f92 <__aeabi_dsub+0x146>
 8002500:	19dc      	adds	r4, r3, r7
 8002502:	42bc      	cmp	r4, r7
 8002504:	41bf      	sbcs	r7, r7
 8002506:	4461      	add	r1, ip
 8002508:	4689      	mov	r9, r1
 800250a:	427f      	negs	r7, r7
 800250c:	44b9      	add	r9, r7
 800250e:	e738      	b.n	8002382 <__aeabi_dsub+0x536>
 8002510:	464b      	mov	r3, r9
 8002512:	4323      	orrs	r3, r4
 8002514:	d100      	bne.n	8002518 <__aeabi_dsub+0x6cc>
 8002516:	e69f      	b.n	8002258 <__aeabi_dsub+0x40c>
 8002518:	e606      	b.n	8002128 <__aeabi_dsub+0x2dc>
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	000007fe 	.word	0x000007fe
 8002520:	000007ff 	.word	0x000007ff
 8002524:	ff7fffff 	.word	0xff7fffff
 8002528:	08ff      	lsrs	r7, r7, #3
 800252a:	074b      	lsls	r3, r1, #29
 800252c:	433b      	orrs	r3, r7
 800252e:	08cc      	lsrs	r4, r1, #3
 8002530:	e616      	b.n	8002160 <__aeabi_dsub+0x314>
 8002532:	4662      	mov	r2, ip
 8002534:	08db      	lsrs	r3, r3, #3
 8002536:	0752      	lsls	r2, r2, #29
 8002538:	4313      	orrs	r3, r2
 800253a:	4662      	mov	r2, ip
 800253c:	08d4      	lsrs	r4, r2, #3
 800253e:	2280      	movs	r2, #128	; 0x80
 8002540:	0312      	lsls	r2, r2, #12
 8002542:	4214      	tst	r4, r2
 8002544:	d007      	beq.n	8002556 <__aeabi_dsub+0x70a>
 8002546:	08c8      	lsrs	r0, r1, #3
 8002548:	4210      	tst	r0, r2
 800254a:	d104      	bne.n	8002556 <__aeabi_dsub+0x70a>
 800254c:	465d      	mov	r5, fp
 800254e:	0004      	movs	r4, r0
 8002550:	08fb      	lsrs	r3, r7, #3
 8002552:	0749      	lsls	r1, r1, #29
 8002554:	430b      	orrs	r3, r1
 8002556:	0f5a      	lsrs	r2, r3, #29
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	0752      	lsls	r2, r2, #29
 800255c:	08db      	lsrs	r3, r3, #3
 800255e:	4313      	orrs	r3, r2
 8002560:	e5fe      	b.n	8002160 <__aeabi_dsub+0x314>
 8002562:	2300      	movs	r3, #0
 8002564:	4a01      	ldr	r2, [pc, #4]	; (800256c <__aeabi_dsub+0x720>)
 8002566:	001c      	movs	r4, r3
 8002568:	e513      	b.n	8001f92 <__aeabi_dsub+0x146>
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	000007ff 	.word	0x000007ff

08002570 <__aeabi_dcmpun>:
 8002570:	b570      	push	{r4, r5, r6, lr}
 8002572:	0005      	movs	r5, r0
 8002574:	480c      	ldr	r0, [pc, #48]	; (80025a8 <__aeabi_dcmpun+0x38>)
 8002576:	031c      	lsls	r4, r3, #12
 8002578:	0016      	movs	r6, r2
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	030a      	lsls	r2, r1, #12
 800257e:	0049      	lsls	r1, r1, #1
 8002580:	0b12      	lsrs	r2, r2, #12
 8002582:	0d49      	lsrs	r1, r1, #21
 8002584:	0b24      	lsrs	r4, r4, #12
 8002586:	0d5b      	lsrs	r3, r3, #21
 8002588:	4281      	cmp	r1, r0
 800258a:	d008      	beq.n	800259e <__aeabi_dcmpun+0x2e>
 800258c:	4a06      	ldr	r2, [pc, #24]	; (80025a8 <__aeabi_dcmpun+0x38>)
 800258e:	2000      	movs	r0, #0
 8002590:	4293      	cmp	r3, r2
 8002592:	d103      	bne.n	800259c <__aeabi_dcmpun+0x2c>
 8002594:	0020      	movs	r0, r4
 8002596:	4330      	orrs	r0, r6
 8002598:	1e43      	subs	r3, r0, #1
 800259a:	4198      	sbcs	r0, r3
 800259c:	bd70      	pop	{r4, r5, r6, pc}
 800259e:	2001      	movs	r0, #1
 80025a0:	432a      	orrs	r2, r5
 80025a2:	d1fb      	bne.n	800259c <__aeabi_dcmpun+0x2c>
 80025a4:	e7f2      	b.n	800258c <__aeabi_dcmpun+0x1c>
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	000007ff 	.word	0x000007ff

080025ac <__aeabi_d2iz>:
 80025ac:	000a      	movs	r2, r1
 80025ae:	b530      	push	{r4, r5, lr}
 80025b0:	4c13      	ldr	r4, [pc, #76]	; (8002600 <__aeabi_d2iz+0x54>)
 80025b2:	0053      	lsls	r3, r2, #1
 80025b4:	0309      	lsls	r1, r1, #12
 80025b6:	0005      	movs	r5, r0
 80025b8:	0b09      	lsrs	r1, r1, #12
 80025ba:	2000      	movs	r0, #0
 80025bc:	0d5b      	lsrs	r3, r3, #21
 80025be:	0fd2      	lsrs	r2, r2, #31
 80025c0:	42a3      	cmp	r3, r4
 80025c2:	dd04      	ble.n	80025ce <__aeabi_d2iz+0x22>
 80025c4:	480f      	ldr	r0, [pc, #60]	; (8002604 <__aeabi_d2iz+0x58>)
 80025c6:	4283      	cmp	r3, r0
 80025c8:	dd02      	ble.n	80025d0 <__aeabi_d2iz+0x24>
 80025ca:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <__aeabi_d2iz+0x5c>)
 80025cc:	18d0      	adds	r0, r2, r3
 80025ce:	bd30      	pop	{r4, r5, pc}
 80025d0:	2080      	movs	r0, #128	; 0x80
 80025d2:	0340      	lsls	r0, r0, #13
 80025d4:	4301      	orrs	r1, r0
 80025d6:	480d      	ldr	r0, [pc, #52]	; (800260c <__aeabi_d2iz+0x60>)
 80025d8:	1ac0      	subs	r0, r0, r3
 80025da:	281f      	cmp	r0, #31
 80025dc:	dd08      	ble.n	80025f0 <__aeabi_d2iz+0x44>
 80025de:	480c      	ldr	r0, [pc, #48]	; (8002610 <__aeabi_d2iz+0x64>)
 80025e0:	1ac3      	subs	r3, r0, r3
 80025e2:	40d9      	lsrs	r1, r3
 80025e4:	000b      	movs	r3, r1
 80025e6:	4258      	negs	r0, r3
 80025e8:	2a00      	cmp	r2, #0
 80025ea:	d1f0      	bne.n	80025ce <__aeabi_d2iz+0x22>
 80025ec:	0018      	movs	r0, r3
 80025ee:	e7ee      	b.n	80025ce <__aeabi_d2iz+0x22>
 80025f0:	4c08      	ldr	r4, [pc, #32]	; (8002614 <__aeabi_d2iz+0x68>)
 80025f2:	40c5      	lsrs	r5, r0
 80025f4:	46a4      	mov	ip, r4
 80025f6:	4463      	add	r3, ip
 80025f8:	4099      	lsls	r1, r3
 80025fa:	000b      	movs	r3, r1
 80025fc:	432b      	orrs	r3, r5
 80025fe:	e7f2      	b.n	80025e6 <__aeabi_d2iz+0x3a>
 8002600:	000003fe 	.word	0x000003fe
 8002604:	0000041d 	.word	0x0000041d
 8002608:	7fffffff 	.word	0x7fffffff
 800260c:	00000433 	.word	0x00000433
 8002610:	00000413 	.word	0x00000413
 8002614:	fffffbed 	.word	0xfffffbed

08002618 <__aeabi_i2d>:
 8002618:	b570      	push	{r4, r5, r6, lr}
 800261a:	2800      	cmp	r0, #0
 800261c:	d016      	beq.n	800264c <__aeabi_i2d+0x34>
 800261e:	17c3      	asrs	r3, r0, #31
 8002620:	18c5      	adds	r5, r0, r3
 8002622:	405d      	eors	r5, r3
 8002624:	0fc4      	lsrs	r4, r0, #31
 8002626:	0028      	movs	r0, r5
 8002628:	f000 f91c 	bl	8002864 <__clzsi2>
 800262c:	4a11      	ldr	r2, [pc, #68]	; (8002674 <__aeabi_i2d+0x5c>)
 800262e:	1a12      	subs	r2, r2, r0
 8002630:	280a      	cmp	r0, #10
 8002632:	dc16      	bgt.n	8002662 <__aeabi_i2d+0x4a>
 8002634:	0003      	movs	r3, r0
 8002636:	002e      	movs	r6, r5
 8002638:	3315      	adds	r3, #21
 800263a:	409e      	lsls	r6, r3
 800263c:	230b      	movs	r3, #11
 800263e:	1a18      	subs	r0, r3, r0
 8002640:	40c5      	lsrs	r5, r0
 8002642:	0552      	lsls	r2, r2, #21
 8002644:	032d      	lsls	r5, r5, #12
 8002646:	0b2d      	lsrs	r5, r5, #12
 8002648:	0d53      	lsrs	r3, r2, #21
 800264a:	e003      	b.n	8002654 <__aeabi_i2d+0x3c>
 800264c:	2400      	movs	r4, #0
 800264e:	2300      	movs	r3, #0
 8002650:	2500      	movs	r5, #0
 8002652:	2600      	movs	r6, #0
 8002654:	051b      	lsls	r3, r3, #20
 8002656:	432b      	orrs	r3, r5
 8002658:	07e4      	lsls	r4, r4, #31
 800265a:	4323      	orrs	r3, r4
 800265c:	0030      	movs	r0, r6
 800265e:	0019      	movs	r1, r3
 8002660:	bd70      	pop	{r4, r5, r6, pc}
 8002662:	380b      	subs	r0, #11
 8002664:	4085      	lsls	r5, r0
 8002666:	0552      	lsls	r2, r2, #21
 8002668:	032d      	lsls	r5, r5, #12
 800266a:	2600      	movs	r6, #0
 800266c:	0b2d      	lsrs	r5, r5, #12
 800266e:	0d53      	lsrs	r3, r2, #21
 8002670:	e7f0      	b.n	8002654 <__aeabi_i2d+0x3c>
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	0000041e 	.word	0x0000041e

08002678 <__aeabi_ui2d>:
 8002678:	b510      	push	{r4, lr}
 800267a:	1e04      	subs	r4, r0, #0
 800267c:	d010      	beq.n	80026a0 <__aeabi_ui2d+0x28>
 800267e:	f000 f8f1 	bl	8002864 <__clzsi2>
 8002682:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <__aeabi_ui2d+0x48>)
 8002684:	1a1b      	subs	r3, r3, r0
 8002686:	280a      	cmp	r0, #10
 8002688:	dc11      	bgt.n	80026ae <__aeabi_ui2d+0x36>
 800268a:	220b      	movs	r2, #11
 800268c:	0021      	movs	r1, r4
 800268e:	1a12      	subs	r2, r2, r0
 8002690:	40d1      	lsrs	r1, r2
 8002692:	3015      	adds	r0, #21
 8002694:	030a      	lsls	r2, r1, #12
 8002696:	055b      	lsls	r3, r3, #21
 8002698:	4084      	lsls	r4, r0
 800269a:	0b12      	lsrs	r2, r2, #12
 800269c:	0d5b      	lsrs	r3, r3, #21
 800269e:	e001      	b.n	80026a4 <__aeabi_ui2d+0x2c>
 80026a0:	2300      	movs	r3, #0
 80026a2:	2200      	movs	r2, #0
 80026a4:	051b      	lsls	r3, r3, #20
 80026a6:	4313      	orrs	r3, r2
 80026a8:	0020      	movs	r0, r4
 80026aa:	0019      	movs	r1, r3
 80026ac:	bd10      	pop	{r4, pc}
 80026ae:	0022      	movs	r2, r4
 80026b0:	380b      	subs	r0, #11
 80026b2:	4082      	lsls	r2, r0
 80026b4:	055b      	lsls	r3, r3, #21
 80026b6:	0312      	lsls	r2, r2, #12
 80026b8:	2400      	movs	r4, #0
 80026ba:	0b12      	lsrs	r2, r2, #12
 80026bc:	0d5b      	lsrs	r3, r3, #21
 80026be:	e7f1      	b.n	80026a4 <__aeabi_ui2d+0x2c>
 80026c0:	0000041e 	.word	0x0000041e

080026c4 <__aeabi_f2d>:
 80026c4:	b570      	push	{r4, r5, r6, lr}
 80026c6:	0043      	lsls	r3, r0, #1
 80026c8:	0246      	lsls	r6, r0, #9
 80026ca:	0fc4      	lsrs	r4, r0, #31
 80026cc:	20fe      	movs	r0, #254	; 0xfe
 80026ce:	0e1b      	lsrs	r3, r3, #24
 80026d0:	1c59      	adds	r1, r3, #1
 80026d2:	0a75      	lsrs	r5, r6, #9
 80026d4:	4208      	tst	r0, r1
 80026d6:	d00c      	beq.n	80026f2 <__aeabi_f2d+0x2e>
 80026d8:	22e0      	movs	r2, #224	; 0xe0
 80026da:	0092      	lsls	r2, r2, #2
 80026dc:	4694      	mov	ip, r2
 80026de:	076d      	lsls	r5, r5, #29
 80026e0:	0b36      	lsrs	r6, r6, #12
 80026e2:	4463      	add	r3, ip
 80026e4:	051b      	lsls	r3, r3, #20
 80026e6:	4333      	orrs	r3, r6
 80026e8:	07e4      	lsls	r4, r4, #31
 80026ea:	4323      	orrs	r3, r4
 80026ec:	0028      	movs	r0, r5
 80026ee:	0019      	movs	r1, r3
 80026f0:	bd70      	pop	{r4, r5, r6, pc}
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d114      	bne.n	8002720 <__aeabi_f2d+0x5c>
 80026f6:	2d00      	cmp	r5, #0
 80026f8:	d01b      	beq.n	8002732 <__aeabi_f2d+0x6e>
 80026fa:	0028      	movs	r0, r5
 80026fc:	f000 f8b2 	bl	8002864 <__clzsi2>
 8002700:	280a      	cmp	r0, #10
 8002702:	dc1c      	bgt.n	800273e <__aeabi_f2d+0x7a>
 8002704:	230b      	movs	r3, #11
 8002706:	002e      	movs	r6, r5
 8002708:	1a1b      	subs	r3, r3, r0
 800270a:	40de      	lsrs	r6, r3
 800270c:	0003      	movs	r3, r0
 800270e:	3315      	adds	r3, #21
 8002710:	409d      	lsls	r5, r3
 8002712:	4a0e      	ldr	r2, [pc, #56]	; (800274c <__aeabi_f2d+0x88>)
 8002714:	0336      	lsls	r6, r6, #12
 8002716:	1a12      	subs	r2, r2, r0
 8002718:	0552      	lsls	r2, r2, #21
 800271a:	0b36      	lsrs	r6, r6, #12
 800271c:	0d53      	lsrs	r3, r2, #21
 800271e:	e7e1      	b.n	80026e4 <__aeabi_f2d+0x20>
 8002720:	2d00      	cmp	r5, #0
 8002722:	d009      	beq.n	8002738 <__aeabi_f2d+0x74>
 8002724:	2280      	movs	r2, #128	; 0x80
 8002726:	0b36      	lsrs	r6, r6, #12
 8002728:	0312      	lsls	r2, r2, #12
 800272a:	4b09      	ldr	r3, [pc, #36]	; (8002750 <__aeabi_f2d+0x8c>)
 800272c:	076d      	lsls	r5, r5, #29
 800272e:	4316      	orrs	r6, r2
 8002730:	e7d8      	b.n	80026e4 <__aeabi_f2d+0x20>
 8002732:	2300      	movs	r3, #0
 8002734:	2600      	movs	r6, #0
 8002736:	e7d5      	b.n	80026e4 <__aeabi_f2d+0x20>
 8002738:	2600      	movs	r6, #0
 800273a:	4b05      	ldr	r3, [pc, #20]	; (8002750 <__aeabi_f2d+0x8c>)
 800273c:	e7d2      	b.n	80026e4 <__aeabi_f2d+0x20>
 800273e:	0003      	movs	r3, r0
 8002740:	3b0b      	subs	r3, #11
 8002742:	409d      	lsls	r5, r3
 8002744:	002e      	movs	r6, r5
 8002746:	2500      	movs	r5, #0
 8002748:	e7e3      	b.n	8002712 <__aeabi_f2d+0x4e>
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	00000389 	.word	0x00000389
 8002750:	000007ff 	.word	0x000007ff

08002754 <__aeabi_d2f>:
 8002754:	0002      	movs	r2, r0
 8002756:	004b      	lsls	r3, r1, #1
 8002758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800275a:	0d5b      	lsrs	r3, r3, #21
 800275c:	030c      	lsls	r4, r1, #12
 800275e:	4e3d      	ldr	r6, [pc, #244]	; (8002854 <__aeabi_d2f+0x100>)
 8002760:	0a64      	lsrs	r4, r4, #9
 8002762:	0f40      	lsrs	r0, r0, #29
 8002764:	1c5f      	adds	r7, r3, #1
 8002766:	0fc9      	lsrs	r1, r1, #31
 8002768:	4304      	orrs	r4, r0
 800276a:	00d5      	lsls	r5, r2, #3
 800276c:	4237      	tst	r7, r6
 800276e:	d00a      	beq.n	8002786 <__aeabi_d2f+0x32>
 8002770:	4839      	ldr	r0, [pc, #228]	; (8002858 <__aeabi_d2f+0x104>)
 8002772:	181e      	adds	r6, r3, r0
 8002774:	2efe      	cmp	r6, #254	; 0xfe
 8002776:	dd16      	ble.n	80027a6 <__aeabi_d2f+0x52>
 8002778:	20ff      	movs	r0, #255	; 0xff
 800277a:	2400      	movs	r4, #0
 800277c:	05c0      	lsls	r0, r0, #23
 800277e:	4320      	orrs	r0, r4
 8002780:	07c9      	lsls	r1, r1, #31
 8002782:	4308      	orrs	r0, r1
 8002784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002786:	2b00      	cmp	r3, #0
 8002788:	d106      	bne.n	8002798 <__aeabi_d2f+0x44>
 800278a:	432c      	orrs	r4, r5
 800278c:	d026      	beq.n	80027dc <__aeabi_d2f+0x88>
 800278e:	2205      	movs	r2, #5
 8002790:	0192      	lsls	r2, r2, #6
 8002792:	0a54      	lsrs	r4, r2, #9
 8002794:	b2d8      	uxtb	r0, r3
 8002796:	e7f1      	b.n	800277c <__aeabi_d2f+0x28>
 8002798:	4325      	orrs	r5, r4
 800279a:	d0ed      	beq.n	8002778 <__aeabi_d2f+0x24>
 800279c:	2080      	movs	r0, #128	; 0x80
 800279e:	03c0      	lsls	r0, r0, #15
 80027a0:	4304      	orrs	r4, r0
 80027a2:	20ff      	movs	r0, #255	; 0xff
 80027a4:	e7ea      	b.n	800277c <__aeabi_d2f+0x28>
 80027a6:	2e00      	cmp	r6, #0
 80027a8:	dd1b      	ble.n	80027e2 <__aeabi_d2f+0x8e>
 80027aa:	0192      	lsls	r2, r2, #6
 80027ac:	1e53      	subs	r3, r2, #1
 80027ae:	419a      	sbcs	r2, r3
 80027b0:	00e4      	lsls	r4, r4, #3
 80027b2:	0f6d      	lsrs	r5, r5, #29
 80027b4:	4322      	orrs	r2, r4
 80027b6:	432a      	orrs	r2, r5
 80027b8:	0753      	lsls	r3, r2, #29
 80027ba:	d048      	beq.n	800284e <__aeabi_d2f+0xfa>
 80027bc:	230f      	movs	r3, #15
 80027be:	4013      	ands	r3, r2
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d000      	beq.n	80027c6 <__aeabi_d2f+0x72>
 80027c4:	3204      	adds	r2, #4
 80027c6:	2380      	movs	r3, #128	; 0x80
 80027c8:	04db      	lsls	r3, r3, #19
 80027ca:	4013      	ands	r3, r2
 80027cc:	d03f      	beq.n	800284e <__aeabi_d2f+0xfa>
 80027ce:	1c70      	adds	r0, r6, #1
 80027d0:	2efe      	cmp	r6, #254	; 0xfe
 80027d2:	d0d1      	beq.n	8002778 <__aeabi_d2f+0x24>
 80027d4:	0192      	lsls	r2, r2, #6
 80027d6:	0a54      	lsrs	r4, r2, #9
 80027d8:	b2c0      	uxtb	r0, r0
 80027da:	e7cf      	b.n	800277c <__aeabi_d2f+0x28>
 80027dc:	2000      	movs	r0, #0
 80027de:	2400      	movs	r4, #0
 80027e0:	e7cc      	b.n	800277c <__aeabi_d2f+0x28>
 80027e2:	0032      	movs	r2, r6
 80027e4:	3217      	adds	r2, #23
 80027e6:	db22      	blt.n	800282e <__aeabi_d2f+0xda>
 80027e8:	2080      	movs	r0, #128	; 0x80
 80027ea:	0400      	lsls	r0, r0, #16
 80027ec:	4320      	orrs	r0, r4
 80027ee:	241e      	movs	r4, #30
 80027f0:	1ba4      	subs	r4, r4, r6
 80027f2:	2c1f      	cmp	r4, #31
 80027f4:	dd1d      	ble.n	8002832 <__aeabi_d2f+0xde>
 80027f6:	2202      	movs	r2, #2
 80027f8:	4252      	negs	r2, r2
 80027fa:	1b96      	subs	r6, r2, r6
 80027fc:	0002      	movs	r2, r0
 80027fe:	40f2      	lsrs	r2, r6
 8002800:	0016      	movs	r6, r2
 8002802:	2c20      	cmp	r4, #32
 8002804:	d004      	beq.n	8002810 <__aeabi_d2f+0xbc>
 8002806:	4a15      	ldr	r2, [pc, #84]	; (800285c <__aeabi_d2f+0x108>)
 8002808:	4694      	mov	ip, r2
 800280a:	4463      	add	r3, ip
 800280c:	4098      	lsls	r0, r3
 800280e:	4305      	orrs	r5, r0
 8002810:	002a      	movs	r2, r5
 8002812:	1e53      	subs	r3, r2, #1
 8002814:	419a      	sbcs	r2, r3
 8002816:	4332      	orrs	r2, r6
 8002818:	2600      	movs	r6, #0
 800281a:	0753      	lsls	r3, r2, #29
 800281c:	d1ce      	bne.n	80027bc <__aeabi_d2f+0x68>
 800281e:	2480      	movs	r4, #128	; 0x80
 8002820:	0013      	movs	r3, r2
 8002822:	04e4      	lsls	r4, r4, #19
 8002824:	2001      	movs	r0, #1
 8002826:	4023      	ands	r3, r4
 8002828:	4222      	tst	r2, r4
 800282a:	d1d3      	bne.n	80027d4 <__aeabi_d2f+0x80>
 800282c:	e7b0      	b.n	8002790 <__aeabi_d2f+0x3c>
 800282e:	2300      	movs	r3, #0
 8002830:	e7ad      	b.n	800278e <__aeabi_d2f+0x3a>
 8002832:	4a0b      	ldr	r2, [pc, #44]	; (8002860 <__aeabi_d2f+0x10c>)
 8002834:	4694      	mov	ip, r2
 8002836:	002a      	movs	r2, r5
 8002838:	40e2      	lsrs	r2, r4
 800283a:	0014      	movs	r4, r2
 800283c:	002a      	movs	r2, r5
 800283e:	4463      	add	r3, ip
 8002840:	409a      	lsls	r2, r3
 8002842:	4098      	lsls	r0, r3
 8002844:	1e55      	subs	r5, r2, #1
 8002846:	41aa      	sbcs	r2, r5
 8002848:	4302      	orrs	r2, r0
 800284a:	4322      	orrs	r2, r4
 800284c:	e7e4      	b.n	8002818 <__aeabi_d2f+0xc4>
 800284e:	0033      	movs	r3, r6
 8002850:	e79e      	b.n	8002790 <__aeabi_d2f+0x3c>
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	000007fe 	.word	0x000007fe
 8002858:	fffffc80 	.word	0xfffffc80
 800285c:	fffffca2 	.word	0xfffffca2
 8002860:	fffffc82 	.word	0xfffffc82

08002864 <__clzsi2>:
 8002864:	211c      	movs	r1, #28
 8002866:	2301      	movs	r3, #1
 8002868:	041b      	lsls	r3, r3, #16
 800286a:	4298      	cmp	r0, r3
 800286c:	d301      	bcc.n	8002872 <__clzsi2+0xe>
 800286e:	0c00      	lsrs	r0, r0, #16
 8002870:	3910      	subs	r1, #16
 8002872:	0a1b      	lsrs	r3, r3, #8
 8002874:	4298      	cmp	r0, r3
 8002876:	d301      	bcc.n	800287c <__clzsi2+0x18>
 8002878:	0a00      	lsrs	r0, r0, #8
 800287a:	3908      	subs	r1, #8
 800287c:	091b      	lsrs	r3, r3, #4
 800287e:	4298      	cmp	r0, r3
 8002880:	d301      	bcc.n	8002886 <__clzsi2+0x22>
 8002882:	0900      	lsrs	r0, r0, #4
 8002884:	3904      	subs	r1, #4
 8002886:	a202      	add	r2, pc, #8	; (adr r2, 8002890 <__clzsi2+0x2c>)
 8002888:	5c10      	ldrb	r0, [r2, r0]
 800288a:	1840      	adds	r0, r0, r1
 800288c:	4770      	bx	lr
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	02020304 	.word	0x02020304
 8002894:	01010101 	.word	0x01010101
	...

080028a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028a0:	b5b0      	push	{r4, r5, r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028a6:	f001 f9e9 	bl	8003c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028aa:	f000 fb05 	bl	8002eb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028ae:	f000 fc5f 	bl	8003170 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80028b2:	f000 fc2d 	bl	8003110 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80028b6:	f000 fc01 	bl	80030bc <MX_TIM6_Init>
  MX_ADC_Init();
 80028ba:	f000 fb65 	bl	8002f88 <MX_ADC_Init>
  MX_SPI1_Init();
 80028be:	f000 fbbf 	bl	8003040 <MX_SPI1_Init>
  /*******************************************************INICIALIZACIONES********************************************************/


  /****************************************Inicialización banderas de botones*****************************/

  ban_button_up = 0;
 80028c2:	4bed      	ldr	r3, [pc, #948]	; (8002c78 <main+0x3d8>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	701a      	strb	r2, [r3, #0]
  ban_button_low = 0;
 80028c8:	4bec      	ldr	r3, [pc, #944]	; (8002c7c <main+0x3dc>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	701a      	strb	r2, [r3, #0]
  ban_button_TS = 0;
 80028ce:	4bec      	ldr	r3, [pc, #944]	; (8002c80 <main+0x3e0>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	701a      	strb	r2, [r3, #0]

  /****************************************Inicialización banderas de UART********************************/
  ban_recibido_msj = 0;
 80028d4:	4beb      	ldr	r3, [pc, #940]	; (8002c84 <main+0x3e4>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	701a      	strb	r2, [r3, #0]
  ban_mismo_msj = 0;
 80028da:	4beb      	ldr	r3, [pc, #940]	; (8002c88 <main+0x3e8>)
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]

  /******************************Inicialización control encendido Leds touch******************************/
  lecture = 0;
 80028e0:	4bea      	ldr	r3, [pc, #936]	; (8002c8c <main+0x3ec>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	701a      	strb	r2, [r3, #0]
  cont_time_offline = 0;
 80028e6:	4bea      	ldr	r3, [pc, #936]	; (8002c90 <main+0x3f0>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	801a      	strh	r2, [r3, #0]



  /************************************Inicialización variables del temperature sensor*******************/
  Presence = 0;
 80028ec:	4be9      	ldr	r3, [pc, #932]	; (8002c94 <main+0x3f4>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	701a      	strb	r2, [r3, #0]
  Temp_byte1 = 0;
 80028f2:	4be9      	ldr	r3, [pc, #932]	; (8002c98 <main+0x3f8>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	701a      	strb	r2, [r3, #0]
  Temp_byte2 = 0;
 80028f8:	4be8      	ldr	r3, [pc, #928]	; (8002c9c <main+0x3fc>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	701a      	strb	r2, [r3, #0]

  temp_dec = 0;
 80028fe:	4be8      	ldr	r3, [pc, #928]	; (8002ca0 <main+0x400>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]


  /****************************************Inicialización variables del UART****************************/
  pos_in = 0;
 8002904:	4be7      	ldr	r3, [pc, #924]	; (8002ca4 <main+0x404>)
 8002906:	2200      	movs	r2, #0
 8002908:	701a      	strb	r2, [r3, #0]
  pos_fin = 0;
 800290a:	4be7      	ldr	r3, [pc, #924]	; (8002ca8 <main+0x408>)
 800290c:	2200      	movs	r2, #0
 800290e:	701a      	strb	r2, [r3, #0]

  li_red = 0;
 8002910:	4be6      	ldr	r3, [pc, #920]	; (8002cac <main+0x40c>)
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
  li_blue = 0;
 8002916:	4be6      	ldr	r3, [pc, #920]	; (8002cb0 <main+0x410>)
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
  li_green = 0;
 800291c:	4be5      	ldr	r3, [pc, #916]	; (8002cb4 <main+0x414>)
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
  ls_red = 0;
 8002922:	4be5      	ldr	r3, [pc, #916]	; (8002cb8 <main+0x418>)
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
  ls_blue = 0;
 8002928:	4be4      	ldr	r3, [pc, #912]	; (8002cbc <main+0x41c>)
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
  ls_green = 0;
 800292e:	4be4      	ldr	r3, [pc, #912]	; (8002cc0 <main+0x420>)
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]

  /**************************************Inicialización variables del ADC******************************/
  vin = 0;
 8002934:	4be3      	ldr	r3, [pc, #908]	; (8002cc4 <main+0x424>)
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
  raw = 0;
 800293a:	4be3      	ldr	r3, [pc, #908]	; (8002cc8 <main+0x428>)
 800293c:	2200      	movs	r2, #0
 800293e:	801a      	strh	r2, [r3, #0]


  /****************************************Inicialización del UART IT**********************************/
  HAL_UART_Receive_IT(&huart1, Rx_data, 13);
 8002940:	49e2      	ldr	r1, [pc, #904]	; (8002ccc <main+0x42c>)
 8002942:	4be3      	ldr	r3, [pc, #908]	; (8002cd0 <main+0x430>)
 8002944:	220d      	movs	r2, #13
 8002946:	0018      	movs	r0, r3
 8002948:	f003 fa3b 	bl	8005dc2 <HAL_UART_Receive_IT>




/***************************************************PROGRAMACIÓN del ADC*************************************************************/
	  HAL_ADC_Start(&hadc);
 800294c:	4be1      	ldr	r3, [pc, #900]	; (8002cd4 <main+0x434>)
 800294e:	0018      	movs	r0, r3
 8002950:	f001 fb5c 	bl	800400c <HAL_ADC_Start>

	  HAL_ADC_PollForConversion(&hadc, 300);
 8002954:	2396      	movs	r3, #150	; 0x96
 8002956:	005a      	lsls	r2, r3, #1
 8002958:	4bde      	ldr	r3, [pc, #888]	; (8002cd4 <main+0x434>)
 800295a:	0011      	movs	r1, r2
 800295c:	0018      	movs	r0, r3
 800295e:	f001 fba9 	bl	80040b4 <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc);
 8002962:	4bdc      	ldr	r3, [pc, #880]	; (8002cd4 <main+0x434>)
 8002964:	0018      	movs	r0, r3
 8002966:	f001 fc3d 	bl	80041e4 <HAL_ADC_GetValue>
 800296a:	0003      	movs	r3, r0
 800296c:	b29a      	uxth	r2, r3
 800296e:	4bd6      	ldr	r3, [pc, #856]	; (8002cc8 <main+0x428>)
 8002970:	801a      	strh	r2, [r3, #0]

	  vin = (raw * (MAX_VALUE_ADC_V/MAX_VALUE_ADC_BITS))+OFFSET;
 8002972:	4bd5      	ldr	r3, [pc, #852]	; (8002cc8 <main+0x428>)
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	0018      	movs	r0, r3
 8002978:	f7ff fe4e 	bl	8002618 <__aeabi_i2d>
 800297c:	4ad6      	ldr	r2, [pc, #856]	; (8002cd8 <main+0x438>)
 800297e:	4bd7      	ldr	r3, [pc, #860]	; (8002cdc <main+0x43c>)
 8002980:	f7fe fff8 	bl	8001974 <__aeabi_dmul>
 8002984:	0002      	movs	r2, r0
 8002986:	000b      	movs	r3, r1
 8002988:	0010      	movs	r0, r2
 800298a:	0019      	movs	r1, r3
 800298c:	4ad4      	ldr	r2, [pc, #848]	; (8002ce0 <main+0x440>)
 800298e:	4bd5      	ldr	r3, [pc, #852]	; (8002ce4 <main+0x444>)
 8002990:	f7fe f8b2 	bl	8000af8 <__aeabi_dadd>
 8002994:	0002      	movs	r2, r0
 8002996:	000b      	movs	r3, r1
 8002998:	0010      	movs	r0, r2
 800299a:	0019      	movs	r1, r3
 800299c:	f7ff feda 	bl	8002754 <__aeabi_d2f>
 80029a0:	1c02      	adds	r2, r0, #0
 80029a2:	4bc8      	ldr	r3, [pc, #800]	; (8002cc4 <main+0x424>)
 80029a4:	601a      	str	r2, [r3, #0]




	  /*****************************************Comando de impresión ADC*********************************/
	  if (ban_recibido_msj == 1){
 80029a6:	4bb7      	ldr	r3, [pc, #732]	; (8002c84 <main+0x3e4>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d128      	bne.n	8002a00 <main+0x160>
		  strncpy (&Rx_data_ADC, &Rx_data, 10);
 80029ae:	49c7      	ldr	r1, [pc, #796]	; (8002ccc <main+0x42c>)
 80029b0:	4bcd      	ldr	r3, [pc, #820]	; (8002ce8 <main+0x448>)
 80029b2:	220a      	movs	r2, #10
 80029b4:	0018      	movs	r0, r3
 80029b6:	f004 ffa9 	bl	800790c <strncpy>

		  if (strcmp(&Rx_data_ADC,"#LECTURE_A") == 0){
 80029ba:	4acc      	ldr	r2, [pc, #816]	; (8002cec <main+0x44c>)
 80029bc:	4bca      	ldr	r3, [pc, #808]	; (8002ce8 <main+0x448>)
 80029be:	0011      	movs	r1, r2
 80029c0:	0018      	movs	r0, r3
 80029c2:	f7fd fba1 	bl	8000108 <strcmp>
 80029c6:	1e03      	subs	r3, r0, #0
 80029c8:	d11a      	bne.n	8002a00 <main+0x160>
			  transmit_lenght = sprintf(&transmit_text[0], "El voltaje de entrada es: %f \r\n", vin);
 80029ca:	4bbe      	ldr	r3, [pc, #760]	; (8002cc4 <main+0x424>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	1c18      	adds	r0, r3, #0
 80029d0:	f7ff fe78 	bl	80026c4 <__aeabi_f2d>
 80029d4:	0002      	movs	r2, r0
 80029d6:	000b      	movs	r3, r1
 80029d8:	49c5      	ldr	r1, [pc, #788]	; (8002cf0 <main+0x450>)
 80029da:	48c6      	ldr	r0, [pc, #792]	; (8002cf4 <main+0x454>)
 80029dc:	f004 ff76 	bl	80078cc <siprintf>
 80029e0:	0003      	movs	r3, r0
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	4bc4      	ldr	r3, [pc, #784]	; (8002cf8 <main+0x458>)
 80029e6:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart1, transmit_text, transmit_lenght, 1000);
 80029e8:	4bc3      	ldr	r3, [pc, #780]	; (8002cf8 <main+0x458>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	23fa      	movs	r3, #250	; 0xfa
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	49c0      	ldr	r1, [pc, #768]	; (8002cf4 <main+0x454>)
 80029f4:	48b6      	ldr	r0, [pc, #728]	; (8002cd0 <main+0x430>)
 80029f6:	f003 f93b 	bl	8005c70 <HAL_UART_Transmit>
			  ban_recibido_msj = 0;
 80029fa:	4ba2      	ldr	r3, [pc, #648]	; (8002c84 <main+0x3e4>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	701a      	strb	r2, [r3, #0]

		  }
	  }

/****************************************PROGRAMACIÓN TEMPERATURE SENSOR**************************************************************/
	  Presence = DS18B20_Start ();
 8002a00:	f000 fdd4 	bl	80035ac <DS18B20_Start>
 8002a04:	0003      	movs	r3, r0
 8002a06:	001a      	movs	r2, r3
 8002a08:	4ba2      	ldr	r3, [pc, #648]	; (8002c94 <main+0x3f4>)
 8002a0a:	701a      	strb	r2, [r3, #0]
	  HAL_Delay (1);
 8002a0c:	2001      	movs	r0, #1
 8002a0e:	f001 f999 	bl	8003d44 <HAL_Delay>
	  DS18B20_Write (0xCC);  // skip ROM				//Inicialización
 8002a12:	20cc      	movs	r0, #204	; 0xcc
 8002a14:	f000 fe04 	bl	8003620 <DS18B20_Write>
	  DS18B20_Write (0x44);  // convert t
 8002a18:	2044      	movs	r0, #68	; 0x44
 8002a1a:	f000 fe01 	bl	8003620 <DS18B20_Write>
	  HAL_Delay (800);
 8002a1e:	23c8      	movs	r3, #200	; 0xc8
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	0018      	movs	r0, r3
 8002a24:	f001 f98e 	bl	8003d44 <HAL_Delay>

	  Presence = DS18B20_Start ();
 8002a28:	f000 fdc0 	bl	80035ac <DS18B20_Start>
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	001a      	movs	r2, r3
 8002a30:	4b98      	ldr	r3, [pc, #608]	; (8002c94 <main+0x3f4>)
 8002a32:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1);
 8002a34:	2001      	movs	r0, #1
 8002a36:	f001 f985 	bl	8003d44 <HAL_Delay>
	  DS18B20_Write (0xCC);  // skip ROM				//Inicialización
 8002a3a:	20cc      	movs	r0, #204	; 0xcc
 8002a3c:	f000 fdf0 	bl	8003620 <DS18B20_Write>
	  DS18B20_Write (0xBE);  // Read Scratch-pad
 8002a40:	20be      	movs	r0, #190	; 0xbe
 8002a42:	f000 fded 	bl	8003620 <DS18B20_Write>


	  Temp_byte1 = DS18B20_Read ();						//Lectura del sensor
 8002a46:	f000 fe39 	bl	80036bc <DS18B20_Read>
 8002a4a:	0003      	movs	r3, r0
 8002a4c:	001a      	movs	r2, r3
 8002a4e:	4b92      	ldr	r3, [pc, #584]	; (8002c98 <main+0x3f8>)
 8002a50:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DS18B20_Read ();
 8002a52:	f000 fe33 	bl	80036bc <DS18B20_Read>
 8002a56:	0003      	movs	r3, r0
 8002a58:	001a      	movs	r2, r3
 8002a5a:	4b90      	ldr	r3, [pc, #576]	; (8002c9c <main+0x3fc>)
 8002a5c:	701a      	strb	r2, [r3, #0]

	  temp_dec = convert_temperature(Temp_byte1, Temp_byte2); //Conversión de hexadecimal a decimal
 8002a5e:	4b8e      	ldr	r3, [pc, #568]	; (8002c98 <main+0x3f8>)
 8002a60:	781a      	ldrb	r2, [r3, #0]
 8002a62:	4b8e      	ldr	r3, [pc, #568]	; (8002c9c <main+0x3fc>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	0019      	movs	r1, r3
 8002a68:	0010      	movs	r0, r2
 8002a6a:	f000 fe6d 	bl	8003748 <convert_temperature>
 8002a6e:	1c02      	adds	r2, r0, #0
 8002a70:	4b8b      	ldr	r3, [pc, #556]	; (8002ca0 <main+0x400>)
 8002a72:	601a      	str	r2, [r3, #0]



	  /*****************************************Impresión temperatura*********************************/

	  transmit_lenght = sprintf(&transmit_text[0], "La temperatura es: %f \r\n", temp_dec);
 8002a74:	4b8a      	ldr	r3, [pc, #552]	; (8002ca0 <main+0x400>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	1c18      	adds	r0, r3, #0
 8002a7a:	f7ff fe23 	bl	80026c4 <__aeabi_f2d>
 8002a7e:	0002      	movs	r2, r0
 8002a80:	000b      	movs	r3, r1
 8002a82:	499e      	ldr	r1, [pc, #632]	; (8002cfc <main+0x45c>)
 8002a84:	489b      	ldr	r0, [pc, #620]	; (8002cf4 <main+0x454>)
 8002a86:	f004 ff21 	bl	80078cc <siprintf>
 8002a8a:	0003      	movs	r3, r0
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	4b9a      	ldr	r3, [pc, #616]	; (8002cf8 <main+0x458>)
 8002a90:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, transmit_text, transmit_lenght, 1000);
 8002a92:	4b99      	ldr	r3, [pc, #612]	; (8002cf8 <main+0x458>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	23fa      	movs	r3, #250	; 0xfa
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4995      	ldr	r1, [pc, #596]	; (8002cf4 <main+0x454>)
 8002a9e:	488c      	ldr	r0, [pc, #560]	; (8002cd0 <main+0x430>)
 8002aa0:	f003 f8e6 	bl	8005c70 <HAL_UART_Transmit>



	  /*********************************Obtención de límites de temperatura***************************************/

	  if (ban_recibido_msj == 1){ //Mira si se recibe algún mensaje
 8002aa4:	4b77      	ldr	r3, [pc, #476]	; (8002c84 <main+0x3e4>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d16b      	bne.n	8002b84 <main+0x2e4>

		  strncpy (&Rx_data_color, &Rx_data, 8); //Recorta para comparar el comando
 8002aac:	4987      	ldr	r1, [pc, #540]	; (8002ccc <main+0x42c>)
 8002aae:	4b94      	ldr	r3, [pc, #592]	; (8002d00 <main+0x460>)
 8002ab0:	2208      	movs	r2, #8
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	f004 ff2a 	bl	800790c <strncpy>

		  /*********************LI Y LS GREEN************************/

		  if (strcmp(&Rx_data_color,"#TEMPLIG") == 0){
 8002ab8:	4a92      	ldr	r2, [pc, #584]	; (8002d04 <main+0x464>)
 8002aba:	4b91      	ldr	r3, [pc, #580]	; (8002d00 <main+0x460>)
 8002abc:	0011      	movs	r1, r2
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f7fd fb22 	bl	8000108 <strcmp>
 8002ac4:	1e03      	subs	r3, r0, #0
 8002ac6:	d108      	bne.n	8002ada <main+0x23a>
			  li_green = Get_number();
 8002ac8:	f000 fc16 	bl	80032f8 <Get_number>
 8002acc:	0003      	movs	r3, r0
 8002ace:	001a      	movs	r2, r3
 8002ad0:	4b78      	ldr	r3, [pc, #480]	; (8002cb4 <main+0x414>)
 8002ad2:	601a      	str	r2, [r3, #0]
			  ban_recibido_msj = 0;
 8002ad4:	4b6b      	ldr	r3, [pc, #428]	; (8002c84 <main+0x3e4>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	701a      	strb	r2, [r3, #0]
		  }

		  if (strcmp(&Rx_data_color,"#TEMPLSG") == 0){
 8002ada:	4a8b      	ldr	r2, [pc, #556]	; (8002d08 <main+0x468>)
 8002adc:	4b88      	ldr	r3, [pc, #544]	; (8002d00 <main+0x460>)
 8002ade:	0011      	movs	r1, r2
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	f7fd fb11 	bl	8000108 <strcmp>
 8002ae6:	1e03      	subs	r3, r0, #0
 8002ae8:	d108      	bne.n	8002afc <main+0x25c>
			  ls_green = Get_number();
 8002aea:	f000 fc05 	bl	80032f8 <Get_number>
 8002aee:	0003      	movs	r3, r0
 8002af0:	001a      	movs	r2, r3
 8002af2:	4b73      	ldr	r3, [pc, #460]	; (8002cc0 <main+0x420>)
 8002af4:	601a      	str	r2, [r3, #0]
			  ban_recibido_msj = 0;
 8002af6:	4b63      	ldr	r3, [pc, #396]	; (8002c84 <main+0x3e4>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	701a      	strb	r2, [r3, #0]
		  }

		  /*********************LI Y LS BLUE************************/

		  if (strcmp(&Rx_data_color,"#TEMPLIB") == 0){
 8002afc:	4a83      	ldr	r2, [pc, #524]	; (8002d0c <main+0x46c>)
 8002afe:	4b80      	ldr	r3, [pc, #512]	; (8002d00 <main+0x460>)
 8002b00:	0011      	movs	r1, r2
 8002b02:	0018      	movs	r0, r3
 8002b04:	f7fd fb00 	bl	8000108 <strcmp>
 8002b08:	1e03      	subs	r3, r0, #0
 8002b0a:	d108      	bne.n	8002b1e <main+0x27e>
			  li_blue = Get_number();
 8002b0c:	f000 fbf4 	bl	80032f8 <Get_number>
 8002b10:	0003      	movs	r3, r0
 8002b12:	001a      	movs	r2, r3
 8002b14:	4b66      	ldr	r3, [pc, #408]	; (8002cb0 <main+0x410>)
 8002b16:	601a      	str	r2, [r3, #0]
			  ban_recibido_msj = 0;
 8002b18:	4b5a      	ldr	r3, [pc, #360]	; (8002c84 <main+0x3e4>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	701a      	strb	r2, [r3, #0]
		  }

		  if (strcmp(&Rx_data_color,"#TEMPLSB") == 0){
 8002b1e:	4a7c      	ldr	r2, [pc, #496]	; (8002d10 <main+0x470>)
 8002b20:	4b77      	ldr	r3, [pc, #476]	; (8002d00 <main+0x460>)
 8002b22:	0011      	movs	r1, r2
 8002b24:	0018      	movs	r0, r3
 8002b26:	f7fd faef 	bl	8000108 <strcmp>
 8002b2a:	1e03      	subs	r3, r0, #0
 8002b2c:	d108      	bne.n	8002b40 <main+0x2a0>
			  ls_blue = Get_number();
 8002b2e:	f000 fbe3 	bl	80032f8 <Get_number>
 8002b32:	0003      	movs	r3, r0
 8002b34:	001a      	movs	r2, r3
 8002b36:	4b61      	ldr	r3, [pc, #388]	; (8002cbc <main+0x41c>)
 8002b38:	601a      	str	r2, [r3, #0]
			  ban_recibido_msj = 0;
 8002b3a:	4b52      	ldr	r3, [pc, #328]	; (8002c84 <main+0x3e4>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	701a      	strb	r2, [r3, #0]
		  }

		  /*********************LI Y LS RED************************/

		  if (strcmp(&Rx_data_color,"#TEMPLIR") == 0){
 8002b40:	4a74      	ldr	r2, [pc, #464]	; (8002d14 <main+0x474>)
 8002b42:	4b6f      	ldr	r3, [pc, #444]	; (8002d00 <main+0x460>)
 8002b44:	0011      	movs	r1, r2
 8002b46:	0018      	movs	r0, r3
 8002b48:	f7fd fade 	bl	8000108 <strcmp>
 8002b4c:	1e03      	subs	r3, r0, #0
 8002b4e:	d108      	bne.n	8002b62 <main+0x2c2>
			  li_red = Get_number();
 8002b50:	f000 fbd2 	bl	80032f8 <Get_number>
 8002b54:	0003      	movs	r3, r0
 8002b56:	001a      	movs	r2, r3
 8002b58:	4b54      	ldr	r3, [pc, #336]	; (8002cac <main+0x40c>)
 8002b5a:	601a      	str	r2, [r3, #0]
			  ban_recibido_msj = 0;
 8002b5c:	4b49      	ldr	r3, [pc, #292]	; (8002c84 <main+0x3e4>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	701a      	strb	r2, [r3, #0]
		  }

		  if (strcmp(&Rx_data_color,"#TEMPLSR") == 0){
 8002b62:	4a6d      	ldr	r2, [pc, #436]	; (8002d18 <main+0x478>)
 8002b64:	4b66      	ldr	r3, [pc, #408]	; (8002d00 <main+0x460>)
 8002b66:	0011      	movs	r1, r2
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f7fd facd 	bl	8000108 <strcmp>
 8002b6e:	1e03      	subs	r3, r0, #0
 8002b70:	d108      	bne.n	8002b84 <main+0x2e4>
			  ls_red = Get_number();
 8002b72:	f000 fbc1 	bl	80032f8 <Get_number>
 8002b76:	0003      	movs	r3, r0
 8002b78:	001a      	movs	r2, r3
 8002b7a:	4b4f      	ldr	r3, [pc, #316]	; (8002cb8 <main+0x418>)
 8002b7c:	601a      	str	r2, [r3, #0]
			  ban_recibido_msj = 0;
 8002b7e:	4b41      	ldr	r3, [pc, #260]	; (8002c84 <main+0x3e4>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	701a      	strb	r2, [r3, #0]

	  }


	  /*********************Impresión por UART de límites************************/
	  if (ban_recibido_msj == 1){
 8002b84:	4b3f      	ldr	r3, [pc, #252]	; (8002c84 <main+0x3e4>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d14f      	bne.n	8002c2c <main+0x38c>
		  strncpy (&Rx_data_ADC, &Rx_data, 10);
 8002b8c:	494f      	ldr	r1, [pc, #316]	; (8002ccc <main+0x42c>)
 8002b8e:	4b56      	ldr	r3, [pc, #344]	; (8002ce8 <main+0x448>)
 8002b90:	220a      	movs	r2, #10
 8002b92:	0018      	movs	r0, r3
 8002b94:	f004 feba 	bl	800790c <strncpy>

		  if (strcmp(&Rx_data_ADC,"#LECTURE_L") == 0){
 8002b98:	4a60      	ldr	r2, [pc, #384]	; (8002d1c <main+0x47c>)
 8002b9a:	4b53      	ldr	r3, [pc, #332]	; (8002ce8 <main+0x448>)
 8002b9c:	0011      	movs	r1, r2
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f7fd fab2 	bl	8000108 <strcmp>
 8002ba4:	1e03      	subs	r3, r0, #0
 8002ba6:	d141      	bne.n	8002c2c <main+0x38c>
			  transmit_lenght = sprintf(&transmit_text[0], "VERDE-> LI: %d LS: %d \r\n",li_green,ls_green);
 8002ba8:	4b42      	ldr	r3, [pc, #264]	; (8002cb4 <main+0x414>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	4b44      	ldr	r3, [pc, #272]	; (8002cc0 <main+0x420>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	495b      	ldr	r1, [pc, #364]	; (8002d20 <main+0x480>)
 8002bb2:	4850      	ldr	r0, [pc, #320]	; (8002cf4 <main+0x454>)
 8002bb4:	f004 fe8a 	bl	80078cc <siprintf>
 8002bb8:	0003      	movs	r3, r0
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	4b4e      	ldr	r3, [pc, #312]	; (8002cf8 <main+0x458>)
 8002bbe:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart1, transmit_text, transmit_lenght, 1000);
 8002bc0:	4b4d      	ldr	r3, [pc, #308]	; (8002cf8 <main+0x458>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	23fa      	movs	r3, #250	; 0xfa
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	494a      	ldr	r1, [pc, #296]	; (8002cf4 <main+0x454>)
 8002bcc:	4840      	ldr	r0, [pc, #256]	; (8002cd0 <main+0x430>)
 8002bce:	f003 f84f 	bl	8005c70 <HAL_UART_Transmit>

			  transmit_lenght = sprintf(&transmit_text[0], "AZUL-> LI: %d LS: %d \r\n",li_blue,ls_blue);
 8002bd2:	4b37      	ldr	r3, [pc, #220]	; (8002cb0 <main+0x410>)
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	4b39      	ldr	r3, [pc, #228]	; (8002cbc <main+0x41c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4952      	ldr	r1, [pc, #328]	; (8002d24 <main+0x484>)
 8002bdc:	4845      	ldr	r0, [pc, #276]	; (8002cf4 <main+0x454>)
 8002bde:	f004 fe75 	bl	80078cc <siprintf>
 8002be2:	0003      	movs	r3, r0
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	4b44      	ldr	r3, [pc, #272]	; (8002cf8 <main+0x458>)
 8002be8:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart1, transmit_text, transmit_lenght, 1000);
 8002bea:	4b43      	ldr	r3, [pc, #268]	; (8002cf8 <main+0x458>)
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	23fa      	movs	r3, #250	; 0xfa
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	493f      	ldr	r1, [pc, #252]	; (8002cf4 <main+0x454>)
 8002bf6:	4836      	ldr	r0, [pc, #216]	; (8002cd0 <main+0x430>)
 8002bf8:	f003 f83a 	bl	8005c70 <HAL_UART_Transmit>

			  transmit_lenght = sprintf(&transmit_text[0], "ROJO-> LI: %d LS: %d \r\n",li_red,ls_red);
 8002bfc:	4b2b      	ldr	r3, [pc, #172]	; (8002cac <main+0x40c>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	4b2d      	ldr	r3, [pc, #180]	; (8002cb8 <main+0x418>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4948      	ldr	r1, [pc, #288]	; (8002d28 <main+0x488>)
 8002c06:	483b      	ldr	r0, [pc, #236]	; (8002cf4 <main+0x454>)
 8002c08:	f004 fe60 	bl	80078cc <siprintf>
 8002c0c:	0003      	movs	r3, r0
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	4b39      	ldr	r3, [pc, #228]	; (8002cf8 <main+0x458>)
 8002c12:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart1, transmit_text, transmit_lenght, 1000);
 8002c14:	4b38      	ldr	r3, [pc, #224]	; (8002cf8 <main+0x458>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	23fa      	movs	r3, #250	; 0xfa
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4935      	ldr	r1, [pc, #212]	; (8002cf4 <main+0x454>)
 8002c20:	482b      	ldr	r0, [pc, #172]	; (8002cd0 <main+0x430>)
 8002c22:	f003 f825 	bl	8005c70 <HAL_UART_Transmit>

			  ban_recibido_msj = 0;
 8002c26:	4b17      	ldr	r3, [pc, #92]	; (8002c84 <main+0x3e4>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	701a      	strb	r2, [r3, #0]




	  /*********************************Control encendido LED RGB***************************************/
	  Led_RGB_Limits_Temp(li_green ,li_blue, li_red,ls_green ,ls_blue, ls_red );
 8002c2c:	4b21      	ldr	r3, [pc, #132]	; (8002cb4 <main+0x414>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	0018      	movs	r0, r3
 8002c32:	4b1f      	ldr	r3, [pc, #124]	; (8002cb0 <main+0x410>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	0019      	movs	r1, r3
 8002c38:	4b1c      	ldr	r3, [pc, #112]	; (8002cac <main+0x40c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	001c      	movs	r4, r3
 8002c3e:	4b20      	ldr	r3, [pc, #128]	; (8002cc0 <main+0x420>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	001d      	movs	r5, r3
 8002c44:	4b1d      	ldr	r3, [pc, #116]	; (8002cbc <main+0x41c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	001a      	movs	r2, r3
 8002c4a:	4b1b      	ldr	r3, [pc, #108]	; (8002cb8 <main+0x418>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	9301      	str	r3, [sp, #4]
 8002c50:	9200      	str	r2, [sp, #0]
 8002c52:	002b      	movs	r3, r5
 8002c54:	0022      	movs	r2, r4
 8002c56:	f000 fbcf 	bl	80033f8 <Led_RGB_Limits_Temp>


	  /**************************************CONTROL ENCENDIDO LEDS TOUCH *******************************************************/
	  if (ban_button_up == 1){
 8002c5a:	4b07      	ldr	r3, [pc, #28]	; (8002c78 <main+0x3d8>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d164      	bne.n	8002d2c <main+0x48c>
		  cont_time_offline ++;
 8002c62:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <main+0x3f0>)
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	3301      	adds	r3, #1
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <main+0x3f0>)
 8002c6c:	801a      	strh	r2, [r3, #0]
		  ban_button_up = 0;
 8002c6e:	4b02      	ldr	r3, [pc, #8]	; (8002c78 <main+0x3d8>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
 8002c74:	e05a      	b.n	8002d2c <main+0x48c>
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	20000368 	.word	0x20000368
 8002c7c:	20000369 	.word	0x20000369
 8002c80:	2000036a 	.word	0x2000036a
 8002c84:	20000391 	.word	0x20000391
 8002c88:	20000392 	.word	0x20000392
 8002c8c:	20000476 	.word	0x20000476
 8002c90:	20000478 	.word	0x20000478
 8002c94:	2000036b 	.word	0x2000036b
 8002c98:	2000036c 	.word	0x2000036c
 8002c9c:	2000036d 	.word	0x2000036d
 8002ca0:	20000370 	.word	0x20000370
 8002ca4:	20000474 	.word	0x20000474
 8002ca8:	20000475 	.word	0x20000475
 8002cac:	2000045c 	.word	0x2000045c
 8002cb0:	20000460 	.word	0x20000460
 8002cb4:	20000464 	.word	0x20000464
 8002cb8:	20000468 	.word	0x20000468
 8002cbc:	2000046c 	.word	0x2000046c
 8002cc0:	20000470 	.word	0x20000470
 8002cc4:	2000047c 	.word	0x2000047c
 8002cc8:	20000480 	.word	0x20000480
 8002ccc:	20000374 	.word	0x20000374
 8002cd0:	200002e4 	.word	0x200002e4
 8002cd4:	200001f8 	.word	0x200001f8
 8002cd8:	cccccccd 	.word	0xcccccccd
 8002cdc:	3f4ccccc 	.word	0x3f4ccccc
 8002ce0:	66666666 	.word	0x66666666
 8002ce4:	3ff66666 	.word	0x3ff66666
 8002ce8:	20000484 	.word	0x20000484
 8002cec:	08009f68 	.word	0x08009f68
 8002cf0:	08009f74 	.word	0x08009f74
 8002cf4:	20000394 	.word	0x20000394
 8002cf8:	20000393 	.word	0x20000393
 8002cfc:	08009f94 	.word	0x08009f94
 8002d00:	20000384 	.word	0x20000384
 8002d04:	08009fb0 	.word	0x08009fb0
 8002d08:	08009fbc 	.word	0x08009fbc
 8002d0c:	08009fc8 	.word	0x08009fc8
 8002d10:	08009fd4 	.word	0x08009fd4
 8002d14:	08009fe0 	.word	0x08009fe0
 8002d18:	08009fec 	.word	0x08009fec
 8002d1c:	08009ff8 	.word	0x08009ff8
 8002d20:	0800a004 	.word	0x0800a004
 8002d24:	0800a020 	.word	0x0800a020
 8002d28:	0800a038 	.word	0x0800a038
	  }

	  if (ban_button_low == 1){
 8002d2c:	4b4e      	ldr	r3, [pc, #312]	; (8002e68 <main+0x5c8>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d10c      	bne.n	8002d4e <main+0x4ae>
		  if (cont_time_offline > 0){
 8002d34:	4b4d      	ldr	r3, [pc, #308]	; (8002e6c <main+0x5cc>)
 8002d36:	881b      	ldrh	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <main+0x4a8>
			  cont_time_offline --;
 8002d3c:	4b4b      	ldr	r3, [pc, #300]	; (8002e6c <main+0x5cc>)
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	3b01      	subs	r3, #1
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	4b49      	ldr	r3, [pc, #292]	; (8002e6c <main+0x5cc>)
 8002d46:	801a      	strh	r2, [r3, #0]
		  }

		  ban_button_low = 0;
 8002d48:	4b47      	ldr	r3, [pc, #284]	; (8002e68 <main+0x5c8>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	701a      	strb	r2, [r3, #0]
	  }

	  /********************************Comando de impresión Tiempo de desconexion******************************/
	  if (ban_recibido_msj == 1){
 8002d4e:	4b48      	ldr	r3, [pc, #288]	; (8002e70 <main+0x5d0>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d125      	bne.n	8002da2 <main+0x502>
		  strncpy (&Rx_data_ADC, &Rx_data, 10);
 8002d56:	4947      	ldr	r1, [pc, #284]	; (8002e74 <main+0x5d4>)
 8002d58:	4b47      	ldr	r3, [pc, #284]	; (8002e78 <main+0x5d8>)
 8002d5a:	220a      	movs	r2, #10
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	f004 fdd5 	bl	800790c <strncpy>

		  if (strcmp(&Rx_data_ADC,"#LECTURE_T") == 0){
 8002d62:	4a46      	ldr	r2, [pc, #280]	; (8002e7c <main+0x5dc>)
 8002d64:	4b44      	ldr	r3, [pc, #272]	; (8002e78 <main+0x5d8>)
 8002d66:	0011      	movs	r1, r2
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f7fd f9cd 	bl	8000108 <strcmp>
 8002d6e:	1e03      	subs	r3, r0, #0
 8002d70:	d117      	bne.n	8002da2 <main+0x502>
		  	  transmit_lenght = sprintf(&transmit_text[0], "Tiempo de desconexion= %d \r\n",cont_time_offline);
 8002d72:	4b3e      	ldr	r3, [pc, #248]	; (8002e6c <main+0x5cc>)
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	001a      	movs	r2, r3
 8002d78:	4941      	ldr	r1, [pc, #260]	; (8002e80 <main+0x5e0>)
 8002d7a:	4b42      	ldr	r3, [pc, #264]	; (8002e84 <main+0x5e4>)
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f004 fda5 	bl	80078cc <siprintf>
 8002d82:	0003      	movs	r3, r0
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	4b40      	ldr	r3, [pc, #256]	; (8002e88 <main+0x5e8>)
 8002d88:	701a      	strb	r2, [r3, #0]
		  	  HAL_UART_Transmit(&huart1, transmit_text, transmit_lenght, 1000);
 8002d8a:	4b3f      	ldr	r3, [pc, #252]	; (8002e88 <main+0x5e8>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	23fa      	movs	r3, #250	; 0xfa
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	493b      	ldr	r1, [pc, #236]	; (8002e84 <main+0x5e4>)
 8002d96:	483d      	ldr	r0, [pc, #244]	; (8002e8c <main+0x5ec>)
 8002d98:	f002 ff6a 	bl	8005c70 <HAL_UART_Transmit>
			  ban_recibido_msj = 0;
 8002d9c:	4b34      	ldr	r3, [pc, #208]	; (8002e70 <main+0x5d0>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	701a      	strb	r2, [r3, #0]
		  }
	  }



	  lecture = HAL_GPIO_ReadPin(TTP223_GPIO_Port, TTP223_Pin);
 8002da2:	4b3b      	ldr	r3, [pc, #236]	; (8002e90 <main+0x5f0>)
 8002da4:	2102      	movs	r1, #2
 8002da6:	0018      	movs	r0, r3
 8002da8:	f001 fe6e 	bl	8004a88 <HAL_GPIO_ReadPin>
 8002dac:	0003      	movs	r3, r0
 8002dae:	001a      	movs	r2, r3
 8002db0:	4b38      	ldr	r3, [pc, #224]	; (8002e94 <main+0x5f4>)
 8002db2:	701a      	strb	r2, [r3, #0]
	  if (lecture == 1){
 8002db4:	4b37      	ldr	r3, [pc, #220]	; (8002e94 <main+0x5f4>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d11a      	bne.n	8002df2 <main+0x552>
		  LED_GREEN_ON;
 8002dbc:	2380      	movs	r3, #128	; 0x80
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	4833      	ldr	r0, [pc, #204]	; (8002e90 <main+0x5f0>)
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	0019      	movs	r1, r3
 8002dc6:	f001 fe7c 	bl	8004ac2 <HAL_GPIO_WritePin>
		  LED_RED_OFF;
 8002dca:	2380      	movs	r3, #128	; 0x80
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4830      	ldr	r0, [pc, #192]	; (8002e90 <main+0x5f0>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	0019      	movs	r1, r3
 8002dd4:	f001 fe75 	bl	8004ac2 <HAL_GPIO_WritePin>
		  HAL_Delay(cont_time_offline *value_ms_to_s);
 8002dd8:	4b24      	ldr	r3, [pc, #144]	; (8002e6c <main+0x5cc>)
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	001a      	movs	r2, r3
 8002dde:	0013      	movs	r3, r2
 8002de0:	015b      	lsls	r3, r3, #5
 8002de2:	1a9b      	subs	r3, r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	189b      	adds	r3, r3, r2
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	0018      	movs	r0, r3
 8002dec:	f000 ffaa 	bl	8003d44 <HAL_Delay>
 8002df0:	e00d      	b.n	8002e0e <main+0x56e>
	  }
	  else{
		  LED_RED_ON;
 8002df2:	2380      	movs	r3, #128	; 0x80
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4826      	ldr	r0, [pc, #152]	; (8002e90 <main+0x5f0>)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	0019      	movs	r1, r3
 8002dfc:	f001 fe61 	bl	8004ac2 <HAL_GPIO_WritePin>
		  LED_GREEN_OFF;
 8002e00:	2380      	movs	r3, #128	; 0x80
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	4822      	ldr	r0, [pc, #136]	; (8002e90 <main+0x5f0>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	0019      	movs	r1, r3
 8002e0a:	f001 fe5a 	bl	8004ac2 <HAL_GPIO_WritePin>

	  /***************************************************PROGRAMACIÓN FLASH *******************************************************/


	  /**********************************Guarda los valores en flash************************************************/
	  things_to_write [0] = temp_dec;
 8002e0e:	4b22      	ldr	r3, [pc, #136]	; (8002e98 <main+0x5f8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	1c18      	adds	r0, r3, #0
 8002e14:	f7fd fb8c 	bl	8000530 <__aeabi_f2uiz>
 8002e18:	0003      	movs	r3, r0
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	4b1f      	ldr	r3, [pc, #124]	; (8002e9c <main+0x5fc>)
 8002e1e:	701a      	strb	r2, [r3, #0]
	  things_to_write [1] = li_green;
 8002e20:	4b1f      	ldr	r3, [pc, #124]	; (8002ea0 <main+0x600>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <main+0x5fc>)
 8002e28:	705a      	strb	r2, [r3, #1]
	  things_to_write [2] = li_blue;
 8002e2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ea4 <main+0x604>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	4b1a      	ldr	r3, [pc, #104]	; (8002e9c <main+0x5fc>)
 8002e32:	709a      	strb	r2, [r3, #2]
	  things_to_write [3] = li_red;
 8002e34:	4b1c      	ldr	r3, [pc, #112]	; (8002ea8 <main+0x608>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	4b18      	ldr	r3, [pc, #96]	; (8002e9c <main+0x5fc>)
 8002e3c:	70da      	strb	r2, [r3, #3]
	  things_to_write [4] = ls_green;
 8002e3e:	4b1b      	ldr	r3, [pc, #108]	; (8002eac <main+0x60c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	4b15      	ldr	r3, [pc, #84]	; (8002e9c <main+0x5fc>)
 8002e46:	711a      	strb	r2, [r3, #4]
	  things_to_write [5] = ls_blue;
 8002e48:	4b19      	ldr	r3, [pc, #100]	; (8002eb0 <main+0x610>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	4b13      	ldr	r3, [pc, #76]	; (8002e9c <main+0x5fc>)
 8002e50:	715a      	strb	r2, [r3, #5]
	  things_to_write [6] = ls_red;
 8002e52:	4b18      	ldr	r3, [pc, #96]	; (8002eb4 <main+0x614>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <main+0x5fc>)
 8002e5a:	719a      	strb	r2, [r3, #6]
	  things_to_write [7] = cont_time_offline;
 8002e5c:	4b03      	ldr	r3, [pc, #12]	; (8002e6c <main+0x5cc>)
 8002e5e:	881b      	ldrh	r3, [r3, #0]
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <main+0x5fc>)
 8002e64:	71da      	strb	r2, [r3, #7]
	  HAL_ADC_Start(&hadc);
 8002e66:	e571      	b.n	800294c <main+0xac>
 8002e68:	20000369 	.word	0x20000369
 8002e6c:	20000478 	.word	0x20000478
 8002e70:	20000391 	.word	0x20000391
 8002e74:	20000374 	.word	0x20000374
 8002e78:	20000484 	.word	0x20000484
 8002e7c:	0800a050 	.word	0x0800a050
 8002e80:	0800a05c 	.word	0x0800a05c
 8002e84:	20000394 	.word	0x20000394
 8002e88:	20000393 	.word	0x20000393
 8002e8c:	200002e4 	.word	0x200002e4
 8002e90:	48000400 	.word	0x48000400
 8002e94:	20000476 	.word	0x20000476
 8002e98:	20000370 	.word	0x20000370
 8002e9c:	20000494 	.word	0x20000494
 8002ea0:	20000464 	.word	0x20000464
 8002ea4:	20000460 	.word	0x20000460
 8002ea8:	2000045c 	.word	0x2000045c
 8002eac:	20000470 	.word	0x20000470
 8002eb0:	2000046c 	.word	0x2000046c
 8002eb4:	20000468 	.word	0x20000468

08002eb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002eb8:	b590      	push	{r4, r7, lr}
 8002eba:	b095      	sub	sp, #84	; 0x54
 8002ebc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ebe:	2420      	movs	r4, #32
 8002ec0:	193b      	adds	r3, r7, r4
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	2330      	movs	r3, #48	; 0x30
 8002ec6:	001a      	movs	r2, r3
 8002ec8:	2100      	movs	r1, #0
 8002eca:	f004 f889 	bl	8006fe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ece:	2310      	movs	r3, #16
 8002ed0:	18fb      	adds	r3, r7, r3
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	2310      	movs	r3, #16
 8002ed6:	001a      	movs	r2, r3
 8002ed8:	2100      	movs	r1, #0
 8002eda:	f004 f881 	bl	8006fe0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ede:	003b      	movs	r3, r7
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	2310      	movs	r3, #16
 8002ee4:	001a      	movs	r2, r3
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	f004 f87a 	bl	8006fe0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002eec:	0021      	movs	r1, r4
 8002eee:	187b      	adds	r3, r7, r1
 8002ef0:	2212      	movs	r2, #18
 8002ef2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ef4:	187b      	adds	r3, r7, r1
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002efa:	187b      	adds	r3, r7, r1
 8002efc:	2201      	movs	r2, #1
 8002efe:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f00:	187b      	adds	r3, r7, r1
 8002f02:	2210      	movs	r2, #16
 8002f04:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002f06:	187b      	adds	r3, r7, r1
 8002f08:	2210      	movs	r2, #16
 8002f0a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f0c:	187b      	adds	r3, r7, r1
 8002f0e:	2202      	movs	r2, #2
 8002f10:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f12:	187b      	adds	r3, r7, r1
 8002f14:	2200      	movs	r2, #0
 8002f16:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002f18:	187b      	adds	r3, r7, r1
 8002f1a:	22a0      	movs	r2, #160	; 0xa0
 8002f1c:	0392      	lsls	r2, r2, #14
 8002f1e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002f20:	187b      	adds	r3, r7, r1
 8002f22:	2200      	movs	r2, #0
 8002f24:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f26:	187b      	adds	r3, r7, r1
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f001 fe03 	bl	8004b34 <HAL_RCC_OscConfig>
 8002f2e:	1e03      	subs	r3, r0, #0
 8002f30:	d001      	beq.n	8002f36 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002f32:	f000 fc37 	bl	80037a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f36:	2110      	movs	r1, #16
 8002f38:	187b      	adds	r3, r7, r1
 8002f3a:	2207      	movs	r2, #7
 8002f3c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f3e:	187b      	adds	r3, r7, r1
 8002f40:	2202      	movs	r2, #2
 8002f42:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f44:	187b      	adds	r3, r7, r1
 8002f46:	2200      	movs	r2, #0
 8002f48:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f4a:	187b      	adds	r3, r7, r1
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002f50:	187b      	adds	r3, r7, r1
 8002f52:	2101      	movs	r1, #1
 8002f54:	0018      	movs	r0, r3
 8002f56:	f002 f907 	bl	8005168 <HAL_RCC_ClockConfig>
 8002f5a:	1e03      	subs	r3, r0, #0
 8002f5c:	d001      	beq.n	8002f62 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002f5e:	f000 fc21 	bl	80037a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f62:	003b      	movs	r3, r7
 8002f64:	2201      	movs	r2, #1
 8002f66:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002f68:	003b      	movs	r3, r7
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f6e:	003b      	movs	r3, r7
 8002f70:	0018      	movs	r0, r3
 8002f72:	f002 fa4b 	bl	800540c <HAL_RCCEx_PeriphCLKConfig>
 8002f76:	1e03      	subs	r3, r0, #0
 8002f78:	d001      	beq.n	8002f7e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002f7a:	f000 fc13 	bl	80037a4 <Error_Handler>
  }
}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b015      	add	sp, #84	; 0x54
 8002f84:	bd90      	pop	{r4, r7, pc}
	...

08002f88 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002f8e:	1d3b      	adds	r3, r7, #4
 8002f90:	0018      	movs	r0, r3
 8002f92:	230c      	movs	r3, #12
 8002f94:	001a      	movs	r2, r3
 8002f96:	2100      	movs	r1, #0
 8002f98:	f004 f822 	bl	8006fe0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002f9c:	4b26      	ldr	r3, [pc, #152]	; (8003038 <MX_ADC_Init+0xb0>)
 8002f9e:	4a27      	ldr	r2, [pc, #156]	; (800303c <MX_ADC_Init+0xb4>)
 8002fa0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002fa2:	4b25      	ldr	r3, [pc, #148]	; (8003038 <MX_ADC_Init+0xb0>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002fa8:	4b23      	ldr	r3, [pc, #140]	; (8003038 <MX_ADC_Init+0xb0>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002fae:	4b22      	ldr	r3, [pc, #136]	; (8003038 <MX_ADC_Init+0xb0>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002fb4:	4b20      	ldr	r3, [pc, #128]	; (8003038 <MX_ADC_Init+0xb0>)
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002fba:	4b1f      	ldr	r3, [pc, #124]	; (8003038 <MX_ADC_Init+0xb0>)
 8002fbc:	2204      	movs	r2, #4
 8002fbe:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002fc0:	4b1d      	ldr	r3, [pc, #116]	; (8003038 <MX_ADC_Init+0xb0>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002fc6:	4b1c      	ldr	r3, [pc, #112]	; (8003038 <MX_ADC_Init+0xb0>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002fcc:	4b1a      	ldr	r3, [pc, #104]	; (8003038 <MX_ADC_Init+0xb0>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002fd2:	4b19      	ldr	r3, [pc, #100]	; (8003038 <MX_ADC_Init+0xb0>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002fd8:	4b17      	ldr	r3, [pc, #92]	; (8003038 <MX_ADC_Init+0xb0>)
 8002fda:	22c2      	movs	r2, #194	; 0xc2
 8002fdc:	32ff      	adds	r2, #255	; 0xff
 8002fde:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002fe0:	4b15      	ldr	r3, [pc, #84]	; (8003038 <MX_ADC_Init+0xb0>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002fe6:	4b14      	ldr	r3, [pc, #80]	; (8003038 <MX_ADC_Init+0xb0>)
 8002fe8:	2224      	movs	r2, #36	; 0x24
 8002fea:	2100      	movs	r1, #0
 8002fec:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002fee:	4b12      	ldr	r3, [pc, #72]	; (8003038 <MX_ADC_Init+0xb0>)
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002ff4:	4b10      	ldr	r3, [pc, #64]	; (8003038 <MX_ADC_Init+0xb0>)
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f000 fec8 	bl	8003d8c <HAL_ADC_Init>
 8002ffc:	1e03      	subs	r3, r0, #0
 8002ffe:	d001      	beq.n	8003004 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8003000:	f000 fbd0 	bl	80037a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003004:	1d3b      	adds	r3, r7, #4
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800300a:	1d3b      	adds	r3, r7, #4
 800300c:	2280      	movs	r2, #128	; 0x80
 800300e:	0152      	lsls	r2, r2, #5
 8003010:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003012:	1d3b      	adds	r3, r7, #4
 8003014:	2280      	movs	r2, #128	; 0x80
 8003016:	0552      	lsls	r2, r2, #21
 8003018:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800301a:	1d3a      	adds	r2, r7, #4
 800301c:	4b06      	ldr	r3, [pc, #24]	; (8003038 <MX_ADC_Init+0xb0>)
 800301e:	0011      	movs	r1, r2
 8003020:	0018      	movs	r0, r3
 8003022:	f001 f8eb 	bl	80041fc <HAL_ADC_ConfigChannel>
 8003026:	1e03      	subs	r3, r0, #0
 8003028:	d001      	beq.n	800302e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800302a:	f000 fbbb 	bl	80037a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800302e:	46c0      	nop			; (mov r8, r8)
 8003030:	46bd      	mov	sp, r7
 8003032:	b004      	add	sp, #16
 8003034:	bd80      	pop	{r7, pc}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	200001f8 	.word	0x200001f8
 800303c:	40012400 	.word	0x40012400

08003040 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003044:	4b1b      	ldr	r3, [pc, #108]	; (80030b4 <MX_SPI1_Init+0x74>)
 8003046:	4a1c      	ldr	r2, [pc, #112]	; (80030b8 <MX_SPI1_Init+0x78>)
 8003048:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800304a:	4b1a      	ldr	r3, [pc, #104]	; (80030b4 <MX_SPI1_Init+0x74>)
 800304c:	2282      	movs	r2, #130	; 0x82
 800304e:	0052      	lsls	r2, r2, #1
 8003050:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003052:	4b18      	ldr	r3, [pc, #96]	; (80030b4 <MX_SPI1_Init+0x74>)
 8003054:	2200      	movs	r2, #0
 8003056:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003058:	4b16      	ldr	r3, [pc, #88]	; (80030b4 <MX_SPI1_Init+0x74>)
 800305a:	22e0      	movs	r2, #224	; 0xe0
 800305c:	00d2      	lsls	r2, r2, #3
 800305e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003060:	4b14      	ldr	r3, [pc, #80]	; (80030b4 <MX_SPI1_Init+0x74>)
 8003062:	2200      	movs	r2, #0
 8003064:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003066:	4b13      	ldr	r3, [pc, #76]	; (80030b4 <MX_SPI1_Init+0x74>)
 8003068:	2200      	movs	r2, #0
 800306a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800306c:	4b11      	ldr	r3, [pc, #68]	; (80030b4 <MX_SPI1_Init+0x74>)
 800306e:	2280      	movs	r2, #128	; 0x80
 8003070:	0092      	lsls	r2, r2, #2
 8003072:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003074:	4b0f      	ldr	r3, [pc, #60]	; (80030b4 <MX_SPI1_Init+0x74>)
 8003076:	2220      	movs	r2, #32
 8003078:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800307a:	4b0e      	ldr	r3, [pc, #56]	; (80030b4 <MX_SPI1_Init+0x74>)
 800307c:	2200      	movs	r2, #0
 800307e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003080:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <MX_SPI1_Init+0x74>)
 8003082:	2200      	movs	r2, #0
 8003084:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003086:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <MX_SPI1_Init+0x74>)
 8003088:	2200      	movs	r2, #0
 800308a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800308c:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <MX_SPI1_Init+0x74>)
 800308e:	2207      	movs	r2, #7
 8003090:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003092:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <MX_SPI1_Init+0x74>)
 8003094:	2200      	movs	r2, #0
 8003096:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003098:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <MX_SPI1_Init+0x74>)
 800309a:	2208      	movs	r2, #8
 800309c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800309e:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <MX_SPI1_Init+0x74>)
 80030a0:	0018      	movs	r0, r3
 80030a2:	f002 fa81 	bl	80055a8 <HAL_SPI_Init>
 80030a6:	1e03      	subs	r3, r0, #0
 80030a8:	d001      	beq.n	80030ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80030aa:	f000 fb7b 	bl	80037a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	20000238 	.word	0x20000238
 80030b8:	40013000 	.word	0x40013000

080030bc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80030c0:	4b10      	ldr	r3, [pc, #64]	; (8003104 <MX_TIM6_Init+0x48>)
 80030c2:	4a11      	ldr	r2, [pc, #68]	; (8003108 <MX_TIM6_Init+0x4c>)
 80030c4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48-1;
 80030c6:	4b0f      	ldr	r3, [pc, #60]	; (8003104 <MX_TIM6_Init+0x48>)
 80030c8:	222f      	movs	r2, #47	; 0x2f
 80030ca:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030cc:	4b0d      	ldr	r3, [pc, #52]	; (8003104 <MX_TIM6_Init+0x48>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535-1;
 80030d2:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <MX_TIM6_Init+0x48>)
 80030d4:	4a0d      	ldr	r2, [pc, #52]	; (800310c <MX_TIM6_Init+0x50>)
 80030d6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030d8:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <MX_TIM6_Init+0x48>)
 80030da:	2280      	movs	r2, #128	; 0x80
 80030dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80030de:	4b09      	ldr	r3, [pc, #36]	; (8003104 <MX_TIM6_Init+0x48>)
 80030e0:	0018      	movs	r0, r3
 80030e2:	f002 fb19 	bl	8005718 <HAL_TIM_Base_Init>
 80030e6:	1e03      	subs	r3, r0, #0
 80030e8:	d001      	beq.n	80030ee <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 80030ea:	f000 fb5b 	bl	80037a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  if (HAL_TIM_Base_Start(&htim6) != HAL_OK)
 80030ee:	4b05      	ldr	r3, [pc, #20]	; (8003104 <MX_TIM6_Init+0x48>)
 80030f0:	0018      	movs	r0, r3
 80030f2:	f002 fb61 	bl	80057b8 <HAL_TIM_Base_Start>
 80030f6:	1e03      	subs	r3, r0, #0
 80030f8:	d001      	beq.n	80030fe <MX_TIM6_Init+0x42>
   	{
   		Error_Handler();
 80030fa:	f000 fb53 	bl	80037a4 <Error_Handler>
   	}

  /* USER CODE END TIM6_Init 2 */

}
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	2000029c 	.word	0x2000029c
 8003108:	40001000 	.word	0x40001000
 800310c:	0000fffe 	.word	0x0000fffe

08003110 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003114:	4b14      	ldr	r3, [pc, #80]	; (8003168 <MX_USART1_UART_Init+0x58>)
 8003116:	4a15      	ldr	r2, [pc, #84]	; (800316c <MX_USART1_UART_Init+0x5c>)
 8003118:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800311a:	4b13      	ldr	r3, [pc, #76]	; (8003168 <MX_USART1_UART_Init+0x58>)
 800311c:	2296      	movs	r2, #150	; 0x96
 800311e:	0212      	lsls	r2, r2, #8
 8003120:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003122:	4b11      	ldr	r3, [pc, #68]	; (8003168 <MX_USART1_UART_Init+0x58>)
 8003124:	2200      	movs	r2, #0
 8003126:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003128:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <MX_USART1_UART_Init+0x58>)
 800312a:	2200      	movs	r2, #0
 800312c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800312e:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <MX_USART1_UART_Init+0x58>)
 8003130:	2200      	movs	r2, #0
 8003132:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003134:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <MX_USART1_UART_Init+0x58>)
 8003136:	220c      	movs	r2, #12
 8003138:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800313a:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <MX_USART1_UART_Init+0x58>)
 800313c:	2200      	movs	r2, #0
 800313e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003140:	4b09      	ldr	r3, [pc, #36]	; (8003168 <MX_USART1_UART_Init+0x58>)
 8003142:	2200      	movs	r2, #0
 8003144:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003146:	4b08      	ldr	r3, [pc, #32]	; (8003168 <MX_USART1_UART_Init+0x58>)
 8003148:	2200      	movs	r2, #0
 800314a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800314c:	4b06      	ldr	r3, [pc, #24]	; (8003168 <MX_USART1_UART_Init+0x58>)
 800314e:	2200      	movs	r2, #0
 8003150:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003152:	4b05      	ldr	r3, [pc, #20]	; (8003168 <MX_USART1_UART_Init+0x58>)
 8003154:	0018      	movs	r0, r3
 8003156:	f002 fd37 	bl	8005bc8 <HAL_UART_Init>
 800315a:	1e03      	subs	r3, r0, #0
 800315c:	d001      	beq.n	8003162 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800315e:	f000 fb21 	bl	80037a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	200002e4 	.word	0x200002e4
 800316c:	40013800 	.word	0x40013800

08003170 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003170:	b590      	push	{r4, r7, lr}
 8003172:	b089      	sub	sp, #36	; 0x24
 8003174:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003176:	240c      	movs	r4, #12
 8003178:	193b      	adds	r3, r7, r4
 800317a:	0018      	movs	r0, r3
 800317c:	2314      	movs	r3, #20
 800317e:	001a      	movs	r2, r3
 8003180:	2100      	movs	r1, #0
 8003182:	f003 ff2d 	bl	8006fe0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003186:	4b35      	ldr	r3, [pc, #212]	; (800325c <MX_GPIO_Init+0xec>)
 8003188:	695a      	ldr	r2, [r3, #20]
 800318a:	4b34      	ldr	r3, [pc, #208]	; (800325c <MX_GPIO_Init+0xec>)
 800318c:	2180      	movs	r1, #128	; 0x80
 800318e:	0289      	lsls	r1, r1, #10
 8003190:	430a      	orrs	r2, r1
 8003192:	615a      	str	r2, [r3, #20]
 8003194:	4b31      	ldr	r3, [pc, #196]	; (800325c <MX_GPIO_Init+0xec>)
 8003196:	695a      	ldr	r2, [r3, #20]
 8003198:	2380      	movs	r3, #128	; 0x80
 800319a:	029b      	lsls	r3, r3, #10
 800319c:	4013      	ands	r3, r2
 800319e:	60bb      	str	r3, [r7, #8]
 80031a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031a2:	4b2e      	ldr	r3, [pc, #184]	; (800325c <MX_GPIO_Init+0xec>)
 80031a4:	695a      	ldr	r2, [r3, #20]
 80031a6:	4b2d      	ldr	r3, [pc, #180]	; (800325c <MX_GPIO_Init+0xec>)
 80031a8:	2180      	movs	r1, #128	; 0x80
 80031aa:	02c9      	lsls	r1, r1, #11
 80031ac:	430a      	orrs	r2, r1
 80031ae:	615a      	str	r2, [r3, #20]
 80031b0:	4b2a      	ldr	r3, [pc, #168]	; (800325c <MX_GPIO_Init+0xec>)
 80031b2:	695a      	ldr	r2, [r3, #20]
 80031b4:	2380      	movs	r3, #128	; 0x80
 80031b6:	02db      	lsls	r3, r3, #11
 80031b8:	4013      	ands	r3, r2
 80031ba:	607b      	str	r3, [r7, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_CS_Pin|LED_BLUE_RGB_Pin|LED_GREEN_RGB_Pin|LED_RED_RGB_Pin
 80031be:	4928      	ldr	r1, [pc, #160]	; (8003260 <MX_GPIO_Init+0xf0>)
 80031c0:	4b28      	ldr	r3, [pc, #160]	; (8003264 <MX_GPIO_Init+0xf4>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	0018      	movs	r0, r3
 80031c6:	f001 fc7c 	bl	8004ac2 <HAL_GPIO_WritePin>
                          |LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SPI_CS_Pin LED_BLUE_RGB_Pin LED_GREEN_RGB_Pin LED_RED_RGB_Pin
                           LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|LED_BLUE_RGB_Pin|LED_GREEN_RGB_Pin|LED_RED_RGB_Pin
 80031ca:	193b      	adds	r3, r7, r4
 80031cc:	4a24      	ldr	r2, [pc, #144]	; (8003260 <MX_GPIO_Init+0xf0>)
 80031ce:	601a      	str	r2, [r3, #0]
                          |LED_GREEN_Pin|LED_RED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031d0:	193b      	adds	r3, r7, r4
 80031d2:	2201      	movs	r2, #1
 80031d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d6:	193b      	adds	r3, r7, r4
 80031d8:	2200      	movs	r2, #0
 80031da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031dc:	193b      	adds	r3, r7, r4
 80031de:	2200      	movs	r2, #0
 80031e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031e2:	193b      	adds	r3, r7, r4
 80031e4:	4a1f      	ldr	r2, [pc, #124]	; (8003264 <MX_GPIO_Init+0xf4>)
 80031e6:	0019      	movs	r1, r3
 80031e8:	0010      	movs	r0, r2
 80031ea:	f001 fadd 	bl	80047a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TTP223_Pin BUTTON_UP_Pin BUTTON_LOW_Pin */
  GPIO_InitStruct.Pin = TTP223_Pin|BUTTON_UP_Pin|BUTTON_LOW_Pin;
 80031ee:	0021      	movs	r1, r4
 80031f0:	187b      	adds	r3, r7, r1
 80031f2:	4a1d      	ldr	r2, [pc, #116]	; (8003268 <MX_GPIO_Init+0xf8>)
 80031f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031f6:	187b      	adds	r3, r7, r1
 80031f8:	2288      	movs	r2, #136	; 0x88
 80031fa:	0352      	lsls	r2, r2, #13
 80031fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fe:	187b      	adds	r3, r7, r1
 8003200:	2200      	movs	r2, #0
 8003202:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003204:	000c      	movs	r4, r1
 8003206:	187b      	adds	r3, r7, r1
 8003208:	4a16      	ldr	r2, [pc, #88]	; (8003264 <MX_GPIO_Init+0xf4>)
 800320a:	0019      	movs	r1, r3
 800320c:	0010      	movs	r0, r2
 800320e:	f001 facb 	bl	80047a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18B20_Pin */
  GPIO_InitStruct.Pin = DS18B20_Pin;
 8003212:	0021      	movs	r1, r4
 8003214:	187b      	adds	r3, r7, r1
 8003216:	2204      	movs	r2, #4
 8003218:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800321a:	187b      	adds	r3, r7, r1
 800321c:	2200      	movs	r2, #0
 800321e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003220:	187b      	adds	r3, r7, r1
 8003222:	2200      	movs	r2, #0
 8003224:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DS18B20_GPIO_Port, &GPIO_InitStruct);
 8003226:	187b      	adds	r3, r7, r1
 8003228:	4a0e      	ldr	r2, [pc, #56]	; (8003264 <MX_GPIO_Init+0xf4>)
 800322a:	0019      	movs	r1, r3
 800322c:	0010      	movs	r0, r2
 800322e:	f001 fabb 	bl	80047a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8003232:	2200      	movs	r2, #0
 8003234:	2100      	movs	r1, #0
 8003236:	2005      	movs	r0, #5
 8003238:	f001 fa06 	bl	8004648 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800323c:	2005      	movs	r0, #5
 800323e:	f001 fa18 	bl	8004672 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003242:	2200      	movs	r2, #0
 8003244:	2100      	movs	r1, #0
 8003246:	2007      	movs	r0, #7
 8003248:	f001 f9fe 	bl	8004648 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800324c:	2007      	movs	r0, #7
 800324e:	f001 fa10 	bl	8004672 <HAL_NVIC_EnableIRQ>

}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	46bd      	mov	sp, r7
 8003256:	b009      	add	sp, #36	; 0x24
 8003258:	bd90      	pop	{r4, r7, pc}
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	40021000 	.word	0x40021000
 8003260:	0000e301 	.word	0x0000e301
 8003264:	48000400 	.word	0x48000400
 8003268:	00000c02 	.word	0x00000c02

0800326c <HAL_GPIO_EXTI_Callback>:

/****************************************FUNCIONES DE CALLBACKS BOTONES***************************************************++*******/


/****************************************Función de Callback botón UP ,LOW Y TOUCH SENSOR*****************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	0002      	movs	r2, r0
 8003274:	1dbb      	adds	r3, r7, #6
 8003276:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == PIN_BUTTON_UP_IT){ // 1024
 8003278:	1dbb      	adds	r3, r7, #6
 800327a:	881a      	ldrh	r2, [r3, #0]
 800327c:	2380      	movs	r3, #128	; 0x80
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	429a      	cmp	r2, r3
 8003282:	d102      	bne.n	800328a <HAL_GPIO_EXTI_Callback+0x1e>
		ban_button_up = 1;
 8003284:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <HAL_GPIO_EXTI_Callback+0x48>)
 8003286:	2201      	movs	r2, #1
 8003288:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == PIN_BUTTON_LOW_IT){ //2048
 800328a:	1dbb      	adds	r3, r7, #6
 800328c:	881a      	ldrh	r2, [r3, #0]
 800328e:	2380      	movs	r3, #128	; 0x80
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	429a      	cmp	r2, r3
 8003294:	d102      	bne.n	800329c <HAL_GPIO_EXTI_Callback+0x30>
		ban_button_low = 1;
 8003296:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <HAL_GPIO_EXTI_Callback+0x4c>)
 8003298:	2201      	movs	r2, #1
 800329a:	701a      	strb	r2, [r3, #0]
	}

	if (GPIO_Pin == GPIO_PIN_1)
 800329c:	1dbb      	adds	r3, r7, #6
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d102      	bne.n	80032aa <HAL_GPIO_EXTI_Callback+0x3e>
	{
		ban_button_TS = 1;
 80032a4:	4b05      	ldr	r3, [pc, #20]	; (80032bc <HAL_GPIO_EXTI_Callback+0x50>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	701a      	strb	r2, [r3, #0]
	}

}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	46bd      	mov	sp, r7
 80032ae:	b002      	add	sp, #8
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	20000368 	.word	0x20000368
 80032b8:	20000369 	.word	0x20000369
 80032bc:	2000036a 	.word	0x2000036a

080032c0 <HAL_UART_RxCpltCallback>:

/****************************************FUNCIONES DEL UART***************************************************++*******/


/****************************************Función Callback de UART*****************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, Rx_data, 13);
 80032c8:	4907      	ldr	r1, [pc, #28]	; (80032e8 <HAL_UART_RxCpltCallback+0x28>)
 80032ca:	4b08      	ldr	r3, [pc, #32]	; (80032ec <HAL_UART_RxCpltCallback+0x2c>)
 80032cc:	220d      	movs	r2, #13
 80032ce:	0018      	movs	r0, r3
 80032d0:	f002 fd77 	bl	8005dc2 <HAL_UART_Receive_IT>
	ban_recibido_msj = 1;
 80032d4:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <HAL_UART_RxCpltCallback+0x30>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	701a      	strb	r2, [r3, #0]
	ban_mismo_msj = 0;
 80032da:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <HAL_UART_RxCpltCallback+0x34>)
 80032dc:	2200      	movs	r2, #0
 80032de:	701a      	strb	r2, [r3, #0]
}
 80032e0:	46c0      	nop			; (mov r8, r8)
 80032e2:	46bd      	mov	sp, r7
 80032e4:	b002      	add	sp, #8
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	20000374 	.word	0x20000374
 80032ec:	200002e4 	.word	0x200002e4
 80032f0:	20000391 	.word	0x20000391
 80032f4:	20000392 	.word	0x20000392

080032f8 <Get_number>:


/****************************************Función para obtener el número del UART***************/
static int Get_number(void){
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
	uint32_t result;

	for (int i = 0; i<lenght_Rx + 1; i++){
 80032fe:	2300      	movs	r3, #0
 8003300:	60bb      	str	r3, [r7, #8]
 8003302:	e023      	b.n	800334c <Get_number+0x54>
		if (Rx_data[i] == '$'){
 8003304:	4a27      	ldr	r2, [pc, #156]	; (80033a4 <Get_number+0xac>)
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	18d3      	adds	r3, r2, r3
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b24      	cmp	r3, #36	; 0x24
 800330e:	d11a      	bne.n	8003346 <Get_number+0x4e>
			pos_in = i;
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	b2da      	uxtb	r2, r3
 8003314:	4b24      	ldr	r3, [pc, #144]	; (80033a8 <Get_number+0xb0>)
 8003316:	701a      	strb	r2, [r3, #0]
			for (int j = i+1; j<lenght_Rx+1; j++){
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	3301      	adds	r3, #1
 800331c:	607b      	str	r3, [r7, #4]
 800331e:	e00e      	b.n	800333e <Get_number+0x46>
				if (Rx_data[j] == '$'){
 8003320:	4a20      	ldr	r2, [pc, #128]	; (80033a4 <Get_number+0xac>)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	18d3      	adds	r3, r2, r3
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b24      	cmp	r3, #36	; 0x24
 800332a:	d105      	bne.n	8003338 <Get_number+0x40>
					pos_fin = j;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	b2da      	uxtb	r2, r3
 8003330:	4b1e      	ldr	r3, [pc, #120]	; (80033ac <Get_number+0xb4>)
 8003332:	701a      	strb	r2, [r3, #0]
					break;
 8003334:	46c0      	nop			; (mov r8, r8)
				}
			}
			break;
 8003336:	e00c      	b.n	8003352 <Get_number+0x5a>
			for (int j = i+1; j<lenght_Rx+1; j++){
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3301      	adds	r3, #1
 800333c:	607b      	str	r3, [r7, #4]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b0d      	cmp	r3, #13
 8003342:	dded      	ble.n	8003320 <Get_number+0x28>
			break;
 8003344:	e005      	b.n	8003352 <Get_number+0x5a>
	for (int i = 0; i<lenght_Rx + 1; i++){
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	3301      	adds	r3, #1
 800334a:	60bb      	str	r3, [r7, #8]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2b0d      	cmp	r3, #13
 8003350:	ddd8      	ble.n	8003304 <Get_number+0xc>
		}
	}

	result = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
	for (int z = pos_in+1; z<=pos_fin-1; z++ ){
 8003356:	4b14      	ldr	r3, [pc, #80]	; (80033a8 <Get_number+0xb0>)
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	3301      	adds	r3, #1
 800335c:	603b      	str	r3, [r7, #0]
 800335e:	e015      	b.n	800338c <Get_number+0x94>
		result += pow(Rx_data[z]-48, pos_fin-1-z);
 8003360:	4a10      	ldr	r2, [pc, #64]	; (80033a4 <Get_number+0xac>)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	18d3      	adds	r3, r2, r3
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	3b30      	subs	r3, #48	; 0x30
 800336a:	0018      	movs	r0, r3
 800336c:	4b0f      	ldr	r3, [pc, #60]	; (80033ac <Get_number+0xb4>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	1e5a      	subs	r2, r3, #1
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	0019      	movs	r1, r3
 8003378:	f000 f81a 	bl	80033b0 <pow>
 800337c:	0003      	movs	r3, r0
 800337e:	001a      	movs	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	189b      	adds	r3, r3, r2
 8003384:	60fb      	str	r3, [r7, #12]
	for (int z = pos_in+1; z<=pos_fin-1; z++ ){
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	3301      	adds	r3, #1
 800338a:	603b      	str	r3, [r7, #0]
 800338c:	4b07      	ldr	r3, [pc, #28]	; (80033ac <Get_number+0xb4>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	001a      	movs	r2, r3
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	4293      	cmp	r3, r2
 8003396:	dbe3      	blt.n	8003360 <Get_number+0x68>
	}

	return result;
 8003398:	68fb      	ldr	r3, [r7, #12]

}
 800339a:	0018      	movs	r0, r3
 800339c:	46bd      	mov	sp, r7
 800339e:	b004      	add	sp, #16
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	20000374 	.word	0x20000374
 80033a8:	20000474 	.word	0x20000474
 80033ac:	20000475 	.word	0x20000475

080033b0 <pow>:

/****************************************Función para potencia*******************************/
static  int pow (int num, int exp ){
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]

	int result = 1;
 80033ba:	2301      	movs	r3, #1
 80033bc:	60fb      	str	r3, [r7, #12]

	if (exp == 0){
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <pow+0x18>
		return num;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	e012      	b.n	80033ee <pow+0x3e>
	}
	else{
		for (int i = 0; i<exp; i++){
 80033c8:	2300      	movs	r3, #0
 80033ca:	60bb      	str	r3, [r7, #8]
 80033cc:	e006      	b.n	80033dc <pow+0x2c>
			result = result * num;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	4353      	muls	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i<exp; i++){
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	3301      	adds	r3, #1
 80033da:	60bb      	str	r3, [r7, #8]
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	dbf4      	blt.n	80033ce <pow+0x1e>
		}
		return 10*result;
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	0013      	movs	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	189b      	adds	r3, r3, r2
 80033ec:	005b      	lsls	r3, r3, #1
	}
}
 80033ee:	0018      	movs	r0, r3
 80033f0:	46bd      	mov	sp, r7
 80033f2:	b004      	add	sp, #16
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <Led_RGB_Limits_Temp>:


/*************************************Función para Control encendido LED RGB*******************************/
static void Led_RGB_Limits_Temp (int temp_li_green ,int temp_li_blue, int temp_li_red, int temp_ls_green ,int temp_ls_blue, int temp_ls_red){
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
 8003404:	603b      	str	r3, [r7, #0]

	LED_RED_RGB_OFF;
 8003406:	2380      	movs	r3, #128	; 0x80
 8003408:	021b      	lsls	r3, r3, #8
 800340a:	483b      	ldr	r0, [pc, #236]	; (80034f8 <Led_RGB_Limits_Temp+0x100>)
 800340c:	2200      	movs	r2, #0
 800340e:	0019      	movs	r1, r3
 8003410:	f001 fb57 	bl	8004ac2 <HAL_GPIO_WritePin>
	LED_BLUE_RGB_OFF;
 8003414:	2380      	movs	r3, #128	; 0x80
 8003416:	019b      	lsls	r3, r3, #6
 8003418:	4837      	ldr	r0, [pc, #220]	; (80034f8 <Led_RGB_Limits_Temp+0x100>)
 800341a:	2200      	movs	r2, #0
 800341c:	0019      	movs	r1, r3
 800341e:	f001 fb50 	bl	8004ac2 <HAL_GPIO_WritePin>
	LED_GREEN_RGB_OFF;
 8003422:	2380      	movs	r3, #128	; 0x80
 8003424:	01db      	lsls	r3, r3, #7
 8003426:	4834      	ldr	r0, [pc, #208]	; (80034f8 <Led_RGB_Limits_Temp+0x100>)
 8003428:	2200      	movs	r2, #0
 800342a:	0019      	movs	r1, r3
 800342c:	f001 fb49 	bl	8004ac2 <HAL_GPIO_WritePin>

	if ((temp_dec>temp_li_green) && (temp_dec <= temp_ls_green)){
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f7fd fb13 	bl	8000a5c <__aeabi_i2f>
 8003436:	1c02      	adds	r2, r0, #0
 8003438:	4b30      	ldr	r3, [pc, #192]	; (80034fc <Led_RGB_Limits_Temp+0x104>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	1c19      	adds	r1, r3, #0
 800343e:	1c10      	adds	r0, r2, #0
 8003440:	f7fd f84e 	bl	80004e0 <__aeabi_fcmplt>
 8003444:	1e03      	subs	r3, r0, #0
 8003446:	d012      	beq.n	800346e <Led_RGB_Limits_Temp+0x76>
 8003448:	6838      	ldr	r0, [r7, #0]
 800344a:	f7fd fb07 	bl	8000a5c <__aeabi_i2f>
 800344e:	1c02      	adds	r2, r0, #0
 8003450:	4b2a      	ldr	r3, [pc, #168]	; (80034fc <Led_RGB_Limits_Temp+0x104>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	1c19      	adds	r1, r3, #0
 8003456:	1c10      	adds	r0, r2, #0
 8003458:	f7fd f860 	bl	800051c <__aeabi_fcmpge>
 800345c:	1e03      	subs	r3, r0, #0
 800345e:	d006      	beq.n	800346e <Led_RGB_Limits_Temp+0x76>
		LED_GREEN_RGB_ON;
 8003460:	2380      	movs	r3, #128	; 0x80
 8003462:	01db      	lsls	r3, r3, #7
 8003464:	4824      	ldr	r0, [pc, #144]	; (80034f8 <Led_RGB_Limits_Temp+0x100>)
 8003466:	2201      	movs	r2, #1
 8003468:	0019      	movs	r1, r3
 800346a:	f001 fb2a 	bl	8004ac2 <HAL_GPIO_WritePin>
	}

	if ((temp_dec>temp_li_blue) && (temp_dec <= temp_ls_blue)){
 800346e:	68b8      	ldr	r0, [r7, #8]
 8003470:	f7fd faf4 	bl	8000a5c <__aeabi_i2f>
 8003474:	1c02      	adds	r2, r0, #0
 8003476:	4b21      	ldr	r3, [pc, #132]	; (80034fc <Led_RGB_Limits_Temp+0x104>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	1c19      	adds	r1, r3, #0
 800347c:	1c10      	adds	r0, r2, #0
 800347e:	f7fd f82f 	bl	80004e0 <__aeabi_fcmplt>
 8003482:	1e03      	subs	r3, r0, #0
 8003484:	d012      	beq.n	80034ac <Led_RGB_Limits_Temp+0xb4>
 8003486:	69b8      	ldr	r0, [r7, #24]
 8003488:	f7fd fae8 	bl	8000a5c <__aeabi_i2f>
 800348c:	1c02      	adds	r2, r0, #0
 800348e:	4b1b      	ldr	r3, [pc, #108]	; (80034fc <Led_RGB_Limits_Temp+0x104>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	1c19      	adds	r1, r3, #0
 8003494:	1c10      	adds	r0, r2, #0
 8003496:	f7fd f841 	bl	800051c <__aeabi_fcmpge>
 800349a:	1e03      	subs	r3, r0, #0
 800349c:	d006      	beq.n	80034ac <Led_RGB_Limits_Temp+0xb4>
		LED_BLUE_RGB_ON;
 800349e:	2380      	movs	r3, #128	; 0x80
 80034a0:	019b      	lsls	r3, r3, #6
 80034a2:	4815      	ldr	r0, [pc, #84]	; (80034f8 <Led_RGB_Limits_Temp+0x100>)
 80034a4:	2201      	movs	r2, #1
 80034a6:	0019      	movs	r1, r3
 80034a8:	f001 fb0b 	bl	8004ac2 <HAL_GPIO_WritePin>
	}

	if ((temp_dec>temp_li_red) && (temp_dec <= temp_ls_red)){
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7fd fad5 	bl	8000a5c <__aeabi_i2f>
 80034b2:	1c02      	adds	r2, r0, #0
 80034b4:	4b11      	ldr	r3, [pc, #68]	; (80034fc <Led_RGB_Limits_Temp+0x104>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	1c19      	adds	r1, r3, #0
 80034ba:	1c10      	adds	r0, r2, #0
 80034bc:	f7fd f810 	bl	80004e0 <__aeabi_fcmplt>
 80034c0:	1e03      	subs	r3, r0, #0
 80034c2:	d100      	bne.n	80034c6 <Led_RGB_Limits_Temp+0xce>
		LED_RED_RGB_ON;
	}
}
 80034c4:	e013      	b.n	80034ee <Led_RGB_Limits_Temp+0xf6>
	if ((temp_dec>temp_li_red) && (temp_dec <= temp_ls_red)){
 80034c6:	69f8      	ldr	r0, [r7, #28]
 80034c8:	f7fd fac8 	bl	8000a5c <__aeabi_i2f>
 80034cc:	1c02      	adds	r2, r0, #0
 80034ce:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <Led_RGB_Limits_Temp+0x104>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	1c19      	adds	r1, r3, #0
 80034d4:	1c10      	adds	r0, r2, #0
 80034d6:	f7fd f821 	bl	800051c <__aeabi_fcmpge>
 80034da:	1e03      	subs	r3, r0, #0
 80034dc:	d100      	bne.n	80034e0 <Led_RGB_Limits_Temp+0xe8>
}
 80034de:	e006      	b.n	80034ee <Led_RGB_Limits_Temp+0xf6>
		LED_RED_RGB_ON;
 80034e0:	2380      	movs	r3, #128	; 0x80
 80034e2:	021b      	lsls	r3, r3, #8
 80034e4:	4804      	ldr	r0, [pc, #16]	; (80034f8 <Led_RGB_Limits_Temp+0x100>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	0019      	movs	r1, r3
 80034ea:	f001 faea 	bl	8004ac2 <HAL_GPIO_WritePin>
}
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	46bd      	mov	sp, r7
 80034f2:	b004      	add	sp, #16
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	48000400 	.word	0x48000400
 80034fc:	20000370 	.word	0x20000370

08003500 <delay>:
/****************************************FUNCIONES DEL TEMPERATURE SENSOR**********************************************************/


/****************************************Función de delay del temperature sensor******************************/
void delay (uint32_t us)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim6,0);  // set the counter value a 0
 8003508:	4b07      	ldr	r3, [pc, #28]	; (8003528 <delay+0x28>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2200      	movs	r2, #0
 800350e:	625a      	str	r2, [r3, #36]	; 0x24
		while (__HAL_TIM_GET_COUNTER(&htim6) < us);  // wait for the counter to reach the us input in the parameter
 8003510:	46c0      	nop			; (mov r8, r8)
 8003512:	4b05      	ldr	r3, [pc, #20]	; (8003528 <delay+0x28>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	429a      	cmp	r2, r3
 800351c:	d8f9      	bhi.n	8003512 <delay+0x12>
}
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	46c0      	nop			; (mov r8, r8)
 8003522:	46bd      	mov	sp, r7
 8003524:	b002      	add	sp, #8
 8003526:	bd80      	pop	{r7, pc}
 8003528:	2000029c 	.word	0x2000029c

0800352c <Set_Pin_Input>:




/*************************************Función de establecer pin como entrada del temperature sensor*********/
void Set_Pin_Input(GPIO_TypeDef *Port, uint32_t Pin){
 800352c:	b590      	push	{r4, r7, lr}
 800352e:	b089      	sub	sp, #36	; 0x24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003536:	240c      	movs	r4, #12
 8003538:	193b      	adds	r3, r7, r4
 800353a:	0018      	movs	r0, r3
 800353c:	2314      	movs	r3, #20
 800353e:	001a      	movs	r2, r3
 8003540:	2100      	movs	r1, #0
 8003542:	f003 fd4d 	bl	8006fe0 <memset>

	 /*Configure GPIO pin : DS18B20_Pin */
	  GPIO_InitStruct.Pin = Pin;
 8003546:	193b      	adds	r3, r7, r4
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800354c:	193b      	adds	r3, r7, r4
 800354e:	2200      	movs	r2, #0
 8003550:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003552:	193b      	adds	r3, r7, r4
 8003554:	2200      	movs	r2, #0
 8003556:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(Port, &GPIO_InitStruct);
 8003558:	193a      	adds	r2, r7, r4
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	0011      	movs	r1, r2
 800355e:	0018      	movs	r0, r3
 8003560:	f001 f922 	bl	80047a8 <HAL_GPIO_Init>
}
 8003564:	46c0      	nop			; (mov r8, r8)
 8003566:	46bd      	mov	sp, r7
 8003568:	b009      	add	sp, #36	; 0x24
 800356a:	bd90      	pop	{r4, r7, pc}

0800356c <Set_Pin_Output>:




/****************************************Función de establecer pin como salida del temperature sensor********/
void Set_Pin_Output(GPIO_TypeDef *Port, uint32_t Pin){
 800356c:	b590      	push	{r4, r7, lr}
 800356e:	b089      	sub	sp, #36	; 0x24
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003576:	240c      	movs	r4, #12
 8003578:	193b      	adds	r3, r7, r4
 800357a:	0018      	movs	r0, r3
 800357c:	2314      	movs	r3, #20
 800357e:	001a      	movs	r2, r3
 8003580:	2100      	movs	r1, #0
 8003582:	f003 fd2d 	bl	8006fe0 <memset>

	 /*Configure GPIO pin : DS18B20_Pin */
	  GPIO_InitStruct.Pin = Pin;
 8003586:	193b      	adds	r3, r7, r4
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800358c:	193b      	adds	r3, r7, r4
 800358e:	2211      	movs	r2, #17
 8003590:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003592:	193b      	adds	r3, r7, r4
 8003594:	2200      	movs	r2, #0
 8003596:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_Init(Port, &GPIO_InitStruct);
 8003598:	193a      	adds	r2, r7, r4
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	0011      	movs	r1, r2
 800359e:	0018      	movs	r0, r3
 80035a0:	f001 f902 	bl	80047a8 <HAL_GPIO_Init>
}
 80035a4:	46c0      	nop			; (mov r8, r8)
 80035a6:	46bd      	mov	sp, r7
 80035a8:	b009      	add	sp, #36	; 0x24
 80035aa:	bd90      	pop	{r4, r7, pc}

080035ac <DS18B20_Start>:



/****************************************Función de inicialización del temperature sensor******************/
uint8_t DS18B20_Start (void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80035b2:	1dfb      	adds	r3, r7, #7
 80035b4:	2200      	movs	r2, #0
 80035b6:	701a      	strb	r2, [r3, #0]

	Set_Pin_Output(DS18B20_GPIO_Port, DS18B20_Pin);   // set the pin as output
 80035b8:	4b18      	ldr	r3, [pc, #96]	; (800361c <DS18B20_Start+0x70>)
 80035ba:	2104      	movs	r1, #4
 80035bc:	0018      	movs	r0, r3
 80035be:	f7ff ffd5 	bl	800356c <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_GPIO_Port, DS18B20_Pin, 0);  // pull the pin low
 80035c2:	4b16      	ldr	r3, [pc, #88]	; (800361c <DS18B20_Start+0x70>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	2104      	movs	r1, #4
 80035c8:	0018      	movs	r0, r3
 80035ca:	f001 fa7a 	bl	8004ac2 <HAL_GPIO_WritePin>
	delay (480);   // delay according to datasheet (480)
 80035ce:	23f0      	movs	r3, #240	; 0xf0
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	0018      	movs	r0, r3
 80035d4:	f7ff ff94 	bl	8003500 <delay>

	Set_Pin_Input(DS18B20_GPIO_Port, DS18B20_Pin);    // set the pin as input
 80035d8:	4b10      	ldr	r3, [pc, #64]	; (800361c <DS18B20_Start+0x70>)
 80035da:	2104      	movs	r1, #4
 80035dc:	0018      	movs	r0, r3
 80035de:	f7ff ffa5 	bl	800352c <Set_Pin_Input>
	delay (80);    // delay according to datasheet (80)
 80035e2:	2050      	movs	r0, #80	; 0x50
 80035e4:	f7ff ff8c 	bl	8003500 <delay>

	if (!(HAL_GPIO_ReadPin (DS18B20_GPIO_Port, DS18B20_Pin))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 80035e8:	4b0c      	ldr	r3, [pc, #48]	; (800361c <DS18B20_Start+0x70>)
 80035ea:	2104      	movs	r1, #4
 80035ec:	0018      	movs	r0, r3
 80035ee:	f001 fa4b 	bl	8004a88 <HAL_GPIO_ReadPin>
 80035f2:	1e03      	subs	r3, r0, #0
 80035f4:	d103      	bne.n	80035fe <DS18B20_Start+0x52>
 80035f6:	1dfb      	adds	r3, r7, #7
 80035f8:	2201      	movs	r2, #1
 80035fa:	701a      	strb	r2, [r3, #0]
 80035fc:	e002      	b.n	8003604 <DS18B20_Start+0x58>
	else Response = -1;
 80035fe:	1dfb      	adds	r3, r7, #7
 8003600:	22ff      	movs	r2, #255	; 0xff
 8003602:	701a      	strb	r2, [r3, #0]

	delay (480); // 480 us delay totally. (400)
 8003604:	23f0      	movs	r3, #240	; 0xf0
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	0018      	movs	r0, r3
 800360a:	f7ff ff79 	bl	8003500 <delay>

	return Response;
 800360e:	1dfb      	adds	r3, r7, #7
 8003610:	781b      	ldrb	r3, [r3, #0]
}
 8003612:	0018      	movs	r0, r3
 8003614:	46bd      	mov	sp, r7
 8003616:	b002      	add	sp, #8
 8003618:	bd80      	pop	{r7, pc}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	48000400 	.word	0x48000400

08003620 <DS18B20_Write>:



/****************************************Función para escribir un byte en el temperature sensor**************/
void DS18B20_Write (uint8_t data)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	0002      	movs	r2, r0
 8003628:	1dfb      	adds	r3, r7, #7
 800362a:	701a      	strb	r2, [r3, #0]
	Set_Pin_Output(DS18B20_GPIO_Port, DS18B20_Pin);  // set as output
 800362c:	4b22      	ldr	r3, [pc, #136]	; (80036b8 <DS18B20_Write+0x98>)
 800362e:	2104      	movs	r1, #4
 8003630:	0018      	movs	r0, r3
 8003632:	f7ff ff9b 	bl	800356c <Set_Pin_Output>

	for (int i=0; i<8; i++)
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	e034      	b.n	80036a6 <DS18B20_Write+0x86>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 800363c:	1dfb      	adds	r3, r7, #7
 800363e:	781a      	ldrb	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	411a      	asrs	r2, r3
 8003644:	0013      	movs	r3, r2
 8003646:	2201      	movs	r2, #1
 8003648:	4013      	ands	r3, r2
 800364a:	d016      	beq.n	800367a <DS18B20_Write+0x5a>
		{
			// write 1

			Set_Pin_Output(DS18B20_GPIO_Port, DS18B20_Pin);  // set as output
 800364c:	4b1a      	ldr	r3, [pc, #104]	; (80036b8 <DS18B20_Write+0x98>)
 800364e:	2104      	movs	r1, #4
 8003650:	0018      	movs	r0, r3
 8003652:	f7ff ff8b 	bl	800356c <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_GPIO_Port, DS18B20_Pin, 0);  // pull the pin LOW
 8003656:	4b18      	ldr	r3, [pc, #96]	; (80036b8 <DS18B20_Write+0x98>)
 8003658:	2200      	movs	r2, #0
 800365a:	2104      	movs	r1, #4
 800365c:	0018      	movs	r0, r3
 800365e:	f001 fa30 	bl	8004ac2 <HAL_GPIO_WritePin>
			delay (1);  // wait for 1 us (1)
 8003662:	2001      	movs	r0, #1
 8003664:	f7ff ff4c 	bl	8003500 <delay>

			Set_Pin_Input(DS18B20_GPIO_Port, DS18B20_Pin);  // set as input
 8003668:	4b13      	ldr	r3, [pc, #76]	; (80036b8 <DS18B20_Write+0x98>)
 800366a:	2104      	movs	r1, #4
 800366c:	0018      	movs	r0, r3
 800366e:	f7ff ff5d 	bl	800352c <Set_Pin_Input>
			delay (50);  // wait for 60 us (50)
 8003672:	2032      	movs	r0, #50	; 0x32
 8003674:	f7ff ff44 	bl	8003500 <delay>
 8003678:	e012      	b.n	80036a0 <DS18B20_Write+0x80>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(DS18B20_GPIO_Port, DS18B20_Pin);
 800367a:	4b0f      	ldr	r3, [pc, #60]	; (80036b8 <DS18B20_Write+0x98>)
 800367c:	2104      	movs	r1, #4
 800367e:	0018      	movs	r0, r3
 8003680:	f7ff ff74 	bl	800356c <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_GPIO_Port, DS18B20_Pin, 0);  // pull the pin LOW
 8003684:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <DS18B20_Write+0x98>)
 8003686:	2200      	movs	r2, #0
 8003688:	2104      	movs	r1, #4
 800368a:	0018      	movs	r0, r3
 800368c:	f001 fa19 	bl	8004ac2 <HAL_GPIO_WritePin>
			delay (50);  // wait for 60 us (50)
 8003690:	2032      	movs	r0, #50	; 0x32
 8003692:	f7ff ff35 	bl	8003500 <delay>

			Set_Pin_Input(DS18B20_GPIO_Port, DS18B20_Pin);
 8003696:	4b08      	ldr	r3, [pc, #32]	; (80036b8 <DS18B20_Write+0x98>)
 8003698:	2104      	movs	r1, #4
 800369a:	0018      	movs	r0, r3
 800369c:	f7ff ff46 	bl	800352c <Set_Pin_Input>
	for (int i=0; i<8; i++)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	3301      	adds	r3, #1
 80036a4:	60fb      	str	r3, [r7, #12]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2b07      	cmp	r3, #7
 80036aa:	ddc7      	ble.n	800363c <DS18B20_Write+0x1c>
		}
	}
}
 80036ac:	46c0      	nop			; (mov r8, r8)
 80036ae:	46c0      	nop			; (mov r8, r8)
 80036b0:	46bd      	mov	sp, r7
 80036b2:	b004      	add	sp, #16
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	46c0      	nop			; (mov r8, r8)
 80036b8:	48000400 	.word	0x48000400

080036bc <DS18B20_Read>:



/****************************************Función para leer bits del temperature sensor**************************/
uint8_t DS18B20_Read (void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
	uint8_t value=0;
 80036c2:	1dfb      	adds	r3, r7, #7
 80036c4:	2200      	movs	r2, #0
 80036c6:	701a      	strb	r2, [r3, #0]

	Set_Pin_Input(DS18B20_GPIO_Port, DS18B20_Pin);
 80036c8:	4b1e      	ldr	r3, [pc, #120]	; (8003744 <DS18B20_Read+0x88>)
 80036ca:	2104      	movs	r1, #4
 80036cc:	0018      	movs	r0, r3
 80036ce:	f7ff ff2d 	bl	800352c <Set_Pin_Input>

	for (int i=0;i<8;i++)
 80036d2:	2300      	movs	r3, #0
 80036d4:	603b      	str	r3, [r7, #0]
 80036d6:	e02b      	b.n	8003730 <DS18B20_Read+0x74>
	{

		Set_Pin_Output(DS18B20_GPIO_Port, DS18B20_Pin);   // set as output
 80036d8:	4b1a      	ldr	r3, [pc, #104]	; (8003744 <DS18B20_Read+0x88>)
 80036da:	2104      	movs	r1, #4
 80036dc:	0018      	movs	r0, r3
 80036de:	f7ff ff45 	bl	800356c <Set_Pin_Output>

		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_2, 0);  // pull the data pin LOW
 80036e2:	4b18      	ldr	r3, [pc, #96]	; (8003744 <DS18B20_Read+0x88>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	2104      	movs	r1, #4
 80036e8:	0018      	movs	r0, r3
 80036ea:	f001 f9ea 	bl	8004ac2 <HAL_GPIO_WritePin>
		delay (2);  // wait for 2 us (2)
 80036ee:	2002      	movs	r0, #2
 80036f0:	f7ff ff06 	bl	8003500 <delay>

		Set_Pin_Input(DS18B20_GPIO_Port, DS18B20_Pin);  // set as input
 80036f4:	4b13      	ldr	r3, [pc, #76]	; (8003744 <DS18B20_Read+0x88>)
 80036f6:	2104      	movs	r1, #4
 80036f8:	0018      	movs	r0, r3
 80036fa:	f7ff ff17 	bl	800352c <Set_Pin_Input>
		//delay(17);
		if (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_2))  // if the pin is HIGH
 80036fe:	4b11      	ldr	r3, [pc, #68]	; (8003744 <DS18B20_Read+0x88>)
 8003700:	2104      	movs	r1, #4
 8003702:	0018      	movs	r0, r3
 8003704:	f001 f9c0 	bl	8004a88 <HAL_GPIO_ReadPin>
 8003708:	1e03      	subs	r3, r0, #0
 800370a:	d00b      	beq.n	8003724 <DS18B20_Read+0x68>
		{
			value |= 1<<i;  // read = 1
 800370c:	2201      	movs	r2, #1
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	409a      	lsls	r2, r3
 8003712:	0013      	movs	r3, r2
 8003714:	b25a      	sxtb	r2, r3
 8003716:	1dfb      	adds	r3, r7, #7
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	b25b      	sxtb	r3, r3
 800371c:	4313      	orrs	r3, r2
 800371e:	b25a      	sxtb	r2, r3
 8003720:	1dfb      	adds	r3, r7, #7
 8003722:	701a      	strb	r2, [r3, #0]
		}
		delay (60);  // wait for 60 us (60)
 8003724:	203c      	movs	r0, #60	; 0x3c
 8003726:	f7ff feeb 	bl	8003500 <delay>
	for (int i=0;i<8;i++)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	3301      	adds	r3, #1
 800372e:	603b      	str	r3, [r7, #0]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	2b07      	cmp	r3, #7
 8003734:	ddd0      	ble.n	80036d8 <DS18B20_Read+0x1c>
	}
	return value;
 8003736:	1dfb      	adds	r3, r7, #7
 8003738:	781b      	ldrb	r3, [r3, #0]
}
 800373a:	0018      	movs	r0, r3
 800373c:	46bd      	mov	sp, r7
 800373e:	b002      	add	sp, #8
 8003740:	bd80      	pop	{r7, pc}
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	48000400 	.word	0x48000400

08003748 <convert_temperature>:




/****************************************Función para convertir los bytes del temperature sensor********************/
float convert_temperature(uint8_t byte_1, uint8_t byte_2 ){
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	0002      	movs	r2, r0
 8003750:	1dfb      	adds	r3, r7, #7
 8003752:	701a      	strb	r2, [r3, #0]
 8003754:	1dbb      	adds	r3, r7, #6
 8003756:	1c0a      	adds	r2, r1, #0
 8003758:	701a      	strb	r2, [r3, #0]
	uint16_t tempval = byte_2 << 8 | byte_1;
 800375a:	1dbb      	adds	r3, r7, #6
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	021b      	lsls	r3, r3, #8
 8003760:	b21a      	sxth	r2, r3
 8003762:	1dfb      	adds	r3, r7, #7
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	b21b      	sxth	r3, r3
 8003768:	4313      	orrs	r3, r2
 800376a:	b21a      	sxth	r2, r3
 800376c:	210e      	movs	r1, #14
 800376e:	187b      	adds	r3, r7, r1
 8003770:	801a      	strh	r2, [r3, #0]
	float result_temp = (125.0 / 2048)*tempval;
 8003772:	187b      	adds	r3, r7, r1
 8003774:	881b      	ldrh	r3, [r3, #0]
 8003776:	0018      	movs	r0, r3
 8003778:	f7fe ff4e 	bl	8002618 <__aeabi_i2d>
 800377c:	2200      	movs	r2, #0
 800377e:	4b08      	ldr	r3, [pc, #32]	; (80037a0 <convert_temperature+0x58>)
 8003780:	f7fe f8f8 	bl	8001974 <__aeabi_dmul>
 8003784:	0002      	movs	r2, r0
 8003786:	000b      	movs	r3, r1
 8003788:	0010      	movs	r0, r2
 800378a:	0019      	movs	r1, r3
 800378c:	f7fe ffe2 	bl	8002754 <__aeabi_d2f>
 8003790:	1c03      	adds	r3, r0, #0
 8003792:	60bb      	str	r3, [r7, #8]

	return  result_temp;
 8003794:	68bb      	ldr	r3, [r7, #8]

}
 8003796:	1c18      	adds	r0, r3, #0
 8003798:	46bd      	mov	sp, r7
 800379a:	b004      	add	sp, #16
 800379c:	bd80      	pop	{r7, pc}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	3faf4000 	.word	0x3faf4000

080037a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037a8:	b672      	cpsid	i
}
 80037aa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037ac:	e7fe      	b.n	80037ac <Error_Handler+0x8>
	...

080037b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037b6:	4b0f      	ldr	r3, [pc, #60]	; (80037f4 <HAL_MspInit+0x44>)
 80037b8:	699a      	ldr	r2, [r3, #24]
 80037ba:	4b0e      	ldr	r3, [pc, #56]	; (80037f4 <HAL_MspInit+0x44>)
 80037bc:	2101      	movs	r1, #1
 80037be:	430a      	orrs	r2, r1
 80037c0:	619a      	str	r2, [r3, #24]
 80037c2:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <HAL_MspInit+0x44>)
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	2201      	movs	r2, #1
 80037c8:	4013      	ands	r3, r2
 80037ca:	607b      	str	r3, [r7, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037ce:	4b09      	ldr	r3, [pc, #36]	; (80037f4 <HAL_MspInit+0x44>)
 80037d0:	69da      	ldr	r2, [r3, #28]
 80037d2:	4b08      	ldr	r3, [pc, #32]	; (80037f4 <HAL_MspInit+0x44>)
 80037d4:	2180      	movs	r1, #128	; 0x80
 80037d6:	0549      	lsls	r1, r1, #21
 80037d8:	430a      	orrs	r2, r1
 80037da:	61da      	str	r2, [r3, #28]
 80037dc:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <HAL_MspInit+0x44>)
 80037de:	69da      	ldr	r2, [r3, #28]
 80037e0:	2380      	movs	r3, #128	; 0x80
 80037e2:	055b      	lsls	r3, r3, #21
 80037e4:	4013      	ands	r3, r2
 80037e6:	603b      	str	r3, [r7, #0]
 80037e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	46bd      	mov	sp, r7
 80037ee:	b002      	add	sp, #8
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	46c0      	nop			; (mov r8, r8)
 80037f4:	40021000 	.word	0x40021000

080037f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80037f8:	b590      	push	{r4, r7, lr}
 80037fa:	b08b      	sub	sp, #44	; 0x2c
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003800:	2414      	movs	r4, #20
 8003802:	193b      	adds	r3, r7, r4
 8003804:	0018      	movs	r0, r3
 8003806:	2314      	movs	r3, #20
 8003808:	001a      	movs	r2, r3
 800380a:	2100      	movs	r1, #0
 800380c:	f003 fbe8 	bl	8006fe0 <memset>
  if(hadc->Instance==ADC1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a19      	ldr	r2, [pc, #100]	; (800387c <HAL_ADC_MspInit+0x84>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d12b      	bne.n	8003872 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800381a:	4b19      	ldr	r3, [pc, #100]	; (8003880 <HAL_ADC_MspInit+0x88>)
 800381c:	699a      	ldr	r2, [r3, #24]
 800381e:	4b18      	ldr	r3, [pc, #96]	; (8003880 <HAL_ADC_MspInit+0x88>)
 8003820:	2180      	movs	r1, #128	; 0x80
 8003822:	0089      	lsls	r1, r1, #2
 8003824:	430a      	orrs	r2, r1
 8003826:	619a      	str	r2, [r3, #24]
 8003828:	4b15      	ldr	r3, [pc, #84]	; (8003880 <HAL_ADC_MspInit+0x88>)
 800382a:	699a      	ldr	r2, [r3, #24]
 800382c:	2380      	movs	r3, #128	; 0x80
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4013      	ands	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
 8003834:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003836:	4b12      	ldr	r3, [pc, #72]	; (8003880 <HAL_ADC_MspInit+0x88>)
 8003838:	695a      	ldr	r2, [r3, #20]
 800383a:	4b11      	ldr	r3, [pc, #68]	; (8003880 <HAL_ADC_MspInit+0x88>)
 800383c:	2180      	movs	r1, #128	; 0x80
 800383e:	0289      	lsls	r1, r1, #10
 8003840:	430a      	orrs	r2, r1
 8003842:	615a      	str	r2, [r3, #20]
 8003844:	4b0e      	ldr	r3, [pc, #56]	; (8003880 <HAL_ADC_MspInit+0x88>)
 8003846:	695a      	ldr	r2, [r3, #20]
 8003848:	2380      	movs	r3, #128	; 0x80
 800384a:	029b      	lsls	r3, r3, #10
 800384c:	4013      	ands	r3, r2
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = MEASURE_V_Pin;
 8003852:	193b      	adds	r3, r7, r4
 8003854:	2201      	movs	r2, #1
 8003856:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003858:	193b      	adds	r3, r7, r4
 800385a:	2203      	movs	r2, #3
 800385c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385e:	193b      	adds	r3, r7, r4
 8003860:	2200      	movs	r2, #0
 8003862:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(MEASURE_V_GPIO_Port, &GPIO_InitStruct);
 8003864:	193a      	adds	r2, r7, r4
 8003866:	2390      	movs	r3, #144	; 0x90
 8003868:	05db      	lsls	r3, r3, #23
 800386a:	0011      	movs	r1, r2
 800386c:	0018      	movs	r0, r3
 800386e:	f000 ff9b 	bl	80047a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	46bd      	mov	sp, r7
 8003876:	b00b      	add	sp, #44	; 0x2c
 8003878:	bd90      	pop	{r4, r7, pc}
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	40012400 	.word	0x40012400
 8003880:	40021000 	.word	0x40021000

08003884 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003884:	b590      	push	{r4, r7, lr}
 8003886:	b08b      	sub	sp, #44	; 0x2c
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800388c:	2414      	movs	r4, #20
 800388e:	193b      	adds	r3, r7, r4
 8003890:	0018      	movs	r0, r3
 8003892:	2314      	movs	r3, #20
 8003894:	001a      	movs	r2, r3
 8003896:	2100      	movs	r1, #0
 8003898:	f003 fba2 	bl	8006fe0 <memset>
  if(hspi->Instance==SPI1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a1c      	ldr	r2, [pc, #112]	; (8003914 <HAL_SPI_MspInit+0x90>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d132      	bne.n	800390c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038a6:	4b1c      	ldr	r3, [pc, #112]	; (8003918 <HAL_SPI_MspInit+0x94>)
 80038a8:	699a      	ldr	r2, [r3, #24]
 80038aa:	4b1b      	ldr	r3, [pc, #108]	; (8003918 <HAL_SPI_MspInit+0x94>)
 80038ac:	2180      	movs	r1, #128	; 0x80
 80038ae:	0149      	lsls	r1, r1, #5
 80038b0:	430a      	orrs	r2, r1
 80038b2:	619a      	str	r2, [r3, #24]
 80038b4:	4b18      	ldr	r3, [pc, #96]	; (8003918 <HAL_SPI_MspInit+0x94>)
 80038b6:	699a      	ldr	r2, [r3, #24]
 80038b8:	2380      	movs	r3, #128	; 0x80
 80038ba:	015b      	lsls	r3, r3, #5
 80038bc:	4013      	ands	r3, r2
 80038be:	613b      	str	r3, [r7, #16]
 80038c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038c2:	4b15      	ldr	r3, [pc, #84]	; (8003918 <HAL_SPI_MspInit+0x94>)
 80038c4:	695a      	ldr	r2, [r3, #20]
 80038c6:	4b14      	ldr	r3, [pc, #80]	; (8003918 <HAL_SPI_MspInit+0x94>)
 80038c8:	2180      	movs	r1, #128	; 0x80
 80038ca:	0289      	lsls	r1, r1, #10
 80038cc:	430a      	orrs	r2, r1
 80038ce:	615a      	str	r2, [r3, #20]
 80038d0:	4b11      	ldr	r3, [pc, #68]	; (8003918 <HAL_SPI_MspInit+0x94>)
 80038d2:	695a      	ldr	r2, [r3, #20]
 80038d4:	2380      	movs	r3, #128	; 0x80
 80038d6:	029b      	lsls	r3, r3, #10
 80038d8:	4013      	ands	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80038de:	0021      	movs	r1, r4
 80038e0:	187b      	adds	r3, r7, r1
 80038e2:	22e0      	movs	r2, #224	; 0xe0
 80038e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e6:	187b      	adds	r3, r7, r1
 80038e8:	2202      	movs	r2, #2
 80038ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ec:	187b      	adds	r3, r7, r1
 80038ee:	2200      	movs	r2, #0
 80038f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038f2:	187b      	adds	r3, r7, r1
 80038f4:	2203      	movs	r2, #3
 80038f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80038f8:	187b      	adds	r3, r7, r1
 80038fa:	2200      	movs	r2, #0
 80038fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038fe:	187a      	adds	r2, r7, r1
 8003900:	2390      	movs	r3, #144	; 0x90
 8003902:	05db      	lsls	r3, r3, #23
 8003904:	0011      	movs	r1, r2
 8003906:	0018      	movs	r0, r3
 8003908:	f000 ff4e 	bl	80047a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800390c:	46c0      	nop			; (mov r8, r8)
 800390e:	46bd      	mov	sp, r7
 8003910:	b00b      	add	sp, #44	; 0x2c
 8003912:	bd90      	pop	{r4, r7, pc}
 8003914:	40013000 	.word	0x40013000
 8003918:	40021000 	.word	0x40021000

0800391c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a0d      	ldr	r2, [pc, #52]	; (8003960 <HAL_TIM_Base_MspInit+0x44>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d113      	bne.n	8003956 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800392e:	4b0d      	ldr	r3, [pc, #52]	; (8003964 <HAL_TIM_Base_MspInit+0x48>)
 8003930:	69da      	ldr	r2, [r3, #28]
 8003932:	4b0c      	ldr	r3, [pc, #48]	; (8003964 <HAL_TIM_Base_MspInit+0x48>)
 8003934:	2110      	movs	r1, #16
 8003936:	430a      	orrs	r2, r1
 8003938:	61da      	str	r2, [r3, #28]
 800393a:	4b0a      	ldr	r3, [pc, #40]	; (8003964 <HAL_TIM_Base_MspInit+0x48>)
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	2210      	movs	r2, #16
 8003940:	4013      	ands	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003946:	2200      	movs	r2, #0
 8003948:	2100      	movs	r1, #0
 800394a:	2011      	movs	r0, #17
 800394c:	f000 fe7c 	bl	8004648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003950:	2011      	movs	r0, #17
 8003952:	f000 fe8e 	bl	8004672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003956:	46c0      	nop			; (mov r8, r8)
 8003958:	46bd      	mov	sp, r7
 800395a:	b004      	add	sp, #16
 800395c:	bd80      	pop	{r7, pc}
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	40001000 	.word	0x40001000
 8003964:	40021000 	.word	0x40021000

08003968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003968:	b590      	push	{r4, r7, lr}
 800396a:	b08b      	sub	sp, #44	; 0x2c
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003970:	2414      	movs	r4, #20
 8003972:	193b      	adds	r3, r7, r4
 8003974:	0018      	movs	r0, r3
 8003976:	2314      	movs	r3, #20
 8003978:	001a      	movs	r2, r3
 800397a:	2100      	movs	r1, #0
 800397c:	f003 fb30 	bl	8006fe0 <memset>
  if(huart->Instance==USART1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a21      	ldr	r2, [pc, #132]	; (8003a0c <HAL_UART_MspInit+0xa4>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d13b      	bne.n	8003a02 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800398a:	4b21      	ldr	r3, [pc, #132]	; (8003a10 <HAL_UART_MspInit+0xa8>)
 800398c:	699a      	ldr	r2, [r3, #24]
 800398e:	4b20      	ldr	r3, [pc, #128]	; (8003a10 <HAL_UART_MspInit+0xa8>)
 8003990:	2180      	movs	r1, #128	; 0x80
 8003992:	01c9      	lsls	r1, r1, #7
 8003994:	430a      	orrs	r2, r1
 8003996:	619a      	str	r2, [r3, #24]
 8003998:	4b1d      	ldr	r3, [pc, #116]	; (8003a10 <HAL_UART_MspInit+0xa8>)
 800399a:	699a      	ldr	r2, [r3, #24]
 800399c:	2380      	movs	r3, #128	; 0x80
 800399e:	01db      	lsls	r3, r3, #7
 80039a0:	4013      	ands	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]
 80039a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039a6:	4b1a      	ldr	r3, [pc, #104]	; (8003a10 <HAL_UART_MspInit+0xa8>)
 80039a8:	695a      	ldr	r2, [r3, #20]
 80039aa:	4b19      	ldr	r3, [pc, #100]	; (8003a10 <HAL_UART_MspInit+0xa8>)
 80039ac:	2180      	movs	r1, #128	; 0x80
 80039ae:	0289      	lsls	r1, r1, #10
 80039b0:	430a      	orrs	r2, r1
 80039b2:	615a      	str	r2, [r3, #20]
 80039b4:	4b16      	ldr	r3, [pc, #88]	; (8003a10 <HAL_UART_MspInit+0xa8>)
 80039b6:	695a      	ldr	r2, [r3, #20]
 80039b8:	2380      	movs	r3, #128	; 0x80
 80039ba:	029b      	lsls	r3, r3, #10
 80039bc:	4013      	ands	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80039c2:	193b      	adds	r3, r7, r4
 80039c4:	22c0      	movs	r2, #192	; 0xc0
 80039c6:	00d2      	lsls	r2, r2, #3
 80039c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ca:	0021      	movs	r1, r4
 80039cc:	187b      	adds	r3, r7, r1
 80039ce:	2202      	movs	r2, #2
 80039d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d2:	187b      	adds	r3, r7, r1
 80039d4:	2200      	movs	r2, #0
 80039d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039d8:	187b      	adds	r3, r7, r1
 80039da:	2203      	movs	r2, #3
 80039dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80039de:	187b      	adds	r3, r7, r1
 80039e0:	2201      	movs	r2, #1
 80039e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e4:	187a      	adds	r2, r7, r1
 80039e6:	2390      	movs	r3, #144	; 0x90
 80039e8:	05db      	lsls	r3, r3, #23
 80039ea:	0011      	movs	r1, r2
 80039ec:	0018      	movs	r0, r3
 80039ee:	f000 fedb 	bl	80047a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80039f2:	2200      	movs	r2, #0
 80039f4:	2100      	movs	r1, #0
 80039f6:	201b      	movs	r0, #27
 80039f8:	f000 fe26 	bl	8004648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80039fc:	201b      	movs	r0, #27
 80039fe:	f000 fe38 	bl	8004672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	46bd      	mov	sp, r7
 8003a06:	b00b      	add	sp, #44	; 0x2c
 8003a08:	bd90      	pop	{r4, r7, pc}
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	40013800 	.word	0x40013800
 8003a10:	40021000 	.word	0x40021000

08003a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a18:	e7fe      	b.n	8003a18 <NMI_Handler+0x4>

08003a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a1e:	e7fe      	b.n	8003a1e <HardFault_Handler+0x4>

08003a20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003a24:	46c0      	nop			; (mov r8, r8)
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a38:	f000 f968 	bl	8003d0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a3c:	46c0      	nop			; (mov r8, r8)
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TTP223_Pin);
 8003a46:	2002      	movs	r0, #2
 8003a48:	f001 f858 	bl	8004afc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003a4c:	46c0      	nop			; (mov r8, r8)
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_UP_Pin);
 8003a56:	2380      	movs	r3, #128	; 0x80
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f001 f84e 	bl	8004afc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_LOW_Pin);
 8003a60:	2380      	movs	r3, #128	; 0x80
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	0018      	movs	r0, r3
 8003a66:	f001 f849 	bl	8004afc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003a6a:	46c0      	nop			; (mov r8, r8)
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */


  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003a74:	4b03      	ldr	r3, [pc, #12]	; (8003a84 <TIM6_IRQHandler+0x14>)
 8003a76:	0018      	movs	r0, r3
 8003a78:	f001 fee2 	bl	8005840 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003a7c:	46c0      	nop			; (mov r8, r8)
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	46c0      	nop			; (mov r8, r8)
 8003a84:	2000029c 	.word	0x2000029c

08003a88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a8c:	4b03      	ldr	r3, [pc, #12]	; (8003a9c <USART1_IRQHandler+0x14>)
 8003a8e:	0018      	movs	r0, r3
 8003a90:	f002 f9f8 	bl	8005e84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a94:	46c0      	nop			; (mov r8, r8)
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	200002e4 	.word	0x200002e4

08003aa0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
	return 1;
 8003aa4:	2301      	movs	r3, #1
}
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <_kill>:

int _kill(int pid, int sig)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003ab6:	f003 fa69 	bl	8006f8c <__errno>
 8003aba:	0003      	movs	r3, r0
 8003abc:	2216      	movs	r2, #22
 8003abe:	601a      	str	r2, [r3, #0]
	return -1;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	425b      	negs	r3, r3
}
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	b002      	add	sp, #8
 8003aca:	bd80      	pop	{r7, pc}

08003acc <_exit>:

void _exit (int status)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	425a      	negs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	0011      	movs	r1, r2
 8003adc:	0018      	movs	r0, r3
 8003ade:	f7ff ffe5 	bl	8003aac <_kill>
	while (1) {}		/* Make sure we hang here */
 8003ae2:	e7fe      	b.n	8003ae2 <_exit+0x16>

08003ae4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003af0:	2300      	movs	r3, #0
 8003af2:	617b      	str	r3, [r7, #20]
 8003af4:	e00a      	b.n	8003b0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003af6:	e000      	b.n	8003afa <_read+0x16>
 8003af8:	bf00      	nop
 8003afa:	0001      	movs	r1, r0
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	1c5a      	adds	r2, r3, #1
 8003b00:	60ba      	str	r2, [r7, #8]
 8003b02:	b2ca      	uxtb	r2, r1
 8003b04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	dbf0      	blt.n	8003af6 <_read+0x12>
	}

return len;
 8003b14:	687b      	ldr	r3, [r7, #4]
}
 8003b16:	0018      	movs	r0, r3
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	b006      	add	sp, #24
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b086      	sub	sp, #24
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	60f8      	str	r0, [r7, #12]
 8003b26:	60b9      	str	r1, [r7, #8]
 8003b28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	617b      	str	r3, [r7, #20]
 8003b2e:	e009      	b.n	8003b44 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	1c5a      	adds	r2, r3, #1
 8003b34:	60ba      	str	r2, [r7, #8]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	0018      	movs	r0, r3
 8003b3a:	e000      	b.n	8003b3e <_write+0x20>
 8003b3c:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	3301      	adds	r3, #1
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	dbf1      	blt.n	8003b30 <_write+0x12>
	}
	return len;
 8003b4c:	687b      	ldr	r3, [r7, #4]
}
 8003b4e:	0018      	movs	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	b006      	add	sp, #24
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <_close>:

int _close(int file)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b082      	sub	sp, #8
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
	return -1;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	425b      	negs	r3, r3
}
 8003b62:	0018      	movs	r0, r3
 8003b64:	46bd      	mov	sp, r7
 8003b66:	b002      	add	sp, #8
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b082      	sub	sp, #8
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
 8003b72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	2280      	movs	r2, #128	; 0x80
 8003b78:	0192      	lsls	r2, r2, #6
 8003b7a:	605a      	str	r2, [r3, #4]
	return 0;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	0018      	movs	r0, r3
 8003b80:	46bd      	mov	sp, r7
 8003b82:	b002      	add	sp, #8
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <_isatty>:

int _isatty(int file)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b082      	sub	sp, #8
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
	return 1;
 8003b8e:	2301      	movs	r3, #1
}
 8003b90:	0018      	movs	r0, r3
 8003b92:	46bd      	mov	sp, r7
 8003b94:	b002      	add	sp, #8
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
	return 0;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	b004      	add	sp, #16
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bb8:	4a14      	ldr	r2, [pc, #80]	; (8003c0c <_sbrk+0x5c>)
 8003bba:	4b15      	ldr	r3, [pc, #84]	; (8003c10 <_sbrk+0x60>)
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003bc4:	4b13      	ldr	r3, [pc, #76]	; (8003c14 <_sbrk+0x64>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d102      	bne.n	8003bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003bcc:	4b11      	ldr	r3, [pc, #68]	; (8003c14 <_sbrk+0x64>)
 8003bce:	4a12      	ldr	r2, [pc, #72]	; (8003c18 <_sbrk+0x68>)
 8003bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bd2:	4b10      	ldr	r3, [pc, #64]	; (8003c14 <_sbrk+0x64>)
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	18d3      	adds	r3, r2, r3
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d207      	bcs.n	8003bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003be0:	f003 f9d4 	bl	8006f8c <__errno>
 8003be4:	0003      	movs	r3, r0
 8003be6:	220c      	movs	r2, #12
 8003be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bea:	2301      	movs	r3, #1
 8003bec:	425b      	negs	r3, r3
 8003bee:	e009      	b.n	8003c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bf0:	4b08      	ldr	r3, [pc, #32]	; (8003c14 <_sbrk+0x64>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bf6:	4b07      	ldr	r3, [pc, #28]	; (8003c14 <_sbrk+0x64>)
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	18d2      	adds	r2, r2, r3
 8003bfe:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <_sbrk+0x64>)
 8003c00:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003c02:	68fb      	ldr	r3, [r7, #12]
}
 8003c04:	0018      	movs	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	b006      	add	sp, #24
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	20002000 	.word	0x20002000
 8003c10:	00000400 	.word	0x00000400
 8003c14:	20000594 	.word	0x20000594
 8003c18:	200005b0 	.word	0x200005b0

08003c1c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003c20:	46c0      	nop			; (mov r8, r8)
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
	...

08003c28 <Reset_Handler>:
.word _ebss

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8003c28:	480d      	ldr	r0, [pc, #52]	; (8003c60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003c2a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c2c:	480d      	ldr	r0, [pc, #52]	; (8003c64 <LoopForever+0x6>)
  ldr r1, =_edata
 8003c2e:	490e      	ldr	r1, [pc, #56]	; (8003c68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003c30:	4a0e      	ldr	r2, [pc, #56]	; (8003c6c <LoopForever+0xe>)
  movs r3, #0
 8003c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c34:	e002      	b.n	8003c3c <LoopCopyDataInit>

08003c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c3a:	3304      	adds	r3, #4

08003c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c40:	d3f9      	bcc.n	8003c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c42:	4a0b      	ldr	r2, [pc, #44]	; (8003c70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003c44:	4c0b      	ldr	r4, [pc, #44]	; (8003c74 <LoopForever+0x16>)
  movs r3, #0
 8003c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c48:	e001      	b.n	8003c4e <LoopFillZerobss>

08003c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c4c:	3204      	adds	r2, #4

08003c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c50:	d3fb      	bcc.n	8003c4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003c52:	f7ff ffe3 	bl	8003c1c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003c56:	f003 f99f 	bl	8006f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003c5a:	f7fe fe21 	bl	80028a0 <main>

08003c5e <LoopForever>:

LoopForever:
    b LoopForever
 8003c5e:	e7fe      	b.n	8003c5e <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8003c60:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c68:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003c6c:	0800a51c 	.word	0x0800a51c
  ldr r2, =_sbss
 8003c70:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003c74:	200005ac 	.word	0x200005ac

08003c78 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003c78:	e7fe      	b.n	8003c78 <ADC1_IRQHandler>
	...

08003c7c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c80:	4b07      	ldr	r3, [pc, #28]	; (8003ca0 <HAL_Init+0x24>)
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <HAL_Init+0x24>)
 8003c86:	2110      	movs	r1, #16
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003c8c:	2003      	movs	r0, #3
 8003c8e:	f000 f809 	bl	8003ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c92:	f7ff fd8d 	bl	80037b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	0018      	movs	r0, r3
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	40022000 	.word	0x40022000

08003ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ca4:	b590      	push	{r4, r7, lr}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003cac:	4b14      	ldr	r3, [pc, #80]	; (8003d00 <HAL_InitTick+0x5c>)
 8003cae:	681c      	ldr	r4, [r3, #0]
 8003cb0:	4b14      	ldr	r3, [pc, #80]	; (8003d04 <HAL_InitTick+0x60>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	0019      	movs	r1, r3
 8003cb6:	23fa      	movs	r3, #250	; 0xfa
 8003cb8:	0098      	lsls	r0, r3, #2
 8003cba:	f7fc fa4b 	bl	8000154 <__udivsi3>
 8003cbe:	0003      	movs	r3, r0
 8003cc0:	0019      	movs	r1, r3
 8003cc2:	0020      	movs	r0, r4
 8003cc4:	f7fc fa46 	bl	8000154 <__udivsi3>
 8003cc8:	0003      	movs	r3, r0
 8003cca:	0018      	movs	r0, r3
 8003ccc:	f000 fce1 	bl	8004692 <HAL_SYSTICK_Config>
 8003cd0:	1e03      	subs	r3, r0, #0
 8003cd2:	d001      	beq.n	8003cd8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e00f      	b.n	8003cf8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b03      	cmp	r3, #3
 8003cdc:	d80b      	bhi.n	8003cf6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	425b      	negs	r3, r3
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	f000 fcae 	bl	8004648 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cec:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <HAL_InitTick+0x64>)
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	e000      	b.n	8003cf8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
}
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	b003      	add	sp, #12
 8003cfe:	bd90      	pop	{r4, r7, pc}
 8003d00:	20000000 	.word	0x20000000
 8003d04:	20000008 	.word	0x20000008
 8003d08:	20000004 	.word	0x20000004

08003d0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d10:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <HAL_IncTick+0x1c>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	001a      	movs	r2, r3
 8003d16:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <HAL_IncTick+0x20>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	18d2      	adds	r2, r2, r3
 8003d1c:	4b03      	ldr	r3, [pc, #12]	; (8003d2c <HAL_IncTick+0x20>)
 8003d1e:	601a      	str	r2, [r3, #0]
}
 8003d20:	46c0      	nop			; (mov r8, r8)
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	20000008 	.word	0x20000008
 8003d2c:	20000598 	.word	0x20000598

08003d30 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  return uwTick;
 8003d34:	4b02      	ldr	r3, [pc, #8]	; (8003d40 <HAL_GetTick+0x10>)
 8003d36:	681b      	ldr	r3, [r3, #0]
}
 8003d38:	0018      	movs	r0, r3
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	20000598 	.word	0x20000598

08003d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d4c:	f7ff fff0 	bl	8003d30 <HAL_GetTick>
 8003d50:	0003      	movs	r3, r0
 8003d52:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	d005      	beq.n	8003d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d5e:	4b0a      	ldr	r3, [pc, #40]	; (8003d88 <HAL_Delay+0x44>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	001a      	movs	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	189b      	adds	r3, r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	f7ff ffe0 	bl	8003d30 <HAL_GetTick>
 8003d70:	0002      	movs	r2, r0
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d8f7      	bhi.n	8003d6c <HAL_Delay+0x28>
  {
  }
}
 8003d7c:	46c0      	nop			; (mov r8, r8)
 8003d7e:	46c0      	nop			; (mov r8, r8)
 8003d80:	46bd      	mov	sp, r7
 8003d82:	b004      	add	sp, #16
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	46c0      	nop			; (mov r8, r8)
 8003d88:	20000008 	.word	0x20000008

08003d8c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d94:	230f      	movs	r3, #15
 8003d96:	18fb      	adds	r3, r7, r3
 8003d98:	2200      	movs	r2, #0
 8003d9a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e125      	b.n	8003ff6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10a      	bne.n	8003dc8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2234      	movs	r2, #52	; 0x34
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	f7ff fd18 	bl	80037f8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dcc:	2210      	movs	r2, #16
 8003dce:	4013      	ands	r3, r2
 8003dd0:	d000      	beq.n	8003dd4 <HAL_ADC_Init+0x48>
 8003dd2:	e103      	b.n	8003fdc <HAL_ADC_Init+0x250>
 8003dd4:	230f      	movs	r3, #15
 8003dd6:	18fb      	adds	r3, r7, r3
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d000      	beq.n	8003de0 <HAL_ADC_Init+0x54>
 8003dde:	e0fd      	b.n	8003fdc <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	2204      	movs	r2, #4
 8003de8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8003dea:	d000      	beq.n	8003dee <HAL_ADC_Init+0x62>
 8003dec:	e0f6      	b.n	8003fdc <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df2:	4a83      	ldr	r2, [pc, #524]	; (8004000 <HAL_ADC_Init+0x274>)
 8003df4:	4013      	ands	r3, r2
 8003df6:	2202      	movs	r2, #2
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	2203      	movs	r2, #3
 8003e06:	4013      	ands	r3, r2
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d112      	bne.n	8003e32 <HAL_ADC_Init+0xa6>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2201      	movs	r2, #1
 8003e14:	4013      	ands	r3, r2
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d009      	beq.n	8003e2e <HAL_ADC_Init+0xa2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68da      	ldr	r2, [r3, #12]
 8003e20:	2380      	movs	r3, #128	; 0x80
 8003e22:	021b      	lsls	r3, r3, #8
 8003e24:	401a      	ands	r2, r3
 8003e26:	2380      	movs	r3, #128	; 0x80
 8003e28:	021b      	lsls	r3, r3, #8
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d101      	bne.n	8003e32 <HAL_ADC_Init+0xa6>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e000      	b.n	8003e34 <HAL_ADC_Init+0xa8>
 8003e32:	2300      	movs	r3, #0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d116      	bne.n	8003e66 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	2218      	movs	r2, #24
 8003e40:	4393      	bics	r3, r2
 8003e42:	0019      	movs	r1, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	0899      	lsrs	r1, r3, #2
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68da      	ldr	r2, [r3, #12]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4964      	ldr	r1, [pc, #400]	; (8004004 <HAL_ADC_Init+0x278>)
 8003e72:	400a      	ands	r2, r1
 8003e74:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	7e1b      	ldrb	r3, [r3, #24]
 8003e7a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	7e5b      	ldrb	r3, [r3, #25]
 8003e80:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e82:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	7e9b      	ldrb	r3, [r3, #26]
 8003e88:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003e8a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d002      	beq.n	8003e9a <HAL_ADC_Init+0x10e>
 8003e94:	2380      	movs	r3, #128	; 0x80
 8003e96:	015b      	lsls	r3, r3, #5
 8003e98:	e000      	b.n	8003e9c <HAL_ADC_Init+0x110>
 8003e9a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003e9c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003ea2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d101      	bne.n	8003eb0 <HAL_ADC_Init+0x124>
 8003eac:	2304      	movs	r3, #4
 8003eae:	e000      	b.n	8003eb2 <HAL_ADC_Init+0x126>
 8003eb0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8003eb2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2124      	movs	r1, #36	; 0x24
 8003eb8:	5c5b      	ldrb	r3, [r3, r1]
 8003eba:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003ebc:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	7edb      	ldrb	r3, [r3, #27]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d115      	bne.n	8003ef8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	7e9b      	ldrb	r3, [r3, #26]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d105      	bne.n	8003ee0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2280      	movs	r2, #128	; 0x80
 8003ed8:	0252      	lsls	r2, r2, #9
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60bb      	str	r3, [r7, #8]
 8003ede:	e00b      	b.n	8003ef8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	69da      	ldr	r2, [r3, #28]
 8003efc:	23c2      	movs	r3, #194	; 0xc2
 8003efe:	33ff      	adds	r3, #255	; 0xff
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d007      	beq.n	8003f14 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68d9      	ldr	r1, [r3, #12]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f28:	2380      	movs	r3, #128	; 0x80
 8003f2a:	055b      	lsls	r3, r3, #21
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d01b      	beq.n	8003f68 <HAL_ADC_Init+0x1dc>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d017      	beq.n	8003f68 <HAL_ADC_Init+0x1dc>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d013      	beq.n	8003f68 <HAL_ADC_Init+0x1dc>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f44:	2b03      	cmp	r3, #3
 8003f46:	d00f      	beq.n	8003f68 <HAL_ADC_Init+0x1dc>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4c:	2b04      	cmp	r3, #4
 8003f4e:	d00b      	beq.n	8003f68 <HAL_ADC_Init+0x1dc>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f54:	2b05      	cmp	r3, #5
 8003f56:	d007      	beq.n	8003f68 <HAL_ADC_Init+0x1dc>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5c:	2b06      	cmp	r3, #6
 8003f5e:	d003      	beq.n	8003f68 <HAL_ADC_Init+0x1dc>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f64:	2b07      	cmp	r3, #7
 8003f66:	d112      	bne.n	8003f8e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695a      	ldr	r2, [r3, #20]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2107      	movs	r1, #7
 8003f74:	438a      	bics	r2, r1
 8003f76:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6959      	ldr	r1, [r3, #20]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f82:	2207      	movs	r2, #7
 8003f84:	401a      	ands	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	4a1c      	ldr	r2, [pc, #112]	; (8004008 <HAL_ADC_Init+0x27c>)
 8003f96:	4013      	ands	r3, r2
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d10b      	bne.n	8003fb6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa8:	2203      	movs	r2, #3
 8003faa:	4393      	bics	r3, r2
 8003fac:	2201      	movs	r2, #1
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003fb4:	e01c      	b.n	8003ff0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fba:	2212      	movs	r2, #18
 8003fbc:	4393      	bics	r3, r2
 8003fbe:	2210      	movs	r2, #16
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fca:	2201      	movs	r2, #1
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003fd2:	230f      	movs	r3, #15
 8003fd4:	18fb      	adds	r3, r7, r3
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003fda:	e009      	b.n	8003ff0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe0:	2210      	movs	r2, #16
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003fe8:	230f      	movs	r3, #15
 8003fea:	18fb      	adds	r3, r7, r3
 8003fec:	2201      	movs	r2, #1
 8003fee:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003ff0:	230f      	movs	r3, #15
 8003ff2:	18fb      	adds	r3, r7, r3
 8003ff4:	781b      	ldrb	r3, [r3, #0]
}
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	b004      	add	sp, #16
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	46c0      	nop			; (mov r8, r8)
 8004000:	fffffefd 	.word	0xfffffefd
 8004004:	fffe0219 	.word	0xfffe0219
 8004008:	833fffe7 	.word	0x833fffe7

0800400c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800400c:	b590      	push	{r4, r7, lr}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004014:	230f      	movs	r3, #15
 8004016:	18fb      	adds	r3, r7, r3
 8004018:	2200      	movs	r2, #0
 800401a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	2204      	movs	r2, #4
 8004024:	4013      	ands	r3, r2
 8004026:	d138      	bne.n	800409a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2234      	movs	r2, #52	; 0x34
 800402c:	5c9b      	ldrb	r3, [r3, r2]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d101      	bne.n	8004036 <HAL_ADC_Start+0x2a>
 8004032:	2302      	movs	r3, #2
 8004034:	e038      	b.n	80040a8 <HAL_ADC_Start+0x9c>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2234      	movs	r2, #52	; 0x34
 800403a:	2101      	movs	r1, #1
 800403c:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	7e5b      	ldrb	r3, [r3, #25]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d007      	beq.n	8004056 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8004046:	230f      	movs	r3, #15
 8004048:	18fc      	adds	r4, r7, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	0018      	movs	r0, r3
 800404e:	f000 f9cb 	bl	80043e8 <ADC_Enable>
 8004052:	0003      	movs	r3, r0
 8004054:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004056:	230f      	movs	r3, #15
 8004058:	18fb      	adds	r3, r7, r3
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d120      	bne.n	80040a2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004064:	4a12      	ldr	r2, [pc, #72]	; (80040b0 <HAL_ADC_Start+0xa4>)
 8004066:	4013      	ands	r3, r2
 8004068:	2280      	movs	r2, #128	; 0x80
 800406a:	0052      	lsls	r2, r2, #1
 800406c:	431a      	orrs	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2234      	movs	r2, #52	; 0x34
 800407c:	2100      	movs	r1, #0
 800407e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	221c      	movs	r2, #28
 8004086:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689a      	ldr	r2, [r3, #8]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2104      	movs	r1, #4
 8004094:	430a      	orrs	r2, r1
 8004096:	609a      	str	r2, [r3, #8]
 8004098:	e003      	b.n	80040a2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800409a:	230f      	movs	r3, #15
 800409c:	18fb      	adds	r3, r7, r3
 800409e:	2202      	movs	r2, #2
 80040a0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80040a2:	230f      	movs	r3, #15
 80040a4:	18fb      	adds	r3, r7, r3
 80040a6:	781b      	ldrb	r3, [r3, #0]
}
 80040a8:	0018      	movs	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	b005      	add	sp, #20
 80040ae:	bd90      	pop	{r4, r7, pc}
 80040b0:	fffff0fe 	.word	0xfffff0fe

080040b4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	2b08      	cmp	r3, #8
 80040c4:	d102      	bne.n	80040cc <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80040c6:	2308      	movs	r3, #8
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	e014      	b.n	80040f6 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	2201      	movs	r2, #1
 80040d4:	4013      	ands	r3, r2
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d10b      	bne.n	80040f2 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040de:	2220      	movs	r2, #32
 80040e0:	431a      	orrs	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2234      	movs	r2, #52	; 0x34
 80040ea:	2100      	movs	r1, #0
 80040ec:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e071      	b.n	80041d6 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80040f2:	230c      	movs	r3, #12
 80040f4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80040f6:	f7ff fe1b 	bl	8003d30 <HAL_GetTick>
 80040fa:	0003      	movs	r3, r0
 80040fc:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80040fe:	e01f      	b.n	8004140 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	3301      	adds	r3, #1
 8004104:	d01c      	beq.n	8004140 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d007      	beq.n	800411c <HAL_ADC_PollForConversion+0x68>
 800410c:	f7ff fe10 	bl	8003d30 <HAL_GetTick>
 8004110:	0002      	movs	r2, r0
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	429a      	cmp	r2, r3
 800411a:	d211      	bcs.n	8004140 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	4013      	ands	r3, r2
 8004126:	d10b      	bne.n	8004140 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412c:	2204      	movs	r2, #4
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2234      	movs	r2, #52	; 0x34
 8004138:	2100      	movs	r1, #0
 800413a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e04a      	b.n	80041d6 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	4013      	ands	r3, r2
 800414a:	d0d9      	beq.n	8004100 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004150:	2280      	movs	r2, #128	; 0x80
 8004152:	0092      	lsls	r2, r2, #2
 8004154:	431a      	orrs	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	23c0      	movs	r3, #192	; 0xc0
 8004162:	011b      	lsls	r3, r3, #4
 8004164:	4013      	ands	r3, r2
 8004166:	d12d      	bne.n	80041c4 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800416c:	2b00      	cmp	r3, #0
 800416e:	d129      	bne.n	80041c4 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2208      	movs	r2, #8
 8004178:	4013      	ands	r3, r2
 800417a:	2b08      	cmp	r3, #8
 800417c:	d122      	bne.n	80041c4 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	2204      	movs	r2, #4
 8004186:	4013      	ands	r3, r2
 8004188:	d110      	bne.n	80041ac <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	210c      	movs	r1, #12
 8004196:	438a      	bics	r2, r1
 8004198:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419e:	4a10      	ldr	r2, [pc, #64]	; (80041e0 <HAL_ADC_PollForConversion+0x12c>)
 80041a0:	4013      	ands	r3, r2
 80041a2:	2201      	movs	r2, #1
 80041a4:	431a      	orrs	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	639a      	str	r2, [r3, #56]	; 0x38
 80041aa:	e00b      	b.n	80041c4 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b0:	2220      	movs	r2, #32
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041bc:	2201      	movs	r2, #1
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	7e1b      	ldrb	r3, [r3, #24]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d103      	bne.n	80041d4 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	220c      	movs	r2, #12
 80041d2:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	0018      	movs	r0, r3
 80041d8:	46bd      	mov	sp, r7
 80041da:	b004      	add	sp, #16
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	46c0      	nop			; (mov r8, r8)
 80041e0:	fffffefe 	.word	0xfffffefe

080041e4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80041f2:	0018      	movs	r0, r3
 80041f4:	46bd      	mov	sp, r7
 80041f6:	b002      	add	sp, #8
 80041f8:	bd80      	pop	{r7, pc}
	...

080041fc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004206:	230f      	movs	r3, #15
 8004208:	18fb      	adds	r3, r7, r3
 800420a:	2200      	movs	r2, #0
 800420c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800420e:	2300      	movs	r3, #0
 8004210:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004216:	2380      	movs	r3, #128	; 0x80
 8004218:	055b      	lsls	r3, r3, #21
 800421a:	429a      	cmp	r2, r3
 800421c:	d011      	beq.n	8004242 <HAL_ADC_ConfigChannel+0x46>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004222:	2b01      	cmp	r3, #1
 8004224:	d00d      	beq.n	8004242 <HAL_ADC_ConfigChannel+0x46>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422a:	2b02      	cmp	r3, #2
 800422c:	d009      	beq.n	8004242 <HAL_ADC_ConfigChannel+0x46>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004232:	2b03      	cmp	r3, #3
 8004234:	d005      	beq.n	8004242 <HAL_ADC_ConfigChannel+0x46>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423a:	2b04      	cmp	r3, #4
 800423c:	d001      	beq.n	8004242 <HAL_ADC_ConfigChannel+0x46>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2234      	movs	r2, #52	; 0x34
 8004246:	5c9b      	ldrb	r3, [r3, r2]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_ADC_ConfigChannel+0x54>
 800424c:	2302      	movs	r3, #2
 800424e:	e0bb      	b.n	80043c8 <HAL_ADC_ConfigChannel+0x1cc>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2234      	movs	r2, #52	; 0x34
 8004254:	2101      	movs	r1, #1
 8004256:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	2204      	movs	r2, #4
 8004260:	4013      	ands	r3, r2
 8004262:	d000      	beq.n	8004266 <HAL_ADC_ConfigChannel+0x6a>
 8004264:	e09f      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	4a59      	ldr	r2, [pc, #356]	; (80043d0 <HAL_ADC_ConfigChannel+0x1d4>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d100      	bne.n	8004272 <HAL_ADC_ConfigChannel+0x76>
 8004270:	e077      	b.n	8004362 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2201      	movs	r2, #1
 800427e:	409a      	lsls	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	430a      	orrs	r2, r1
 8004286:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800428c:	2380      	movs	r3, #128	; 0x80
 800428e:	055b      	lsls	r3, r3, #21
 8004290:	429a      	cmp	r2, r3
 8004292:	d037      	beq.n	8004304 <HAL_ADC_ConfigChannel+0x108>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004298:	2b01      	cmp	r3, #1
 800429a:	d033      	beq.n	8004304 <HAL_ADC_ConfigChannel+0x108>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d02f      	beq.n	8004304 <HAL_ADC_ConfigChannel+0x108>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a8:	2b03      	cmp	r3, #3
 80042aa:	d02b      	beq.n	8004304 <HAL_ADC_ConfigChannel+0x108>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b0:	2b04      	cmp	r3, #4
 80042b2:	d027      	beq.n	8004304 <HAL_ADC_ConfigChannel+0x108>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b8:	2b05      	cmp	r3, #5
 80042ba:	d023      	beq.n	8004304 <HAL_ADC_ConfigChannel+0x108>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	2b06      	cmp	r3, #6
 80042c2:	d01f      	beq.n	8004304 <HAL_ADC_ConfigChannel+0x108>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c8:	2b07      	cmp	r3, #7
 80042ca:	d01b      	beq.n	8004304 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	689a      	ldr	r2, [r3, #8]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	2107      	movs	r1, #7
 80042d8:	400b      	ands	r3, r1
 80042da:	429a      	cmp	r2, r3
 80042dc:	d012      	beq.n	8004304 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	695a      	ldr	r2, [r3, #20]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2107      	movs	r1, #7
 80042ea:	438a      	bics	r2, r1
 80042ec:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6959      	ldr	r1, [r3, #20]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	2207      	movs	r2, #7
 80042fa:	401a      	ands	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2b10      	cmp	r3, #16
 800430a:	d003      	beq.n	8004314 <HAL_ADC_ConfigChannel+0x118>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b11      	cmp	r3, #17
 8004312:	d152      	bne.n	80043ba <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004314:	4b2f      	ldr	r3, [pc, #188]	; (80043d4 <HAL_ADC_ConfigChannel+0x1d8>)
 8004316:	6819      	ldr	r1, [r3, #0]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b10      	cmp	r3, #16
 800431e:	d102      	bne.n	8004326 <HAL_ADC_ConfigChannel+0x12a>
 8004320:	2380      	movs	r3, #128	; 0x80
 8004322:	041b      	lsls	r3, r3, #16
 8004324:	e001      	b.n	800432a <HAL_ADC_ConfigChannel+0x12e>
 8004326:	2380      	movs	r3, #128	; 0x80
 8004328:	03db      	lsls	r3, r3, #15
 800432a:	4a2a      	ldr	r2, [pc, #168]	; (80043d4 <HAL_ADC_ConfigChannel+0x1d8>)
 800432c:	430b      	orrs	r3, r1
 800432e:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b10      	cmp	r3, #16
 8004336:	d140      	bne.n	80043ba <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004338:	4b27      	ldr	r3, [pc, #156]	; (80043d8 <HAL_ADC_ConfigChannel+0x1dc>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4927      	ldr	r1, [pc, #156]	; (80043dc <HAL_ADC_ConfigChannel+0x1e0>)
 800433e:	0018      	movs	r0, r3
 8004340:	f7fb ff08 	bl	8000154 <__udivsi3>
 8004344:	0003      	movs	r3, r0
 8004346:	001a      	movs	r2, r3
 8004348:	0013      	movs	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	189b      	adds	r3, r3, r2
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004352:	e002      	b.n	800435a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	3b01      	subs	r3, #1
 8004358:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1f9      	bne.n	8004354 <HAL_ADC_ConfigChannel+0x158>
 8004360:	e02b      	b.n	80043ba <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2101      	movs	r1, #1
 800436e:	4099      	lsls	r1, r3
 8004370:	000b      	movs	r3, r1
 8004372:	43d9      	mvns	r1, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	400a      	ands	r2, r1
 800437a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b10      	cmp	r3, #16
 8004382:	d003      	beq.n	800438c <HAL_ADC_ConfigChannel+0x190>
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b11      	cmp	r3, #17
 800438a:	d116      	bne.n	80043ba <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800438c:	4b11      	ldr	r3, [pc, #68]	; (80043d4 <HAL_ADC_ConfigChannel+0x1d8>)
 800438e:	6819      	ldr	r1, [r3, #0]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b10      	cmp	r3, #16
 8004396:	d101      	bne.n	800439c <HAL_ADC_ConfigChannel+0x1a0>
 8004398:	4a11      	ldr	r2, [pc, #68]	; (80043e0 <HAL_ADC_ConfigChannel+0x1e4>)
 800439a:	e000      	b.n	800439e <HAL_ADC_ConfigChannel+0x1a2>
 800439c:	4a11      	ldr	r2, [pc, #68]	; (80043e4 <HAL_ADC_ConfigChannel+0x1e8>)
 800439e:	4b0d      	ldr	r3, [pc, #52]	; (80043d4 <HAL_ADC_ConfigChannel+0x1d8>)
 80043a0:	400a      	ands	r2, r1
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	e009      	b.n	80043ba <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043aa:	2220      	movs	r2, #32
 80043ac:	431a      	orrs	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80043b2:	230f      	movs	r3, #15
 80043b4:	18fb      	adds	r3, r7, r3
 80043b6:	2201      	movs	r2, #1
 80043b8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2234      	movs	r2, #52	; 0x34
 80043be:	2100      	movs	r1, #0
 80043c0:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80043c2:	230f      	movs	r3, #15
 80043c4:	18fb      	adds	r3, r7, r3
 80043c6:	781b      	ldrb	r3, [r3, #0]
}
 80043c8:	0018      	movs	r0, r3
 80043ca:	46bd      	mov	sp, r7
 80043cc:	b004      	add	sp, #16
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	00001001 	.word	0x00001001
 80043d4:	40012708 	.word	0x40012708
 80043d8:	20000000 	.word	0x20000000
 80043dc:	000f4240 	.word	0x000f4240
 80043e0:	ff7fffff 	.word	0xff7fffff
 80043e4:	ffbfffff 	.word	0xffbfffff

080043e8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	2203      	movs	r2, #3
 8004400:	4013      	ands	r3, r2
 8004402:	2b01      	cmp	r3, #1
 8004404:	d112      	bne.n	800442c <ADC_Enable+0x44>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2201      	movs	r2, #1
 800440e:	4013      	ands	r3, r2
 8004410:	2b01      	cmp	r3, #1
 8004412:	d009      	beq.n	8004428 <ADC_Enable+0x40>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	2380      	movs	r3, #128	; 0x80
 800441c:	021b      	lsls	r3, r3, #8
 800441e:	401a      	ands	r2, r3
 8004420:	2380      	movs	r3, #128	; 0x80
 8004422:	021b      	lsls	r3, r3, #8
 8004424:	429a      	cmp	r2, r3
 8004426:	d101      	bne.n	800442c <ADC_Enable+0x44>
 8004428:	2301      	movs	r3, #1
 800442a:	e000      	b.n	800442e <ADC_Enable+0x46>
 800442c:	2300      	movs	r3, #0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d152      	bne.n	80044d8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	4a2a      	ldr	r2, [pc, #168]	; (80044e4 <ADC_Enable+0xfc>)
 800443a:	4013      	ands	r3, r2
 800443c:	d00d      	beq.n	800445a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004442:	2210      	movs	r2, #16
 8004444:	431a      	orrs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444e:	2201      	movs	r2, #1
 8004450:	431a      	orrs	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e03f      	b.n	80044da <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2101      	movs	r1, #1
 8004466:	430a      	orrs	r2, r1
 8004468:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800446a:	4b1f      	ldr	r3, [pc, #124]	; (80044e8 <ADC_Enable+0x100>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	491f      	ldr	r1, [pc, #124]	; (80044ec <ADC_Enable+0x104>)
 8004470:	0018      	movs	r0, r3
 8004472:	f7fb fe6f 	bl	8000154 <__udivsi3>
 8004476:	0003      	movs	r3, r0
 8004478:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800447a:	e002      	b.n	8004482 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	3b01      	subs	r3, #1
 8004480:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1f9      	bne.n	800447c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004488:	f7ff fc52 	bl	8003d30 <HAL_GetTick>
 800448c:	0003      	movs	r3, r0
 800448e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004490:	e01b      	b.n	80044ca <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004492:	f7ff fc4d 	bl	8003d30 <HAL_GetTick>
 8004496:	0002      	movs	r2, r0
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d914      	bls.n	80044ca <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2201      	movs	r2, #1
 80044a8:	4013      	ands	r3, r2
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d00d      	beq.n	80044ca <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b2:	2210      	movs	r2, #16
 80044b4:	431a      	orrs	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044be:	2201      	movs	r2, #1
 80044c0:	431a      	orrs	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e007      	b.n	80044da <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2201      	movs	r2, #1
 80044d2:	4013      	ands	r3, r2
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d1dc      	bne.n	8004492 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	0018      	movs	r0, r3
 80044dc:	46bd      	mov	sp, r7
 80044de:	b004      	add	sp, #16
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	46c0      	nop			; (mov r8, r8)
 80044e4:	80000017 	.word	0x80000017
 80044e8:	20000000 	.word	0x20000000
 80044ec:	000f4240 	.word	0x000f4240

080044f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	0002      	movs	r2, r0
 80044f8:	1dfb      	adds	r3, r7, #7
 80044fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80044fc:	1dfb      	adds	r3, r7, #7
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b7f      	cmp	r3, #127	; 0x7f
 8004502:	d809      	bhi.n	8004518 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004504:	1dfb      	adds	r3, r7, #7
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	001a      	movs	r2, r3
 800450a:	231f      	movs	r3, #31
 800450c:	401a      	ands	r2, r3
 800450e:	4b04      	ldr	r3, [pc, #16]	; (8004520 <__NVIC_EnableIRQ+0x30>)
 8004510:	2101      	movs	r1, #1
 8004512:	4091      	lsls	r1, r2
 8004514:	000a      	movs	r2, r1
 8004516:	601a      	str	r2, [r3, #0]
  }
}
 8004518:	46c0      	nop			; (mov r8, r8)
 800451a:	46bd      	mov	sp, r7
 800451c:	b002      	add	sp, #8
 800451e:	bd80      	pop	{r7, pc}
 8004520:	e000e100 	.word	0xe000e100

08004524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004524:	b590      	push	{r4, r7, lr}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	0002      	movs	r2, r0
 800452c:	6039      	str	r1, [r7, #0]
 800452e:	1dfb      	adds	r3, r7, #7
 8004530:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004532:	1dfb      	adds	r3, r7, #7
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	2b7f      	cmp	r3, #127	; 0x7f
 8004538:	d828      	bhi.n	800458c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800453a:	4a2f      	ldr	r2, [pc, #188]	; (80045f8 <__NVIC_SetPriority+0xd4>)
 800453c:	1dfb      	adds	r3, r7, #7
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	b25b      	sxtb	r3, r3
 8004542:	089b      	lsrs	r3, r3, #2
 8004544:	33c0      	adds	r3, #192	; 0xc0
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	589b      	ldr	r3, [r3, r2]
 800454a:	1dfa      	adds	r2, r7, #7
 800454c:	7812      	ldrb	r2, [r2, #0]
 800454e:	0011      	movs	r1, r2
 8004550:	2203      	movs	r2, #3
 8004552:	400a      	ands	r2, r1
 8004554:	00d2      	lsls	r2, r2, #3
 8004556:	21ff      	movs	r1, #255	; 0xff
 8004558:	4091      	lsls	r1, r2
 800455a:	000a      	movs	r2, r1
 800455c:	43d2      	mvns	r2, r2
 800455e:	401a      	ands	r2, r3
 8004560:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	019b      	lsls	r3, r3, #6
 8004566:	22ff      	movs	r2, #255	; 0xff
 8004568:	401a      	ands	r2, r3
 800456a:	1dfb      	adds	r3, r7, #7
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	0018      	movs	r0, r3
 8004570:	2303      	movs	r3, #3
 8004572:	4003      	ands	r3, r0
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004578:	481f      	ldr	r0, [pc, #124]	; (80045f8 <__NVIC_SetPriority+0xd4>)
 800457a:	1dfb      	adds	r3, r7, #7
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	b25b      	sxtb	r3, r3
 8004580:	089b      	lsrs	r3, r3, #2
 8004582:	430a      	orrs	r2, r1
 8004584:	33c0      	adds	r3, #192	; 0xc0
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800458a:	e031      	b.n	80045f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800458c:	4a1b      	ldr	r2, [pc, #108]	; (80045fc <__NVIC_SetPriority+0xd8>)
 800458e:	1dfb      	adds	r3, r7, #7
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	0019      	movs	r1, r3
 8004594:	230f      	movs	r3, #15
 8004596:	400b      	ands	r3, r1
 8004598:	3b08      	subs	r3, #8
 800459a:	089b      	lsrs	r3, r3, #2
 800459c:	3306      	adds	r3, #6
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	18d3      	adds	r3, r2, r3
 80045a2:	3304      	adds	r3, #4
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	1dfa      	adds	r2, r7, #7
 80045a8:	7812      	ldrb	r2, [r2, #0]
 80045aa:	0011      	movs	r1, r2
 80045ac:	2203      	movs	r2, #3
 80045ae:	400a      	ands	r2, r1
 80045b0:	00d2      	lsls	r2, r2, #3
 80045b2:	21ff      	movs	r1, #255	; 0xff
 80045b4:	4091      	lsls	r1, r2
 80045b6:	000a      	movs	r2, r1
 80045b8:	43d2      	mvns	r2, r2
 80045ba:	401a      	ands	r2, r3
 80045bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	019b      	lsls	r3, r3, #6
 80045c2:	22ff      	movs	r2, #255	; 0xff
 80045c4:	401a      	ands	r2, r3
 80045c6:	1dfb      	adds	r3, r7, #7
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	0018      	movs	r0, r3
 80045cc:	2303      	movs	r3, #3
 80045ce:	4003      	ands	r3, r0
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80045d4:	4809      	ldr	r0, [pc, #36]	; (80045fc <__NVIC_SetPriority+0xd8>)
 80045d6:	1dfb      	adds	r3, r7, #7
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	001c      	movs	r4, r3
 80045dc:	230f      	movs	r3, #15
 80045de:	4023      	ands	r3, r4
 80045e0:	3b08      	subs	r3, #8
 80045e2:	089b      	lsrs	r3, r3, #2
 80045e4:	430a      	orrs	r2, r1
 80045e6:	3306      	adds	r3, #6
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	18c3      	adds	r3, r0, r3
 80045ec:	3304      	adds	r3, #4
 80045ee:	601a      	str	r2, [r3, #0]
}
 80045f0:	46c0      	nop			; (mov r8, r8)
 80045f2:	46bd      	mov	sp, r7
 80045f4:	b003      	add	sp, #12
 80045f6:	bd90      	pop	{r4, r7, pc}
 80045f8:	e000e100 	.word	0xe000e100
 80045fc:	e000ed00 	.word	0xe000ed00

08004600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	1e5a      	subs	r2, r3, #1
 800460c:	2380      	movs	r3, #128	; 0x80
 800460e:	045b      	lsls	r3, r3, #17
 8004610:	429a      	cmp	r2, r3
 8004612:	d301      	bcc.n	8004618 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004614:	2301      	movs	r3, #1
 8004616:	e010      	b.n	800463a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004618:	4b0a      	ldr	r3, [pc, #40]	; (8004644 <SysTick_Config+0x44>)
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	3a01      	subs	r2, #1
 800461e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004620:	2301      	movs	r3, #1
 8004622:	425b      	negs	r3, r3
 8004624:	2103      	movs	r1, #3
 8004626:	0018      	movs	r0, r3
 8004628:	f7ff ff7c 	bl	8004524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800462c:	4b05      	ldr	r3, [pc, #20]	; (8004644 <SysTick_Config+0x44>)
 800462e:	2200      	movs	r2, #0
 8004630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004632:	4b04      	ldr	r3, [pc, #16]	; (8004644 <SysTick_Config+0x44>)
 8004634:	2207      	movs	r2, #7
 8004636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004638:	2300      	movs	r3, #0
}
 800463a:	0018      	movs	r0, r3
 800463c:	46bd      	mov	sp, r7
 800463e:	b002      	add	sp, #8
 8004640:	bd80      	pop	{r7, pc}
 8004642:	46c0      	nop			; (mov r8, r8)
 8004644:	e000e010 	.word	0xe000e010

08004648 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	60b9      	str	r1, [r7, #8]
 8004650:	607a      	str	r2, [r7, #4]
 8004652:	210f      	movs	r1, #15
 8004654:	187b      	adds	r3, r7, r1
 8004656:	1c02      	adds	r2, r0, #0
 8004658:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	187b      	adds	r3, r7, r1
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	b25b      	sxtb	r3, r3
 8004662:	0011      	movs	r1, r2
 8004664:	0018      	movs	r0, r3
 8004666:	f7ff ff5d 	bl	8004524 <__NVIC_SetPriority>
}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	46bd      	mov	sp, r7
 800466e:	b004      	add	sp, #16
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b082      	sub	sp, #8
 8004676:	af00      	add	r7, sp, #0
 8004678:	0002      	movs	r2, r0
 800467a:	1dfb      	adds	r3, r7, #7
 800467c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800467e:	1dfb      	adds	r3, r7, #7
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	b25b      	sxtb	r3, r3
 8004684:	0018      	movs	r0, r3
 8004686:	f7ff ff33 	bl	80044f0 <__NVIC_EnableIRQ>
}
 800468a:	46c0      	nop			; (mov r8, r8)
 800468c:	46bd      	mov	sp, r7
 800468e:	b002      	add	sp, #8
 8004690:	bd80      	pop	{r7, pc}

08004692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b082      	sub	sp, #8
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	0018      	movs	r0, r3
 800469e:	f7ff ffaf 	bl	8004600 <SysTick_Config>
 80046a2:	0003      	movs	r3, r0
}
 80046a4:	0018      	movs	r0, r3
 80046a6:	46bd      	mov	sp, r7
 80046a8:	b002      	add	sp, #8
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2221      	movs	r2, #33	; 0x21
 80046b8:	5c9b      	ldrb	r3, [r3, r2]
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d008      	beq.n	80046d2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2204      	movs	r2, #4
 80046c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2220      	movs	r2, #32
 80046ca:	2100      	movs	r1, #0
 80046cc:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e020      	b.n	8004714 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	210e      	movs	r1, #14
 80046de:	438a      	bics	r2, r1
 80046e0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2101      	movs	r1, #1
 80046ee:	438a      	bics	r2, r1
 80046f0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046fa:	2101      	movs	r1, #1
 80046fc:	4091      	lsls	r1, r2
 80046fe:	000a      	movs	r2, r1
 8004700:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2221      	movs	r2, #33	; 0x21
 8004706:	2101      	movs	r1, #1
 8004708:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2220      	movs	r2, #32
 800470e:	2100      	movs	r1, #0
 8004710:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	0018      	movs	r0, r3
 8004716:	46bd      	mov	sp, r7
 8004718:	b002      	add	sp, #8
 800471a:	bd80      	pop	{r7, pc}

0800471c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004724:	210f      	movs	r1, #15
 8004726:	187b      	adds	r3, r7, r1
 8004728:	2200      	movs	r2, #0
 800472a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2221      	movs	r2, #33	; 0x21
 8004730:	5c9b      	ldrb	r3, [r3, r2]
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d006      	beq.n	8004746 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2204      	movs	r2, #4
 800473c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800473e:	187b      	adds	r3, r7, r1
 8004740:	2201      	movs	r2, #1
 8004742:	701a      	strb	r2, [r3, #0]
 8004744:	e028      	b.n	8004798 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	210e      	movs	r1, #14
 8004752:	438a      	bics	r2, r1
 8004754:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2101      	movs	r1, #1
 8004762:	438a      	bics	r2, r1
 8004764:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476e:	2101      	movs	r1, #1
 8004770:	4091      	lsls	r1, r2
 8004772:	000a      	movs	r2, r1
 8004774:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2221      	movs	r2, #33	; 0x21
 800477a:	2101      	movs	r1, #1
 800477c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2220      	movs	r2, #32
 8004782:	2100      	movs	r1, #0
 8004784:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478a:	2b00      	cmp	r3, #0
 800478c:	d004      	beq.n	8004798 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	0010      	movs	r0, r2
 8004796:	4798      	blx	r3
    } 
  }
  return status;
 8004798:	230f      	movs	r3, #15
 800479a:	18fb      	adds	r3, r7, r3
 800479c:	781b      	ldrb	r3, [r3, #0]
}
 800479e:	0018      	movs	r0, r3
 80047a0:	46bd      	mov	sp, r7
 80047a2:	b004      	add	sp, #16
 80047a4:	bd80      	pop	{r7, pc}
	...

080047a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047b2:	2300      	movs	r3, #0
 80047b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047b6:	e14f      	b.n	8004a58 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2101      	movs	r1, #1
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	4091      	lsls	r1, r2
 80047c2:	000a      	movs	r2, r1
 80047c4:	4013      	ands	r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d100      	bne.n	80047d0 <HAL_GPIO_Init+0x28>
 80047ce:	e140      	b.n	8004a52 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2203      	movs	r2, #3
 80047d6:	4013      	ands	r3, r2
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d005      	beq.n	80047e8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	2203      	movs	r2, #3
 80047e2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d130      	bne.n	800484a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	2203      	movs	r2, #3
 80047f4:	409a      	lsls	r2, r3
 80047f6:	0013      	movs	r3, r2
 80047f8:	43da      	mvns	r2, r3
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	4013      	ands	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	68da      	ldr	r2, [r3, #12]
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	409a      	lsls	r2, r3
 800480a:	0013      	movs	r3, r2
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	4313      	orrs	r3, r2
 8004810:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800481e:	2201      	movs	r2, #1
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	409a      	lsls	r2, r3
 8004824:	0013      	movs	r3, r2
 8004826:	43da      	mvns	r2, r3
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	4013      	ands	r3, r2
 800482c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	091b      	lsrs	r3, r3, #4
 8004834:	2201      	movs	r2, #1
 8004836:	401a      	ands	r2, r3
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	409a      	lsls	r2, r3
 800483c:	0013      	movs	r3, r2
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	4313      	orrs	r3, r2
 8004842:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2203      	movs	r2, #3
 8004850:	4013      	ands	r3, r2
 8004852:	2b03      	cmp	r3, #3
 8004854:	d017      	beq.n	8004886 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	2203      	movs	r2, #3
 8004862:	409a      	lsls	r2, r3
 8004864:	0013      	movs	r3, r2
 8004866:	43da      	mvns	r2, r3
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	4013      	ands	r3, r2
 800486c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	689a      	ldr	r2, [r3, #8]
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	409a      	lsls	r2, r3
 8004878:	0013      	movs	r3, r2
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	4313      	orrs	r3, r2
 800487e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2203      	movs	r2, #3
 800488c:	4013      	ands	r3, r2
 800488e:	2b02      	cmp	r3, #2
 8004890:	d123      	bne.n	80048da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	08da      	lsrs	r2, r3, #3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	3208      	adds	r2, #8
 800489a:	0092      	lsls	r2, r2, #2
 800489c:	58d3      	ldr	r3, [r2, r3]
 800489e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	2207      	movs	r2, #7
 80048a4:	4013      	ands	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	220f      	movs	r2, #15
 80048aa:	409a      	lsls	r2, r3
 80048ac:	0013      	movs	r3, r2
 80048ae:	43da      	mvns	r2, r3
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	4013      	ands	r3, r2
 80048b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	691a      	ldr	r2, [r3, #16]
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2107      	movs	r1, #7
 80048be:	400b      	ands	r3, r1
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	409a      	lsls	r2, r3
 80048c4:	0013      	movs	r3, r2
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	08da      	lsrs	r2, r3, #3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3208      	adds	r2, #8
 80048d4:	0092      	lsls	r2, r2, #2
 80048d6:	6939      	ldr	r1, [r7, #16]
 80048d8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	2203      	movs	r2, #3
 80048e6:	409a      	lsls	r2, r3
 80048e8:	0013      	movs	r3, r2
 80048ea:	43da      	mvns	r2, r3
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	4013      	ands	r3, r2
 80048f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2203      	movs	r2, #3
 80048f8:	401a      	ands	r2, r3
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	409a      	lsls	r2, r3
 8004900:	0013      	movs	r3, r2
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	4313      	orrs	r3, r2
 8004906:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	23c0      	movs	r3, #192	; 0xc0
 8004914:	029b      	lsls	r3, r3, #10
 8004916:	4013      	ands	r3, r2
 8004918:	d100      	bne.n	800491c <HAL_GPIO_Init+0x174>
 800491a:	e09a      	b.n	8004a52 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800491c:	4b54      	ldr	r3, [pc, #336]	; (8004a70 <HAL_GPIO_Init+0x2c8>)
 800491e:	699a      	ldr	r2, [r3, #24]
 8004920:	4b53      	ldr	r3, [pc, #332]	; (8004a70 <HAL_GPIO_Init+0x2c8>)
 8004922:	2101      	movs	r1, #1
 8004924:	430a      	orrs	r2, r1
 8004926:	619a      	str	r2, [r3, #24]
 8004928:	4b51      	ldr	r3, [pc, #324]	; (8004a70 <HAL_GPIO_Init+0x2c8>)
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	2201      	movs	r2, #1
 800492e:	4013      	ands	r3, r2
 8004930:	60bb      	str	r3, [r7, #8]
 8004932:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004934:	4a4f      	ldr	r2, [pc, #316]	; (8004a74 <HAL_GPIO_Init+0x2cc>)
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	089b      	lsrs	r3, r3, #2
 800493a:	3302      	adds	r3, #2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	589b      	ldr	r3, [r3, r2]
 8004940:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2203      	movs	r2, #3
 8004946:	4013      	ands	r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	220f      	movs	r2, #15
 800494c:	409a      	lsls	r2, r3
 800494e:	0013      	movs	r3, r2
 8004950:	43da      	mvns	r2, r3
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	4013      	ands	r3, r2
 8004956:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	2390      	movs	r3, #144	; 0x90
 800495c:	05db      	lsls	r3, r3, #23
 800495e:	429a      	cmp	r2, r3
 8004960:	d013      	beq.n	800498a <HAL_GPIO_Init+0x1e2>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a44      	ldr	r2, [pc, #272]	; (8004a78 <HAL_GPIO_Init+0x2d0>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d00d      	beq.n	8004986 <HAL_GPIO_Init+0x1de>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a43      	ldr	r2, [pc, #268]	; (8004a7c <HAL_GPIO_Init+0x2d4>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d007      	beq.n	8004982 <HAL_GPIO_Init+0x1da>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a42      	ldr	r2, [pc, #264]	; (8004a80 <HAL_GPIO_Init+0x2d8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d101      	bne.n	800497e <HAL_GPIO_Init+0x1d6>
 800497a:	2303      	movs	r3, #3
 800497c:	e006      	b.n	800498c <HAL_GPIO_Init+0x1e4>
 800497e:	2305      	movs	r3, #5
 8004980:	e004      	b.n	800498c <HAL_GPIO_Init+0x1e4>
 8004982:	2302      	movs	r3, #2
 8004984:	e002      	b.n	800498c <HAL_GPIO_Init+0x1e4>
 8004986:	2301      	movs	r3, #1
 8004988:	e000      	b.n	800498c <HAL_GPIO_Init+0x1e4>
 800498a:	2300      	movs	r3, #0
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	2103      	movs	r1, #3
 8004990:	400a      	ands	r2, r1
 8004992:	0092      	lsls	r2, r2, #2
 8004994:	4093      	lsls	r3, r2
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	4313      	orrs	r3, r2
 800499a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800499c:	4935      	ldr	r1, [pc, #212]	; (8004a74 <HAL_GPIO_Init+0x2cc>)
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	089b      	lsrs	r3, r3, #2
 80049a2:	3302      	adds	r3, #2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049aa:	4b36      	ldr	r3, [pc, #216]	; (8004a84 <HAL_GPIO_Init+0x2dc>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	43da      	mvns	r2, r3
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	4013      	ands	r3, r2
 80049b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	2380      	movs	r3, #128	; 0x80
 80049c0:	025b      	lsls	r3, r3, #9
 80049c2:	4013      	ands	r3, r2
 80049c4:	d003      	beq.n	80049ce <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80049ce:	4b2d      	ldr	r3, [pc, #180]	; (8004a84 <HAL_GPIO_Init+0x2dc>)
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80049d4:	4b2b      	ldr	r3, [pc, #172]	; (8004a84 <HAL_GPIO_Init+0x2dc>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	43da      	mvns	r2, r3
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	4013      	ands	r3, r2
 80049e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	2380      	movs	r3, #128	; 0x80
 80049ea:	029b      	lsls	r3, r3, #10
 80049ec:	4013      	ands	r3, r2
 80049ee:	d003      	beq.n	80049f8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80049f8:	4b22      	ldr	r3, [pc, #136]	; (8004a84 <HAL_GPIO_Init+0x2dc>)
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049fe:	4b21      	ldr	r3, [pc, #132]	; (8004a84 <HAL_GPIO_Init+0x2dc>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	43da      	mvns	r2, r3
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	2380      	movs	r3, #128	; 0x80
 8004a14:	035b      	lsls	r3, r3, #13
 8004a16:	4013      	ands	r3, r2
 8004a18:	d003      	beq.n	8004a22 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004a22:	4b18      	ldr	r3, [pc, #96]	; (8004a84 <HAL_GPIO_Init+0x2dc>)
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004a28:	4b16      	ldr	r3, [pc, #88]	; (8004a84 <HAL_GPIO_Init+0x2dc>)
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	43da      	mvns	r2, r3
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	4013      	ands	r3, r2
 8004a36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	2380      	movs	r3, #128	; 0x80
 8004a3e:	039b      	lsls	r3, r3, #14
 8004a40:	4013      	ands	r3, r2
 8004a42:	d003      	beq.n	8004a4c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004a4c:	4b0d      	ldr	r3, [pc, #52]	; (8004a84 <HAL_GPIO_Init+0x2dc>)
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	3301      	adds	r3, #1
 8004a56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	40da      	lsrs	r2, r3
 8004a60:	1e13      	subs	r3, r2, #0
 8004a62:	d000      	beq.n	8004a66 <HAL_GPIO_Init+0x2be>
 8004a64:	e6a8      	b.n	80047b8 <HAL_GPIO_Init+0x10>
  } 
}
 8004a66:	46c0      	nop			; (mov r8, r8)
 8004a68:	46c0      	nop			; (mov r8, r8)
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	b006      	add	sp, #24
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	40021000 	.word	0x40021000
 8004a74:	40010000 	.word	0x40010000
 8004a78:	48000400 	.word	0x48000400
 8004a7c:	48000800 	.word	0x48000800
 8004a80:	48000c00 	.word	0x48000c00
 8004a84:	40010400 	.word	0x40010400

08004a88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	000a      	movs	r2, r1
 8004a92:	1cbb      	adds	r3, r7, #2
 8004a94:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	1cba      	adds	r2, r7, #2
 8004a9c:	8812      	ldrh	r2, [r2, #0]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	d004      	beq.n	8004aac <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004aa2:	230f      	movs	r3, #15
 8004aa4:	18fb      	adds	r3, r7, r3
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	701a      	strb	r2, [r3, #0]
 8004aaa:	e003      	b.n	8004ab4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004aac:	230f      	movs	r3, #15
 8004aae:	18fb      	adds	r3, r7, r3
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004ab4:	230f      	movs	r3, #15
 8004ab6:	18fb      	adds	r3, r7, r3
 8004ab8:	781b      	ldrb	r3, [r3, #0]
  }
 8004aba:	0018      	movs	r0, r3
 8004abc:	46bd      	mov	sp, r7
 8004abe:	b004      	add	sp, #16
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b082      	sub	sp, #8
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
 8004aca:	0008      	movs	r0, r1
 8004acc:	0011      	movs	r1, r2
 8004ace:	1cbb      	adds	r3, r7, #2
 8004ad0:	1c02      	adds	r2, r0, #0
 8004ad2:	801a      	strh	r2, [r3, #0]
 8004ad4:	1c7b      	adds	r3, r7, #1
 8004ad6:	1c0a      	adds	r2, r1, #0
 8004ad8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ada:	1c7b      	adds	r3, r7, #1
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d004      	beq.n	8004aec <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ae2:	1cbb      	adds	r3, r7, #2
 8004ae4:	881a      	ldrh	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004aea:	e003      	b.n	8004af4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004aec:	1cbb      	adds	r3, r7, #2
 8004aee:	881a      	ldrh	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004af4:	46c0      	nop			; (mov r8, r8)
 8004af6:	46bd      	mov	sp, r7
 8004af8:	b002      	add	sp, #8
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	0002      	movs	r2, r0
 8004b04:	1dbb      	adds	r3, r7, #6
 8004b06:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b08:	4b09      	ldr	r3, [pc, #36]	; (8004b30 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	1dba      	adds	r2, r7, #6
 8004b0e:	8812      	ldrh	r2, [r2, #0]
 8004b10:	4013      	ands	r3, r2
 8004b12:	d008      	beq.n	8004b26 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b14:	4b06      	ldr	r3, [pc, #24]	; (8004b30 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004b16:	1dba      	adds	r2, r7, #6
 8004b18:	8812      	ldrh	r2, [r2, #0]
 8004b1a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b1c:	1dbb      	adds	r3, r7, #6
 8004b1e:	881b      	ldrh	r3, [r3, #0]
 8004b20:	0018      	movs	r0, r3
 8004b22:	f7fe fba3 	bl	800326c <HAL_GPIO_EXTI_Callback>
  }
}
 8004b26:	46c0      	nop			; (mov r8, r8)
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	b002      	add	sp, #8
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	46c0      	nop			; (mov r8, r8)
 8004b30:	40010400 	.word	0x40010400

08004b34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e301      	b.n	800514a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	d100      	bne.n	8004b52 <HAL_RCC_OscConfig+0x1e>
 8004b50:	e08d      	b.n	8004c6e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004b52:	4bc3      	ldr	r3, [pc, #780]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	220c      	movs	r2, #12
 8004b58:	4013      	ands	r3, r2
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	d00e      	beq.n	8004b7c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b5e:	4bc0      	ldr	r3, [pc, #768]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	220c      	movs	r2, #12
 8004b64:	4013      	ands	r3, r2
 8004b66:	2b08      	cmp	r3, #8
 8004b68:	d116      	bne.n	8004b98 <HAL_RCC_OscConfig+0x64>
 8004b6a:	4bbd      	ldr	r3, [pc, #756]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	2380      	movs	r3, #128	; 0x80
 8004b70:	025b      	lsls	r3, r3, #9
 8004b72:	401a      	ands	r2, r3
 8004b74:	2380      	movs	r3, #128	; 0x80
 8004b76:	025b      	lsls	r3, r3, #9
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d10d      	bne.n	8004b98 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b7c:	4bb8      	ldr	r3, [pc, #736]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	2380      	movs	r3, #128	; 0x80
 8004b82:	029b      	lsls	r3, r3, #10
 8004b84:	4013      	ands	r3, r2
 8004b86:	d100      	bne.n	8004b8a <HAL_RCC_OscConfig+0x56>
 8004b88:	e070      	b.n	8004c6c <HAL_RCC_OscConfig+0x138>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d000      	beq.n	8004b94 <HAL_RCC_OscConfig+0x60>
 8004b92:	e06b      	b.n	8004c6c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e2d8      	b.n	800514a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d107      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x7c>
 8004ba0:	4baf      	ldr	r3, [pc, #700]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	4bae      	ldr	r3, [pc, #696]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004ba6:	2180      	movs	r1, #128	; 0x80
 8004ba8:	0249      	lsls	r1, r1, #9
 8004baa:	430a      	orrs	r2, r1
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	e02f      	b.n	8004c10 <HAL_RCC_OscConfig+0xdc>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10c      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x9e>
 8004bb8:	4ba9      	ldr	r3, [pc, #676]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	4ba8      	ldr	r3, [pc, #672]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004bbe:	49a9      	ldr	r1, [pc, #676]	; (8004e64 <HAL_RCC_OscConfig+0x330>)
 8004bc0:	400a      	ands	r2, r1
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	4ba6      	ldr	r3, [pc, #664]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	4ba5      	ldr	r3, [pc, #660]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004bca:	49a7      	ldr	r1, [pc, #668]	; (8004e68 <HAL_RCC_OscConfig+0x334>)
 8004bcc:	400a      	ands	r2, r1
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	e01e      	b.n	8004c10 <HAL_RCC_OscConfig+0xdc>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2b05      	cmp	r3, #5
 8004bd8:	d10e      	bne.n	8004bf8 <HAL_RCC_OscConfig+0xc4>
 8004bda:	4ba1      	ldr	r3, [pc, #644]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	4ba0      	ldr	r3, [pc, #640]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004be0:	2180      	movs	r1, #128	; 0x80
 8004be2:	02c9      	lsls	r1, r1, #11
 8004be4:	430a      	orrs	r2, r1
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	4b9d      	ldr	r3, [pc, #628]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	4b9c      	ldr	r3, [pc, #624]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004bee:	2180      	movs	r1, #128	; 0x80
 8004bf0:	0249      	lsls	r1, r1, #9
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	601a      	str	r2, [r3, #0]
 8004bf6:	e00b      	b.n	8004c10 <HAL_RCC_OscConfig+0xdc>
 8004bf8:	4b99      	ldr	r3, [pc, #612]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	4b98      	ldr	r3, [pc, #608]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004bfe:	4999      	ldr	r1, [pc, #612]	; (8004e64 <HAL_RCC_OscConfig+0x330>)
 8004c00:	400a      	ands	r2, r1
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	4b96      	ldr	r3, [pc, #600]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	4b95      	ldr	r3, [pc, #596]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004c0a:	4997      	ldr	r1, [pc, #604]	; (8004e68 <HAL_RCC_OscConfig+0x334>)
 8004c0c:	400a      	ands	r2, r1
 8004c0e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d014      	beq.n	8004c42 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c18:	f7ff f88a 	bl	8003d30 <HAL_GetTick>
 8004c1c:	0003      	movs	r3, r0
 8004c1e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c20:	e008      	b.n	8004c34 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c22:	f7ff f885 	bl	8003d30 <HAL_GetTick>
 8004c26:	0002      	movs	r2, r0
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b64      	cmp	r3, #100	; 0x64
 8004c2e:	d901      	bls.n	8004c34 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e28a      	b.n	800514a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c34:	4b8a      	ldr	r3, [pc, #552]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	2380      	movs	r3, #128	; 0x80
 8004c3a:	029b      	lsls	r3, r3, #10
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	d0f0      	beq.n	8004c22 <HAL_RCC_OscConfig+0xee>
 8004c40:	e015      	b.n	8004c6e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c42:	f7ff f875 	bl	8003d30 <HAL_GetTick>
 8004c46:	0003      	movs	r3, r0
 8004c48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c4c:	f7ff f870 	bl	8003d30 <HAL_GetTick>
 8004c50:	0002      	movs	r2, r0
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b64      	cmp	r3, #100	; 0x64
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e275      	b.n	800514a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c5e:	4b80      	ldr	r3, [pc, #512]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	2380      	movs	r3, #128	; 0x80
 8004c64:	029b      	lsls	r3, r3, #10
 8004c66:	4013      	ands	r3, r2
 8004c68:	d1f0      	bne.n	8004c4c <HAL_RCC_OscConfig+0x118>
 8004c6a:	e000      	b.n	8004c6e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c6c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2202      	movs	r2, #2
 8004c74:	4013      	ands	r3, r2
 8004c76:	d100      	bne.n	8004c7a <HAL_RCC_OscConfig+0x146>
 8004c78:	e069      	b.n	8004d4e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004c7a:	4b79      	ldr	r3, [pc, #484]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	220c      	movs	r2, #12
 8004c80:	4013      	ands	r3, r2
 8004c82:	d00b      	beq.n	8004c9c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004c84:	4b76      	ldr	r3, [pc, #472]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	220c      	movs	r2, #12
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d11c      	bne.n	8004cca <HAL_RCC_OscConfig+0x196>
 8004c90:	4b73      	ldr	r3, [pc, #460]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004c92:	685a      	ldr	r2, [r3, #4]
 8004c94:	2380      	movs	r3, #128	; 0x80
 8004c96:	025b      	lsls	r3, r3, #9
 8004c98:	4013      	ands	r3, r2
 8004c9a:	d116      	bne.n	8004cca <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c9c:	4b70      	ldr	r3, [pc, #448]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	d005      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x17e>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d001      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e24b      	b.n	800514a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb2:	4b6b      	ldr	r3, [pc, #428]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	22f8      	movs	r2, #248	; 0xf8
 8004cb8:	4393      	bics	r3, r2
 8004cba:	0019      	movs	r1, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	00da      	lsls	r2, r3, #3
 8004cc2:	4b67      	ldr	r3, [pc, #412]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cc8:	e041      	b.n	8004d4e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d024      	beq.n	8004d1c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cd2:	4b63      	ldr	r3, [pc, #396]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	4b62      	ldr	r3, [pc, #392]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004cd8:	2101      	movs	r1, #1
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cde:	f7ff f827 	bl	8003d30 <HAL_GetTick>
 8004ce2:	0003      	movs	r3, r0
 8004ce4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ce8:	f7ff f822 	bl	8003d30 <HAL_GetTick>
 8004cec:	0002      	movs	r2, r0
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e227      	b.n	800514a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cfa:	4b59      	ldr	r3, [pc, #356]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	4013      	ands	r3, r2
 8004d02:	d0f1      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d04:	4b56      	ldr	r3, [pc, #344]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	22f8      	movs	r2, #248	; 0xf8
 8004d0a:	4393      	bics	r3, r2
 8004d0c:	0019      	movs	r1, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	00da      	lsls	r2, r3, #3
 8004d14:	4b52      	ldr	r3, [pc, #328]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004d16:	430a      	orrs	r2, r1
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	e018      	b.n	8004d4e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d1c:	4b50      	ldr	r3, [pc, #320]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	4b4f      	ldr	r3, [pc, #316]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004d22:	2101      	movs	r1, #1
 8004d24:	438a      	bics	r2, r1
 8004d26:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d28:	f7ff f802 	bl	8003d30 <HAL_GetTick>
 8004d2c:	0003      	movs	r3, r0
 8004d2e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d30:	e008      	b.n	8004d44 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d32:	f7fe fffd 	bl	8003d30 <HAL_GetTick>
 8004d36:	0002      	movs	r2, r0
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e202      	b.n	800514a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d44:	4b46      	ldr	r3, [pc, #280]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2202      	movs	r2, #2
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	d1f1      	bne.n	8004d32 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2208      	movs	r2, #8
 8004d54:	4013      	ands	r3, r2
 8004d56:	d036      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d019      	beq.n	8004d94 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d60:	4b3f      	ldr	r3, [pc, #252]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004d62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d64:	4b3e      	ldr	r3, [pc, #248]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004d66:	2101      	movs	r1, #1
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d6c:	f7fe ffe0 	bl	8003d30 <HAL_GetTick>
 8004d70:	0003      	movs	r3, r0
 8004d72:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d74:	e008      	b.n	8004d88 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d76:	f7fe ffdb 	bl	8003d30 <HAL_GetTick>
 8004d7a:	0002      	movs	r2, r0
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e1e0      	b.n	800514a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d88:	4b35      	ldr	r3, [pc, #212]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d0f1      	beq.n	8004d76 <HAL_RCC_OscConfig+0x242>
 8004d92:	e018      	b.n	8004dc6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d94:	4b32      	ldr	r3, [pc, #200]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004d96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d98:	4b31      	ldr	r3, [pc, #196]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	438a      	bics	r2, r1
 8004d9e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004da0:	f7fe ffc6 	bl	8003d30 <HAL_GetTick>
 8004da4:	0003      	movs	r3, r0
 8004da6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004da8:	e008      	b.n	8004dbc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004daa:	f7fe ffc1 	bl	8003d30 <HAL_GetTick>
 8004dae:	0002      	movs	r2, r0
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e1c6      	b.n	800514a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dbc:	4b28      	ldr	r3, [pc, #160]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	2202      	movs	r2, #2
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	d1f1      	bne.n	8004daa <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2204      	movs	r2, #4
 8004dcc:	4013      	ands	r3, r2
 8004dce:	d100      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x29e>
 8004dd0:	e0b4      	b.n	8004f3c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dd2:	201f      	movs	r0, #31
 8004dd4:	183b      	adds	r3, r7, r0
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dda:	4b21      	ldr	r3, [pc, #132]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004ddc:	69da      	ldr	r2, [r3, #28]
 8004dde:	2380      	movs	r3, #128	; 0x80
 8004de0:	055b      	lsls	r3, r3, #21
 8004de2:	4013      	ands	r3, r2
 8004de4:	d110      	bne.n	8004e08 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004de6:	4b1e      	ldr	r3, [pc, #120]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004de8:	69da      	ldr	r2, [r3, #28]
 8004dea:	4b1d      	ldr	r3, [pc, #116]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004dec:	2180      	movs	r1, #128	; 0x80
 8004dee:	0549      	lsls	r1, r1, #21
 8004df0:	430a      	orrs	r2, r1
 8004df2:	61da      	str	r2, [r3, #28]
 8004df4:	4b1a      	ldr	r3, [pc, #104]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004df6:	69da      	ldr	r2, [r3, #28]
 8004df8:	2380      	movs	r3, #128	; 0x80
 8004dfa:	055b      	lsls	r3, r3, #21
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	60fb      	str	r3, [r7, #12]
 8004e00:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004e02:	183b      	adds	r3, r7, r0
 8004e04:	2201      	movs	r2, #1
 8004e06:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e08:	4b18      	ldr	r3, [pc, #96]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	2380      	movs	r3, #128	; 0x80
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	4013      	ands	r3, r2
 8004e12:	d11a      	bne.n	8004e4a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e14:	4b15      	ldr	r3, [pc, #84]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	4b14      	ldr	r3, [pc, #80]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004e1a:	2180      	movs	r1, #128	; 0x80
 8004e1c:	0049      	lsls	r1, r1, #1
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e22:	f7fe ff85 	bl	8003d30 <HAL_GetTick>
 8004e26:	0003      	movs	r3, r0
 8004e28:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e2c:	f7fe ff80 	bl	8003d30 <HAL_GetTick>
 8004e30:	0002      	movs	r2, r0
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b64      	cmp	r3, #100	; 0x64
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e185      	b.n	800514a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e3e:	4b0b      	ldr	r3, [pc, #44]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	2380      	movs	r3, #128	; 0x80
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	4013      	ands	r3, r2
 8004e48:	d0f0      	beq.n	8004e2c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d10e      	bne.n	8004e70 <HAL_RCC_OscConfig+0x33c>
 8004e52:	4b03      	ldr	r3, [pc, #12]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004e54:	6a1a      	ldr	r2, [r3, #32]
 8004e56:	4b02      	ldr	r3, [pc, #8]	; (8004e60 <HAL_RCC_OscConfig+0x32c>)
 8004e58:	2101      	movs	r1, #1
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	621a      	str	r2, [r3, #32]
 8004e5e:	e035      	b.n	8004ecc <HAL_RCC_OscConfig+0x398>
 8004e60:	40021000 	.word	0x40021000
 8004e64:	fffeffff 	.word	0xfffeffff
 8004e68:	fffbffff 	.word	0xfffbffff
 8004e6c:	40007000 	.word	0x40007000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d10c      	bne.n	8004e92 <HAL_RCC_OscConfig+0x35e>
 8004e78:	4bb6      	ldr	r3, [pc, #728]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8004e7a:	6a1a      	ldr	r2, [r3, #32]
 8004e7c:	4bb5      	ldr	r3, [pc, #724]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8004e7e:	2101      	movs	r1, #1
 8004e80:	438a      	bics	r2, r1
 8004e82:	621a      	str	r2, [r3, #32]
 8004e84:	4bb3      	ldr	r3, [pc, #716]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8004e86:	6a1a      	ldr	r2, [r3, #32]
 8004e88:	4bb2      	ldr	r3, [pc, #712]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8004e8a:	2104      	movs	r1, #4
 8004e8c:	438a      	bics	r2, r1
 8004e8e:	621a      	str	r2, [r3, #32]
 8004e90:	e01c      	b.n	8004ecc <HAL_RCC_OscConfig+0x398>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	2b05      	cmp	r3, #5
 8004e98:	d10c      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x380>
 8004e9a:	4bae      	ldr	r3, [pc, #696]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8004e9c:	6a1a      	ldr	r2, [r3, #32]
 8004e9e:	4bad      	ldr	r3, [pc, #692]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8004ea0:	2104      	movs	r1, #4
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	621a      	str	r2, [r3, #32]
 8004ea6:	4bab      	ldr	r3, [pc, #684]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8004ea8:	6a1a      	ldr	r2, [r3, #32]
 8004eaa:	4baa      	ldr	r3, [pc, #680]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8004eac:	2101      	movs	r1, #1
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	621a      	str	r2, [r3, #32]
 8004eb2:	e00b      	b.n	8004ecc <HAL_RCC_OscConfig+0x398>
 8004eb4:	4ba7      	ldr	r3, [pc, #668]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8004eb6:	6a1a      	ldr	r2, [r3, #32]
 8004eb8:	4ba6      	ldr	r3, [pc, #664]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8004eba:	2101      	movs	r1, #1
 8004ebc:	438a      	bics	r2, r1
 8004ebe:	621a      	str	r2, [r3, #32]
 8004ec0:	4ba4      	ldr	r3, [pc, #656]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8004ec2:	6a1a      	ldr	r2, [r3, #32]
 8004ec4:	4ba3      	ldr	r3, [pc, #652]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8004ec6:	2104      	movs	r1, #4
 8004ec8:	438a      	bics	r2, r1
 8004eca:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d014      	beq.n	8004efe <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ed4:	f7fe ff2c 	bl	8003d30 <HAL_GetTick>
 8004ed8:	0003      	movs	r3, r0
 8004eda:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004edc:	e009      	b.n	8004ef2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ede:	f7fe ff27 	bl	8003d30 <HAL_GetTick>
 8004ee2:	0002      	movs	r2, r0
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	4a9b      	ldr	r2, [pc, #620]	; (8005158 <HAL_RCC_OscConfig+0x624>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e12b      	b.n	800514a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ef2:	4b98      	ldr	r3, [pc, #608]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	4013      	ands	r3, r2
 8004efa:	d0f0      	beq.n	8004ede <HAL_RCC_OscConfig+0x3aa>
 8004efc:	e013      	b.n	8004f26 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004efe:	f7fe ff17 	bl	8003d30 <HAL_GetTick>
 8004f02:	0003      	movs	r3, r0
 8004f04:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f06:	e009      	b.n	8004f1c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f08:	f7fe ff12 	bl	8003d30 <HAL_GetTick>
 8004f0c:	0002      	movs	r2, r0
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	4a91      	ldr	r2, [pc, #580]	; (8005158 <HAL_RCC_OscConfig+0x624>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d901      	bls.n	8004f1c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e116      	b.n	800514a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f1c:	4b8d      	ldr	r3, [pc, #564]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	2202      	movs	r2, #2
 8004f22:	4013      	ands	r3, r2
 8004f24:	d1f0      	bne.n	8004f08 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f26:	231f      	movs	r3, #31
 8004f28:	18fb      	adds	r3, r7, r3
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d105      	bne.n	8004f3c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f30:	4b88      	ldr	r3, [pc, #544]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8004f32:	69da      	ldr	r2, [r3, #28]
 8004f34:	4b87      	ldr	r3, [pc, #540]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8004f36:	4989      	ldr	r1, [pc, #548]	; (800515c <HAL_RCC_OscConfig+0x628>)
 8004f38:	400a      	ands	r2, r1
 8004f3a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2210      	movs	r2, #16
 8004f42:	4013      	ands	r3, r2
 8004f44:	d063      	beq.n	800500e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d12a      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004f4e:	4b81      	ldr	r3, [pc, #516]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8004f50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f52:	4b80      	ldr	r3, [pc, #512]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8004f54:	2104      	movs	r1, #4
 8004f56:	430a      	orrs	r2, r1
 8004f58:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004f5a:	4b7e      	ldr	r3, [pc, #504]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8004f5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f5e:	4b7d      	ldr	r3, [pc, #500]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8004f60:	2101      	movs	r1, #1
 8004f62:	430a      	orrs	r2, r1
 8004f64:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f66:	f7fe fee3 	bl	8003d30 <HAL_GetTick>
 8004f6a:	0003      	movs	r3, r0
 8004f6c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004f6e:	e008      	b.n	8004f82 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004f70:	f7fe fede 	bl	8003d30 <HAL_GetTick>
 8004f74:	0002      	movs	r2, r0
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e0e3      	b.n	800514a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004f82:	4b74      	ldr	r3, [pc, #464]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8004f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f86:	2202      	movs	r2, #2
 8004f88:	4013      	ands	r3, r2
 8004f8a:	d0f1      	beq.n	8004f70 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004f8c:	4b71      	ldr	r3, [pc, #452]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8004f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f90:	22f8      	movs	r2, #248	; 0xf8
 8004f92:	4393      	bics	r3, r2
 8004f94:	0019      	movs	r1, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	00da      	lsls	r2, r3, #3
 8004f9c:	4b6d      	ldr	r3, [pc, #436]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	635a      	str	r2, [r3, #52]	; 0x34
 8004fa2:	e034      	b.n	800500e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	3305      	adds	r3, #5
 8004faa:	d111      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004fac:	4b69      	ldr	r3, [pc, #420]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8004fae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fb0:	4b68      	ldr	r3, [pc, #416]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8004fb2:	2104      	movs	r1, #4
 8004fb4:	438a      	bics	r2, r1
 8004fb6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004fb8:	4b66      	ldr	r3, [pc, #408]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8004fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fbc:	22f8      	movs	r2, #248	; 0xf8
 8004fbe:	4393      	bics	r3, r2
 8004fc0:	0019      	movs	r1, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	00da      	lsls	r2, r3, #3
 8004fc8:	4b62      	ldr	r3, [pc, #392]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	635a      	str	r2, [r3, #52]	; 0x34
 8004fce:	e01e      	b.n	800500e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004fd0:	4b60      	ldr	r3, [pc, #384]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8004fd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fd4:	4b5f      	ldr	r3, [pc, #380]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8004fd6:	2104      	movs	r1, #4
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004fdc:	4b5d      	ldr	r3, [pc, #372]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8004fde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fe0:	4b5c      	ldr	r3, [pc, #368]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	438a      	bics	r2, r1
 8004fe6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fe8:	f7fe fea2 	bl	8003d30 <HAL_GetTick>
 8004fec:	0003      	movs	r3, r0
 8004fee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004ff0:	e008      	b.n	8005004 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004ff2:	f7fe fe9d 	bl	8003d30 <HAL_GetTick>
 8004ff6:	0002      	movs	r2, r0
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e0a2      	b.n	800514a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005004:	4b53      	ldr	r3, [pc, #332]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8005006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005008:	2202      	movs	r2, #2
 800500a:	4013      	ands	r3, r2
 800500c:	d1f1      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d100      	bne.n	8005018 <HAL_RCC_OscConfig+0x4e4>
 8005016:	e097      	b.n	8005148 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005018:	4b4e      	ldr	r3, [pc, #312]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	220c      	movs	r2, #12
 800501e:	4013      	ands	r3, r2
 8005020:	2b08      	cmp	r3, #8
 8005022:	d100      	bne.n	8005026 <HAL_RCC_OscConfig+0x4f2>
 8005024:	e06b      	b.n	80050fe <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	2b02      	cmp	r3, #2
 800502c:	d14c      	bne.n	80050c8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800502e:	4b49      	ldr	r3, [pc, #292]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	4b48      	ldr	r3, [pc, #288]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8005034:	494a      	ldr	r1, [pc, #296]	; (8005160 <HAL_RCC_OscConfig+0x62c>)
 8005036:	400a      	ands	r2, r1
 8005038:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800503a:	f7fe fe79 	bl	8003d30 <HAL_GetTick>
 800503e:	0003      	movs	r3, r0
 8005040:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005042:	e008      	b.n	8005056 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005044:	f7fe fe74 	bl	8003d30 <HAL_GetTick>
 8005048:	0002      	movs	r2, r0
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b02      	cmp	r3, #2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e079      	b.n	800514a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005056:	4b3f      	ldr	r3, [pc, #252]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	2380      	movs	r3, #128	; 0x80
 800505c:	049b      	lsls	r3, r3, #18
 800505e:	4013      	ands	r3, r2
 8005060:	d1f0      	bne.n	8005044 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005062:	4b3c      	ldr	r3, [pc, #240]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8005064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005066:	220f      	movs	r2, #15
 8005068:	4393      	bics	r3, r2
 800506a:	0019      	movs	r1, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005070:	4b38      	ldr	r3, [pc, #224]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8005072:	430a      	orrs	r2, r1
 8005074:	62da      	str	r2, [r3, #44]	; 0x2c
 8005076:	4b37      	ldr	r3, [pc, #220]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	4a3a      	ldr	r2, [pc, #232]	; (8005164 <HAL_RCC_OscConfig+0x630>)
 800507c:	4013      	ands	r3, r2
 800507e:	0019      	movs	r1, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	431a      	orrs	r2, r3
 800508a:	4b32      	ldr	r3, [pc, #200]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 800508c:	430a      	orrs	r2, r1
 800508e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005090:	4b30      	ldr	r3, [pc, #192]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	4b2f      	ldr	r3, [pc, #188]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8005096:	2180      	movs	r1, #128	; 0x80
 8005098:	0449      	lsls	r1, r1, #17
 800509a:	430a      	orrs	r2, r1
 800509c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509e:	f7fe fe47 	bl	8003d30 <HAL_GetTick>
 80050a2:	0003      	movs	r3, r0
 80050a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050a8:	f7fe fe42 	bl	8003d30 <HAL_GetTick>
 80050ac:	0002      	movs	r2, r0
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e047      	b.n	800514a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050ba:	4b26      	ldr	r3, [pc, #152]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	2380      	movs	r3, #128	; 0x80
 80050c0:	049b      	lsls	r3, r3, #18
 80050c2:	4013      	ands	r3, r2
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCC_OscConfig+0x574>
 80050c6:	e03f      	b.n	8005148 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c8:	4b22      	ldr	r3, [pc, #136]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	4b21      	ldr	r3, [pc, #132]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 80050ce:	4924      	ldr	r1, [pc, #144]	; (8005160 <HAL_RCC_OscConfig+0x62c>)
 80050d0:	400a      	ands	r2, r1
 80050d2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d4:	f7fe fe2c 	bl	8003d30 <HAL_GetTick>
 80050d8:	0003      	movs	r3, r0
 80050da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050dc:	e008      	b.n	80050f0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050de:	f7fe fe27 	bl	8003d30 <HAL_GetTick>
 80050e2:	0002      	movs	r2, r0
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d901      	bls.n	80050f0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e02c      	b.n	800514a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050f0:	4b18      	ldr	r3, [pc, #96]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	2380      	movs	r3, #128	; 0x80
 80050f6:	049b      	lsls	r3, r3, #18
 80050f8:	4013      	ands	r3, r2
 80050fa:	d1f0      	bne.n	80050de <HAL_RCC_OscConfig+0x5aa>
 80050fc:	e024      	b.n	8005148 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d101      	bne.n	800510a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e01f      	b.n	800514a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800510a:	4b12      	ldr	r3, [pc, #72]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005110:	4b10      	ldr	r3, [pc, #64]	; (8005154 <HAL_RCC_OscConfig+0x620>)
 8005112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005114:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	2380      	movs	r3, #128	; 0x80
 800511a:	025b      	lsls	r3, r3, #9
 800511c:	401a      	ands	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	429a      	cmp	r2, r3
 8005124:	d10e      	bne.n	8005144 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	220f      	movs	r2, #15
 800512a:	401a      	ands	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005130:	429a      	cmp	r2, r3
 8005132:	d107      	bne.n	8005144 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	23f0      	movs	r3, #240	; 0xf0
 8005138:	039b      	lsls	r3, r3, #14
 800513a:	401a      	ands	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005140:	429a      	cmp	r2, r3
 8005142:	d001      	beq.n	8005148 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e000      	b.n	800514a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	0018      	movs	r0, r3
 800514c:	46bd      	mov	sp, r7
 800514e:	b008      	add	sp, #32
 8005150:	bd80      	pop	{r7, pc}
 8005152:	46c0      	nop			; (mov r8, r8)
 8005154:	40021000 	.word	0x40021000
 8005158:	00001388 	.word	0x00001388
 800515c:	efffffff 	.word	0xefffffff
 8005160:	feffffff 	.word	0xfeffffff
 8005164:	ffc2ffff 	.word	0xffc2ffff

08005168 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d101      	bne.n	800517c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e0b3      	b.n	80052e4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800517c:	4b5b      	ldr	r3, [pc, #364]	; (80052ec <HAL_RCC_ClockConfig+0x184>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2201      	movs	r2, #1
 8005182:	4013      	ands	r3, r2
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	429a      	cmp	r2, r3
 8005188:	d911      	bls.n	80051ae <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800518a:	4b58      	ldr	r3, [pc, #352]	; (80052ec <HAL_RCC_ClockConfig+0x184>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2201      	movs	r2, #1
 8005190:	4393      	bics	r3, r2
 8005192:	0019      	movs	r1, r3
 8005194:	4b55      	ldr	r3, [pc, #340]	; (80052ec <HAL_RCC_ClockConfig+0x184>)
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800519c:	4b53      	ldr	r3, [pc, #332]	; (80052ec <HAL_RCC_ClockConfig+0x184>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2201      	movs	r2, #1
 80051a2:	4013      	ands	r3, r2
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d001      	beq.n	80051ae <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e09a      	b.n	80052e4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2202      	movs	r2, #2
 80051b4:	4013      	ands	r3, r2
 80051b6:	d015      	beq.n	80051e4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2204      	movs	r2, #4
 80051be:	4013      	ands	r3, r2
 80051c0:	d006      	beq.n	80051d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80051c2:	4b4b      	ldr	r3, [pc, #300]	; (80052f0 <HAL_RCC_ClockConfig+0x188>)
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	4b4a      	ldr	r3, [pc, #296]	; (80052f0 <HAL_RCC_ClockConfig+0x188>)
 80051c8:	21e0      	movs	r1, #224	; 0xe0
 80051ca:	00c9      	lsls	r1, r1, #3
 80051cc:	430a      	orrs	r2, r1
 80051ce:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051d0:	4b47      	ldr	r3, [pc, #284]	; (80052f0 <HAL_RCC_ClockConfig+0x188>)
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	22f0      	movs	r2, #240	; 0xf0
 80051d6:	4393      	bics	r3, r2
 80051d8:	0019      	movs	r1, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	689a      	ldr	r2, [r3, #8]
 80051de:	4b44      	ldr	r3, [pc, #272]	; (80052f0 <HAL_RCC_ClockConfig+0x188>)
 80051e0:	430a      	orrs	r2, r1
 80051e2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2201      	movs	r2, #1
 80051ea:	4013      	ands	r3, r2
 80051ec:	d040      	beq.n	8005270 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d107      	bne.n	8005206 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051f6:	4b3e      	ldr	r3, [pc, #248]	; (80052f0 <HAL_RCC_ClockConfig+0x188>)
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	2380      	movs	r3, #128	; 0x80
 80051fc:	029b      	lsls	r3, r3, #10
 80051fe:	4013      	ands	r3, r2
 8005200:	d114      	bne.n	800522c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e06e      	b.n	80052e4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	2b02      	cmp	r3, #2
 800520c:	d107      	bne.n	800521e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800520e:	4b38      	ldr	r3, [pc, #224]	; (80052f0 <HAL_RCC_ClockConfig+0x188>)
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	2380      	movs	r3, #128	; 0x80
 8005214:	049b      	lsls	r3, r3, #18
 8005216:	4013      	ands	r3, r2
 8005218:	d108      	bne.n	800522c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e062      	b.n	80052e4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800521e:	4b34      	ldr	r3, [pc, #208]	; (80052f0 <HAL_RCC_ClockConfig+0x188>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2202      	movs	r2, #2
 8005224:	4013      	ands	r3, r2
 8005226:	d101      	bne.n	800522c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e05b      	b.n	80052e4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800522c:	4b30      	ldr	r3, [pc, #192]	; (80052f0 <HAL_RCC_ClockConfig+0x188>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	2203      	movs	r2, #3
 8005232:	4393      	bics	r3, r2
 8005234:	0019      	movs	r1, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	4b2d      	ldr	r3, [pc, #180]	; (80052f0 <HAL_RCC_ClockConfig+0x188>)
 800523c:	430a      	orrs	r2, r1
 800523e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005240:	f7fe fd76 	bl	8003d30 <HAL_GetTick>
 8005244:	0003      	movs	r3, r0
 8005246:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005248:	e009      	b.n	800525e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800524a:	f7fe fd71 	bl	8003d30 <HAL_GetTick>
 800524e:	0002      	movs	r2, r0
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	4a27      	ldr	r2, [pc, #156]	; (80052f4 <HAL_RCC_ClockConfig+0x18c>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d901      	bls.n	800525e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e042      	b.n	80052e4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800525e:	4b24      	ldr	r3, [pc, #144]	; (80052f0 <HAL_RCC_ClockConfig+0x188>)
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	220c      	movs	r2, #12
 8005264:	401a      	ands	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	429a      	cmp	r2, r3
 800526e:	d1ec      	bne.n	800524a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005270:	4b1e      	ldr	r3, [pc, #120]	; (80052ec <HAL_RCC_ClockConfig+0x184>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2201      	movs	r2, #1
 8005276:	4013      	ands	r3, r2
 8005278:	683a      	ldr	r2, [r7, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	d211      	bcs.n	80052a2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800527e:	4b1b      	ldr	r3, [pc, #108]	; (80052ec <HAL_RCC_ClockConfig+0x184>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2201      	movs	r2, #1
 8005284:	4393      	bics	r3, r2
 8005286:	0019      	movs	r1, r3
 8005288:	4b18      	ldr	r3, [pc, #96]	; (80052ec <HAL_RCC_ClockConfig+0x184>)
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005290:	4b16      	ldr	r3, [pc, #88]	; (80052ec <HAL_RCC_ClockConfig+0x184>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2201      	movs	r2, #1
 8005296:	4013      	ands	r3, r2
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	429a      	cmp	r2, r3
 800529c:	d001      	beq.n	80052a2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e020      	b.n	80052e4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2204      	movs	r2, #4
 80052a8:	4013      	ands	r3, r2
 80052aa:	d009      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80052ac:	4b10      	ldr	r3, [pc, #64]	; (80052f0 <HAL_RCC_ClockConfig+0x188>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	4a11      	ldr	r2, [pc, #68]	; (80052f8 <HAL_RCC_ClockConfig+0x190>)
 80052b2:	4013      	ands	r3, r2
 80052b4:	0019      	movs	r1, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68da      	ldr	r2, [r3, #12]
 80052ba:	4b0d      	ldr	r3, [pc, #52]	; (80052f0 <HAL_RCC_ClockConfig+0x188>)
 80052bc:	430a      	orrs	r2, r1
 80052be:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80052c0:	f000 f820 	bl	8005304 <HAL_RCC_GetSysClockFreq>
 80052c4:	0001      	movs	r1, r0
 80052c6:	4b0a      	ldr	r3, [pc, #40]	; (80052f0 <HAL_RCC_ClockConfig+0x188>)
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	091b      	lsrs	r3, r3, #4
 80052cc:	220f      	movs	r2, #15
 80052ce:	4013      	ands	r3, r2
 80052d0:	4a0a      	ldr	r2, [pc, #40]	; (80052fc <HAL_RCC_ClockConfig+0x194>)
 80052d2:	5cd3      	ldrb	r3, [r2, r3]
 80052d4:	000a      	movs	r2, r1
 80052d6:	40da      	lsrs	r2, r3
 80052d8:	4b09      	ldr	r3, [pc, #36]	; (8005300 <HAL_RCC_ClockConfig+0x198>)
 80052da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80052dc:	2003      	movs	r0, #3
 80052de:	f7fe fce1 	bl	8003ca4 <HAL_InitTick>
  
  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	0018      	movs	r0, r3
 80052e6:	46bd      	mov	sp, r7
 80052e8:	b004      	add	sp, #16
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	40022000 	.word	0x40022000
 80052f0:	40021000 	.word	0x40021000
 80052f4:	00001388 	.word	0x00001388
 80052f8:	fffff8ff 	.word	0xfffff8ff
 80052fc:	0800a124 	.word	0x0800a124
 8005300:	20000000 	.word	0x20000000

08005304 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005304:	b590      	push	{r4, r7, lr}
 8005306:	b08f      	sub	sp, #60	; 0x3c
 8005308:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800530a:	2314      	movs	r3, #20
 800530c:	18fb      	adds	r3, r7, r3
 800530e:	4a2b      	ldr	r2, [pc, #172]	; (80053bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005310:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005312:	c313      	stmia	r3!, {r0, r1, r4}
 8005314:	6812      	ldr	r2, [r2, #0]
 8005316:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005318:	1d3b      	adds	r3, r7, #4
 800531a:	4a29      	ldr	r2, [pc, #164]	; (80053c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800531c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800531e:	c313      	stmia	r3!, {r0, r1, r4}
 8005320:	6812      	ldr	r2, [r2, #0]
 8005322:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005324:	2300      	movs	r3, #0
 8005326:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005328:	2300      	movs	r3, #0
 800532a:	62bb      	str	r3, [r7, #40]	; 0x28
 800532c:	2300      	movs	r3, #0
 800532e:	637b      	str	r3, [r7, #52]	; 0x34
 8005330:	2300      	movs	r3, #0
 8005332:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005334:	2300      	movs	r3, #0
 8005336:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005338:	4b22      	ldr	r3, [pc, #136]	; (80053c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800533e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005340:	220c      	movs	r2, #12
 8005342:	4013      	ands	r3, r2
 8005344:	2b04      	cmp	r3, #4
 8005346:	d002      	beq.n	800534e <HAL_RCC_GetSysClockFreq+0x4a>
 8005348:	2b08      	cmp	r3, #8
 800534a:	d003      	beq.n	8005354 <HAL_RCC_GetSysClockFreq+0x50>
 800534c:	e02d      	b.n	80053aa <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800534e:	4b1e      	ldr	r3, [pc, #120]	; (80053c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005350:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005352:	e02d      	b.n	80053b0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005356:	0c9b      	lsrs	r3, r3, #18
 8005358:	220f      	movs	r2, #15
 800535a:	4013      	ands	r3, r2
 800535c:	2214      	movs	r2, #20
 800535e:	18ba      	adds	r2, r7, r2
 8005360:	5cd3      	ldrb	r3, [r2, r3]
 8005362:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005364:	4b17      	ldr	r3, [pc, #92]	; (80053c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005368:	220f      	movs	r2, #15
 800536a:	4013      	ands	r3, r2
 800536c:	1d3a      	adds	r2, r7, #4
 800536e:	5cd3      	ldrb	r3, [r2, r3]
 8005370:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005374:	2380      	movs	r3, #128	; 0x80
 8005376:	025b      	lsls	r3, r3, #9
 8005378:	4013      	ands	r3, r2
 800537a:	d009      	beq.n	8005390 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800537c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800537e:	4812      	ldr	r0, [pc, #72]	; (80053c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005380:	f7fa fee8 	bl	8000154 <__udivsi3>
 8005384:	0003      	movs	r3, r0
 8005386:	001a      	movs	r2, r3
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	4353      	muls	r3, r2
 800538c:	637b      	str	r3, [r7, #52]	; 0x34
 800538e:	e009      	b.n	80053a4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005390:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005392:	000a      	movs	r2, r1
 8005394:	0152      	lsls	r2, r2, #5
 8005396:	1a52      	subs	r2, r2, r1
 8005398:	0193      	lsls	r3, r2, #6
 800539a:	1a9b      	subs	r3, r3, r2
 800539c:	00db      	lsls	r3, r3, #3
 800539e:	185b      	adds	r3, r3, r1
 80053a0:	021b      	lsls	r3, r3, #8
 80053a2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80053a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80053a8:	e002      	b.n	80053b0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80053aa:	4b07      	ldr	r3, [pc, #28]	; (80053c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80053ac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80053ae:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80053b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80053b2:	0018      	movs	r0, r3
 80053b4:	46bd      	mov	sp, r7
 80053b6:	b00f      	add	sp, #60	; 0x3c
 80053b8:	bd90      	pop	{r4, r7, pc}
 80053ba:	46c0      	nop			; (mov r8, r8)
 80053bc:	0800a084 	.word	0x0800a084
 80053c0:	0800a094 	.word	0x0800a094
 80053c4:	40021000 	.word	0x40021000
 80053c8:	007a1200 	.word	0x007a1200

080053cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053d0:	4b02      	ldr	r3, [pc, #8]	; (80053dc <HAL_RCC_GetHCLKFreq+0x10>)
 80053d2:	681b      	ldr	r3, [r3, #0]
}
 80053d4:	0018      	movs	r0, r3
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	46c0      	nop			; (mov r8, r8)
 80053dc:	20000000 	.word	0x20000000

080053e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80053e4:	f7ff fff2 	bl	80053cc <HAL_RCC_GetHCLKFreq>
 80053e8:	0001      	movs	r1, r0
 80053ea:	4b06      	ldr	r3, [pc, #24]	; (8005404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	0a1b      	lsrs	r3, r3, #8
 80053f0:	2207      	movs	r2, #7
 80053f2:	4013      	ands	r3, r2
 80053f4:	4a04      	ldr	r2, [pc, #16]	; (8005408 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053f6:	5cd3      	ldrb	r3, [r2, r3]
 80053f8:	40d9      	lsrs	r1, r3
 80053fa:	000b      	movs	r3, r1
}    
 80053fc:	0018      	movs	r0, r3
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	46c0      	nop			; (mov r8, r8)
 8005404:	40021000 	.word	0x40021000
 8005408:	0800a134 	.word	0x0800a134

0800540c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005414:	2300      	movs	r3, #0
 8005416:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005418:	2300      	movs	r3, #0
 800541a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	2380      	movs	r3, #128	; 0x80
 8005422:	025b      	lsls	r3, r3, #9
 8005424:	4013      	ands	r3, r2
 8005426:	d100      	bne.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005428:	e08e      	b.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800542a:	2017      	movs	r0, #23
 800542c:	183b      	adds	r3, r7, r0
 800542e:	2200      	movs	r2, #0
 8005430:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005432:	4b57      	ldr	r3, [pc, #348]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005434:	69da      	ldr	r2, [r3, #28]
 8005436:	2380      	movs	r3, #128	; 0x80
 8005438:	055b      	lsls	r3, r3, #21
 800543a:	4013      	ands	r3, r2
 800543c:	d110      	bne.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800543e:	4b54      	ldr	r3, [pc, #336]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005440:	69da      	ldr	r2, [r3, #28]
 8005442:	4b53      	ldr	r3, [pc, #332]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005444:	2180      	movs	r1, #128	; 0x80
 8005446:	0549      	lsls	r1, r1, #21
 8005448:	430a      	orrs	r2, r1
 800544a:	61da      	str	r2, [r3, #28]
 800544c:	4b50      	ldr	r3, [pc, #320]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800544e:	69da      	ldr	r2, [r3, #28]
 8005450:	2380      	movs	r3, #128	; 0x80
 8005452:	055b      	lsls	r3, r3, #21
 8005454:	4013      	ands	r3, r2
 8005456:	60bb      	str	r3, [r7, #8]
 8005458:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800545a:	183b      	adds	r3, r7, r0
 800545c:	2201      	movs	r2, #1
 800545e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005460:	4b4c      	ldr	r3, [pc, #304]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	2380      	movs	r3, #128	; 0x80
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	4013      	ands	r3, r2
 800546a:	d11a      	bne.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800546c:	4b49      	ldr	r3, [pc, #292]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	4b48      	ldr	r3, [pc, #288]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005472:	2180      	movs	r1, #128	; 0x80
 8005474:	0049      	lsls	r1, r1, #1
 8005476:	430a      	orrs	r2, r1
 8005478:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800547a:	f7fe fc59 	bl	8003d30 <HAL_GetTick>
 800547e:	0003      	movs	r3, r0
 8005480:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005482:	e008      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005484:	f7fe fc54 	bl	8003d30 <HAL_GetTick>
 8005488:	0002      	movs	r2, r0
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b64      	cmp	r3, #100	; 0x64
 8005490:	d901      	bls.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e077      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005496:	4b3f      	ldr	r3, [pc, #252]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	2380      	movs	r3, #128	; 0x80
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	4013      	ands	r3, r2
 80054a0:	d0f0      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054a2:	4b3b      	ldr	r3, [pc, #236]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80054a4:	6a1a      	ldr	r2, [r3, #32]
 80054a6:	23c0      	movs	r3, #192	; 0xc0
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4013      	ands	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d034      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	23c0      	movs	r3, #192	; 0xc0
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4013      	ands	r3, r2
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d02c      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054c4:	4b32      	ldr	r3, [pc, #200]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	4a33      	ldr	r2, [pc, #204]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80054ca:	4013      	ands	r3, r2
 80054cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054ce:	4b30      	ldr	r3, [pc, #192]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80054d0:	6a1a      	ldr	r2, [r3, #32]
 80054d2:	4b2f      	ldr	r3, [pc, #188]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80054d4:	2180      	movs	r1, #128	; 0x80
 80054d6:	0249      	lsls	r1, r1, #9
 80054d8:	430a      	orrs	r2, r1
 80054da:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054dc:	4b2c      	ldr	r3, [pc, #176]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80054de:	6a1a      	ldr	r2, [r3, #32]
 80054e0:	4b2b      	ldr	r3, [pc, #172]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80054e2:	492e      	ldr	r1, [pc, #184]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80054e4:	400a      	ands	r2, r1
 80054e6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80054e8:	4b29      	ldr	r3, [pc, #164]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2201      	movs	r2, #1
 80054f2:	4013      	ands	r3, r2
 80054f4:	d013      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f6:	f7fe fc1b 	bl	8003d30 <HAL_GetTick>
 80054fa:	0003      	movs	r3, r0
 80054fc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054fe:	e009      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005500:	f7fe fc16 	bl	8003d30 <HAL_GetTick>
 8005504:	0002      	movs	r2, r0
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	4a25      	ldr	r2, [pc, #148]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d901      	bls.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e038      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005514:	4b1e      	ldr	r3, [pc, #120]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	2202      	movs	r2, #2
 800551a:	4013      	ands	r3, r2
 800551c:	d0f0      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800551e:	4b1c      	ldr	r3, [pc, #112]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	4a1d      	ldr	r2, [pc, #116]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005524:	4013      	ands	r3, r2
 8005526:	0019      	movs	r1, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	4b18      	ldr	r3, [pc, #96]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800552e:	430a      	orrs	r2, r1
 8005530:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005532:	2317      	movs	r3, #23
 8005534:	18fb      	adds	r3, r7, r3
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d105      	bne.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800553c:	4b14      	ldr	r3, [pc, #80]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800553e:	69da      	ldr	r2, [r3, #28]
 8005540:	4b13      	ldr	r3, [pc, #76]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005542:	4918      	ldr	r1, [pc, #96]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8005544:	400a      	ands	r2, r1
 8005546:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2201      	movs	r2, #1
 800554e:	4013      	ands	r3, r2
 8005550:	d009      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005552:	4b0f      	ldr	r3, [pc, #60]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005556:	2203      	movs	r2, #3
 8005558:	4393      	bics	r3, r2
 800555a:	0019      	movs	r1, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	4b0b      	ldr	r3, [pc, #44]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005562:	430a      	orrs	r2, r1
 8005564:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2220      	movs	r2, #32
 800556c:	4013      	ands	r3, r2
 800556e:	d009      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005570:	4b07      	ldr	r3, [pc, #28]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005574:	2210      	movs	r2, #16
 8005576:	4393      	bics	r3, r2
 8005578:	0019      	movs	r1, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	4b04      	ldr	r3, [pc, #16]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005580:	430a      	orrs	r2, r1
 8005582:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	0018      	movs	r0, r3
 8005588:	46bd      	mov	sp, r7
 800558a:	b006      	add	sp, #24
 800558c:	bd80      	pop	{r7, pc}
 800558e:	46c0      	nop			; (mov r8, r8)
 8005590:	40021000 	.word	0x40021000
 8005594:	40007000 	.word	0x40007000
 8005598:	fffffcff 	.word	0xfffffcff
 800559c:	fffeffff 	.word	0xfffeffff
 80055a0:	00001388 	.word	0x00001388
 80055a4:	efffffff 	.word	0xefffffff

080055a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e0a8      	b.n	800570c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d109      	bne.n	80055d6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	2382      	movs	r3, #130	; 0x82
 80055c8:	005b      	lsls	r3, r3, #1
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d009      	beq.n	80055e2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	61da      	str	r2, [r3, #28]
 80055d4:	e005      	b.n	80055e2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	225d      	movs	r2, #93	; 0x5d
 80055ec:	5c9b      	ldrb	r3, [r3, r2]
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d107      	bne.n	8005604 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	225c      	movs	r2, #92	; 0x5c
 80055f8:	2100      	movs	r1, #0
 80055fa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	0018      	movs	r0, r3
 8005600:	f7fe f940 	bl	8003884 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	225d      	movs	r2, #93	; 0x5d
 8005608:	2102      	movs	r1, #2
 800560a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2140      	movs	r1, #64	; 0x40
 8005618:	438a      	bics	r2, r1
 800561a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68da      	ldr	r2, [r3, #12]
 8005620:	23e0      	movs	r3, #224	; 0xe0
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	429a      	cmp	r2, r3
 8005626:	d902      	bls.n	800562e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005628:	2300      	movs	r3, #0
 800562a:	60fb      	str	r3, [r7, #12]
 800562c:	e002      	b.n	8005634 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800562e:	2380      	movs	r3, #128	; 0x80
 8005630:	015b      	lsls	r3, r3, #5
 8005632:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68da      	ldr	r2, [r3, #12]
 8005638:	23f0      	movs	r3, #240	; 0xf0
 800563a:	011b      	lsls	r3, r3, #4
 800563c:	429a      	cmp	r2, r3
 800563e:	d008      	beq.n	8005652 <HAL_SPI_Init+0xaa>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68da      	ldr	r2, [r3, #12]
 8005644:	23e0      	movs	r3, #224	; 0xe0
 8005646:	00db      	lsls	r3, r3, #3
 8005648:	429a      	cmp	r2, r3
 800564a:	d002      	beq.n	8005652 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	2382      	movs	r3, #130	; 0x82
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	401a      	ands	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6899      	ldr	r1, [r3, #8]
 8005660:	2384      	movs	r3, #132	; 0x84
 8005662:	021b      	lsls	r3, r3, #8
 8005664:	400b      	ands	r3, r1
 8005666:	431a      	orrs	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	2102      	movs	r1, #2
 800566e:	400b      	ands	r3, r1
 8005670:	431a      	orrs	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	2101      	movs	r1, #1
 8005678:	400b      	ands	r3, r1
 800567a:	431a      	orrs	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6999      	ldr	r1, [r3, #24]
 8005680:	2380      	movs	r3, #128	; 0x80
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	400b      	ands	r3, r1
 8005686:	431a      	orrs	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	69db      	ldr	r3, [r3, #28]
 800568c:	2138      	movs	r1, #56	; 0x38
 800568e:	400b      	ands	r3, r1
 8005690:	431a      	orrs	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	2180      	movs	r1, #128	; 0x80
 8005698:	400b      	ands	r3, r1
 800569a:	431a      	orrs	r2, r3
 800569c:	0011      	movs	r1, r2
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056a2:	2380      	movs	r3, #128	; 0x80
 80056a4:	019b      	lsls	r3, r3, #6
 80056a6:	401a      	ands	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	0c1b      	lsrs	r3, r3, #16
 80056b6:	2204      	movs	r2, #4
 80056b8:	401a      	ands	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056be:	2110      	movs	r1, #16
 80056c0:	400b      	ands	r3, r1
 80056c2:	431a      	orrs	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c8:	2108      	movs	r1, #8
 80056ca:	400b      	ands	r3, r1
 80056cc:	431a      	orrs	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68d9      	ldr	r1, [r3, #12]
 80056d2:	23f0      	movs	r3, #240	; 0xf0
 80056d4:	011b      	lsls	r3, r3, #4
 80056d6:	400b      	ands	r3, r1
 80056d8:	431a      	orrs	r2, r3
 80056da:	0011      	movs	r1, r2
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	2380      	movs	r3, #128	; 0x80
 80056e0:	015b      	lsls	r3, r3, #5
 80056e2:	401a      	ands	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	430a      	orrs	r2, r1
 80056ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	69da      	ldr	r2, [r3, #28]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4907      	ldr	r1, [pc, #28]	; (8005714 <HAL_SPI_Init+0x16c>)
 80056f8:	400a      	ands	r2, r1
 80056fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	225d      	movs	r2, #93	; 0x5d
 8005706:	2101      	movs	r1, #1
 8005708:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	0018      	movs	r0, r3
 800570e:	46bd      	mov	sp, r7
 8005710:	b004      	add	sp, #16
 8005712:	bd80      	pop	{r7, pc}
 8005714:	fffff7ff 	.word	0xfffff7ff

08005718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e042      	b.n	80057b0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	223d      	movs	r2, #61	; 0x3d
 800572e:	5c9b      	ldrb	r3, [r3, r2]
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d107      	bne.n	8005746 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	223c      	movs	r2, #60	; 0x3c
 800573a:	2100      	movs	r1, #0
 800573c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	0018      	movs	r0, r3
 8005742:	f7fe f8eb 	bl	800391c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	223d      	movs	r2, #61	; 0x3d
 800574a:	2102      	movs	r1, #2
 800574c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	3304      	adds	r3, #4
 8005756:	0019      	movs	r1, r3
 8005758:	0010      	movs	r0, r2
 800575a:	f000 f9af 	bl	8005abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2246      	movs	r2, #70	; 0x46
 8005762:	2101      	movs	r1, #1
 8005764:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	223e      	movs	r2, #62	; 0x3e
 800576a:	2101      	movs	r1, #1
 800576c:	5499      	strb	r1, [r3, r2]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	223f      	movs	r2, #63	; 0x3f
 8005772:	2101      	movs	r1, #1
 8005774:	5499      	strb	r1, [r3, r2]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2240      	movs	r2, #64	; 0x40
 800577a:	2101      	movs	r1, #1
 800577c:	5499      	strb	r1, [r3, r2]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2241      	movs	r2, #65	; 0x41
 8005782:	2101      	movs	r1, #1
 8005784:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2242      	movs	r2, #66	; 0x42
 800578a:	2101      	movs	r1, #1
 800578c:	5499      	strb	r1, [r3, r2]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2243      	movs	r2, #67	; 0x43
 8005792:	2101      	movs	r1, #1
 8005794:	5499      	strb	r1, [r3, r2]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2244      	movs	r2, #68	; 0x44
 800579a:	2101      	movs	r1, #1
 800579c:	5499      	strb	r1, [r3, r2]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2245      	movs	r2, #69	; 0x45
 80057a2:	2101      	movs	r1, #1
 80057a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	223d      	movs	r2, #61	; 0x3d
 80057aa:	2101      	movs	r1, #1
 80057ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	0018      	movs	r0, r3
 80057b2:	46bd      	mov	sp, r7
 80057b4:	b002      	add	sp, #8
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	223d      	movs	r2, #61	; 0x3d
 80057c4:	5c9b      	ldrb	r3, [r3, r2]
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d001      	beq.n	80057d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e02d      	b.n	800582c <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	223d      	movs	r2, #61	; 0x3d
 80057d4:	2102      	movs	r1, #2
 80057d6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a15      	ldr	r2, [pc, #84]	; (8005834 <HAL_TIM_Base_Start+0x7c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d009      	beq.n	80057f6 <HAL_TIM_Base_Start+0x3e>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a14      	ldr	r2, [pc, #80]	; (8005838 <HAL_TIM_Base_Start+0x80>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d004      	beq.n	80057f6 <HAL_TIM_Base_Start+0x3e>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a12      	ldr	r2, [pc, #72]	; (800583c <HAL_TIM_Base_Start+0x84>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d111      	bne.n	800581a <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	2207      	movs	r2, #7
 80057fe:	4013      	ands	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2b06      	cmp	r3, #6
 8005806:	d010      	beq.n	800582a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2101      	movs	r1, #1
 8005814:	430a      	orrs	r2, r1
 8005816:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005818:	e007      	b.n	800582a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2101      	movs	r1, #1
 8005826:	430a      	orrs	r2, r1
 8005828:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	0018      	movs	r0, r3
 800582e:	46bd      	mov	sp, r7
 8005830:	b004      	add	sp, #16
 8005832:	bd80      	pop	{r7, pc}
 8005834:	40012c00 	.word	0x40012c00
 8005838:	40000400 	.word	0x40000400
 800583c:	40014000 	.word	0x40014000

08005840 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	2202      	movs	r2, #2
 8005850:	4013      	ands	r3, r2
 8005852:	2b02      	cmp	r3, #2
 8005854:	d124      	bne.n	80058a0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	2202      	movs	r2, #2
 800585e:	4013      	ands	r3, r2
 8005860:	2b02      	cmp	r3, #2
 8005862:	d11d      	bne.n	80058a0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2203      	movs	r2, #3
 800586a:	4252      	negs	r2, r2
 800586c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	2203      	movs	r2, #3
 800587c:	4013      	ands	r3, r2
 800587e:	d004      	beq.n	800588a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	0018      	movs	r0, r3
 8005884:	f000 f902 	bl	8005a8c <HAL_TIM_IC_CaptureCallback>
 8005888:	e007      	b.n	800589a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	0018      	movs	r0, r3
 800588e:	f000 f8f5 	bl	8005a7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	0018      	movs	r0, r3
 8005896:	f000 f901 	bl	8005a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	2204      	movs	r2, #4
 80058a8:	4013      	ands	r3, r2
 80058aa:	2b04      	cmp	r3, #4
 80058ac:	d125      	bne.n	80058fa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	2204      	movs	r2, #4
 80058b6:	4013      	ands	r3, r2
 80058b8:	2b04      	cmp	r3, #4
 80058ba:	d11e      	bne.n	80058fa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2205      	movs	r2, #5
 80058c2:	4252      	negs	r2, r2
 80058c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2202      	movs	r2, #2
 80058ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699a      	ldr	r2, [r3, #24]
 80058d2:	23c0      	movs	r3, #192	; 0xc0
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4013      	ands	r3, r2
 80058d8:	d004      	beq.n	80058e4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	0018      	movs	r0, r3
 80058de:	f000 f8d5 	bl	8005a8c <HAL_TIM_IC_CaptureCallback>
 80058e2:	e007      	b.n	80058f4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	0018      	movs	r0, r3
 80058e8:	f000 f8c8 	bl	8005a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	0018      	movs	r0, r3
 80058f0:	f000 f8d4 	bl	8005a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	2208      	movs	r2, #8
 8005902:	4013      	ands	r3, r2
 8005904:	2b08      	cmp	r3, #8
 8005906:	d124      	bne.n	8005952 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	2208      	movs	r2, #8
 8005910:	4013      	ands	r3, r2
 8005912:	2b08      	cmp	r3, #8
 8005914:	d11d      	bne.n	8005952 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2209      	movs	r2, #9
 800591c:	4252      	negs	r2, r2
 800591e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2204      	movs	r2, #4
 8005924:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	2203      	movs	r2, #3
 800592e:	4013      	ands	r3, r2
 8005930:	d004      	beq.n	800593c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	0018      	movs	r0, r3
 8005936:	f000 f8a9 	bl	8005a8c <HAL_TIM_IC_CaptureCallback>
 800593a:	e007      	b.n	800594c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	0018      	movs	r0, r3
 8005940:	f000 f89c 	bl	8005a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	0018      	movs	r0, r3
 8005948:	f000 f8a8 	bl	8005a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	2210      	movs	r2, #16
 800595a:	4013      	ands	r3, r2
 800595c:	2b10      	cmp	r3, #16
 800595e:	d125      	bne.n	80059ac <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	2210      	movs	r2, #16
 8005968:	4013      	ands	r3, r2
 800596a:	2b10      	cmp	r3, #16
 800596c:	d11e      	bne.n	80059ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2211      	movs	r2, #17
 8005974:	4252      	negs	r2, r2
 8005976:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2208      	movs	r2, #8
 800597c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	69da      	ldr	r2, [r3, #28]
 8005984:	23c0      	movs	r3, #192	; 0xc0
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4013      	ands	r3, r2
 800598a:	d004      	beq.n	8005996 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	0018      	movs	r0, r3
 8005990:	f000 f87c 	bl	8005a8c <HAL_TIM_IC_CaptureCallback>
 8005994:	e007      	b.n	80059a6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	0018      	movs	r0, r3
 800599a:	f000 f86f 	bl	8005a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	0018      	movs	r0, r3
 80059a2:	f000 f87b 	bl	8005a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	2201      	movs	r2, #1
 80059b4:	4013      	ands	r3, r2
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d10f      	bne.n	80059da <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	2201      	movs	r2, #1
 80059c2:	4013      	ands	r3, r2
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d108      	bne.n	80059da <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2202      	movs	r2, #2
 80059ce:	4252      	negs	r2, r2
 80059d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	0018      	movs	r0, r3
 80059d6:	f000 f849 	bl	8005a6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	2280      	movs	r2, #128	; 0x80
 80059e2:	4013      	ands	r3, r2
 80059e4:	2b80      	cmp	r3, #128	; 0x80
 80059e6:	d10f      	bne.n	8005a08 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	2280      	movs	r2, #128	; 0x80
 80059f0:	4013      	ands	r3, r2
 80059f2:	2b80      	cmp	r3, #128	; 0x80
 80059f4:	d108      	bne.n	8005a08 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2281      	movs	r2, #129	; 0x81
 80059fc:	4252      	negs	r2, r2
 80059fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	0018      	movs	r0, r3
 8005a04:	f000 f8d8 	bl	8005bb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	2240      	movs	r2, #64	; 0x40
 8005a10:	4013      	ands	r3, r2
 8005a12:	2b40      	cmp	r3, #64	; 0x40
 8005a14:	d10f      	bne.n	8005a36 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	2240      	movs	r2, #64	; 0x40
 8005a1e:	4013      	ands	r3, r2
 8005a20:	2b40      	cmp	r3, #64	; 0x40
 8005a22:	d108      	bne.n	8005a36 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2241      	movs	r2, #65	; 0x41
 8005a2a:	4252      	negs	r2, r2
 8005a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	0018      	movs	r0, r3
 8005a32:	f000 f83b 	bl	8005aac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	2220      	movs	r2, #32
 8005a3e:	4013      	ands	r3, r2
 8005a40:	2b20      	cmp	r3, #32
 8005a42:	d10f      	bne.n	8005a64 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	2b20      	cmp	r3, #32
 8005a50:	d108      	bne.n	8005a64 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2221      	movs	r2, #33	; 0x21
 8005a58:	4252      	negs	r2, r2
 8005a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	0018      	movs	r0, r3
 8005a60:	f000 f8a2 	bl	8005ba8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a64:	46c0      	nop			; (mov r8, r8)
 8005a66:	46bd      	mov	sp, r7
 8005a68:	b002      	add	sp, #8
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005a74:	46c0      	nop			; (mov r8, r8)
 8005a76:	46bd      	mov	sp, r7
 8005a78:	b002      	add	sp, #8
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a84:	46c0      	nop			; (mov r8, r8)
 8005a86:	46bd      	mov	sp, r7
 8005a88:	b002      	add	sp, #8
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a94:	46c0      	nop			; (mov r8, r8)
 8005a96:	46bd      	mov	sp, r7
 8005a98:	b002      	add	sp, #8
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005aa4:	46c0      	nop			; (mov r8, r8)
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	b002      	add	sp, #8
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ab4:	46c0      	nop			; (mov r8, r8)
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	b002      	add	sp, #8
 8005aba:	bd80      	pop	{r7, pc}

08005abc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a2f      	ldr	r2, [pc, #188]	; (8005b8c <TIM_Base_SetConfig+0xd0>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d003      	beq.n	8005adc <TIM_Base_SetConfig+0x20>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a2e      	ldr	r2, [pc, #184]	; (8005b90 <TIM_Base_SetConfig+0xd4>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d108      	bne.n	8005aee <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2270      	movs	r2, #112	; 0x70
 8005ae0:	4393      	bics	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a26      	ldr	r2, [pc, #152]	; (8005b8c <TIM_Base_SetConfig+0xd0>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d013      	beq.n	8005b1e <TIM_Base_SetConfig+0x62>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a25      	ldr	r2, [pc, #148]	; (8005b90 <TIM_Base_SetConfig+0xd4>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d00f      	beq.n	8005b1e <TIM_Base_SetConfig+0x62>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a24      	ldr	r2, [pc, #144]	; (8005b94 <TIM_Base_SetConfig+0xd8>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d00b      	beq.n	8005b1e <TIM_Base_SetConfig+0x62>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a23      	ldr	r2, [pc, #140]	; (8005b98 <TIM_Base_SetConfig+0xdc>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d007      	beq.n	8005b1e <TIM_Base_SetConfig+0x62>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a22      	ldr	r2, [pc, #136]	; (8005b9c <TIM_Base_SetConfig+0xe0>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d003      	beq.n	8005b1e <TIM_Base_SetConfig+0x62>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a21      	ldr	r2, [pc, #132]	; (8005ba0 <TIM_Base_SetConfig+0xe4>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d108      	bne.n	8005b30 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4a20      	ldr	r2, [pc, #128]	; (8005ba4 <TIM_Base_SetConfig+0xe8>)
 8005b22:	4013      	ands	r3, r2
 8005b24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2280      	movs	r2, #128	; 0x80
 8005b34:	4393      	bics	r3, r2
 8005b36:	001a      	movs	r2, r3
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	689a      	ldr	r2, [r3, #8]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a0c      	ldr	r2, [pc, #48]	; (8005b8c <TIM_Base_SetConfig+0xd0>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d00b      	beq.n	8005b76 <TIM_Base_SetConfig+0xba>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a0d      	ldr	r2, [pc, #52]	; (8005b98 <TIM_Base_SetConfig+0xdc>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d007      	beq.n	8005b76 <TIM_Base_SetConfig+0xba>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a0c      	ldr	r2, [pc, #48]	; (8005b9c <TIM_Base_SetConfig+0xe0>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d003      	beq.n	8005b76 <TIM_Base_SetConfig+0xba>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a0b      	ldr	r2, [pc, #44]	; (8005ba0 <TIM_Base_SetConfig+0xe4>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d103      	bne.n	8005b7e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	691a      	ldr	r2, [r3, #16]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	615a      	str	r2, [r3, #20]
}
 8005b84:	46c0      	nop			; (mov r8, r8)
 8005b86:	46bd      	mov	sp, r7
 8005b88:	b004      	add	sp, #16
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	40012c00 	.word	0x40012c00
 8005b90:	40000400 	.word	0x40000400
 8005b94:	40002000 	.word	0x40002000
 8005b98:	40014000 	.word	0x40014000
 8005b9c:	40014400 	.word	0x40014400
 8005ba0:	40014800 	.word	0x40014800
 8005ba4:	fffffcff 	.word	0xfffffcff

08005ba8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bb0:	46c0      	nop			; (mov r8, r8)
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	b002      	add	sp, #8
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bc0:	46c0      	nop			; (mov r8, r8)
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	b002      	add	sp, #8
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e044      	b.n	8005c64 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d107      	bne.n	8005bf2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2274      	movs	r2, #116	; 0x74
 8005be6:	2100      	movs	r1, #0
 8005be8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	0018      	movs	r0, r3
 8005bee:	f7fd febb 	bl	8003968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2224      	movs	r2, #36	; 0x24
 8005bf6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2101      	movs	r1, #1
 8005c04:	438a      	bics	r2, r1
 8005c06:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	0018      	movs	r0, r3
 8005c0c:	f000 fc16 	bl	800643c <UART_SetConfig>
 8005c10:	0003      	movs	r3, r0
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d101      	bne.n	8005c1a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e024      	b.n	8005c64 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d003      	beq.n	8005c2a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	0018      	movs	r0, r3
 8005c26:	f000 fd49 	bl	80066bc <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	490d      	ldr	r1, [pc, #52]	; (8005c6c <HAL_UART_Init+0xa4>)
 8005c36:	400a      	ands	r2, r1
 8005c38:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	689a      	ldr	r2, [r3, #8]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2108      	movs	r1, #8
 8005c46:	438a      	bics	r2, r1
 8005c48:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2101      	movs	r1, #1
 8005c56:	430a      	orrs	r2, r1
 8005c58:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	0018      	movs	r0, r3
 8005c5e:	f000 fde1 	bl	8006824 <UART_CheckIdleState>
 8005c62:	0003      	movs	r3, r0
}
 8005c64:	0018      	movs	r0, r3
 8005c66:	46bd      	mov	sp, r7
 8005c68:	b002      	add	sp, #8
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	fffff7ff 	.word	0xfffff7ff

08005c70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b08a      	sub	sp, #40	; 0x28
 8005c74:	af02      	add	r7, sp, #8
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	603b      	str	r3, [r7, #0]
 8005c7c:	1dbb      	adds	r3, r7, #6
 8005c7e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c84:	2b20      	cmp	r3, #32
 8005c86:	d000      	beq.n	8005c8a <HAL_UART_Transmit+0x1a>
 8005c88:	e096      	b.n	8005db8 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d003      	beq.n	8005c98 <HAL_UART_Transmit+0x28>
 8005c90:	1dbb      	adds	r3, r7, #6
 8005c92:	881b      	ldrh	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e08e      	b.n	8005dba <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	689a      	ldr	r2, [r3, #8]
 8005ca0:	2380      	movs	r3, #128	; 0x80
 8005ca2:	015b      	lsls	r3, r3, #5
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d109      	bne.n	8005cbc <HAL_UART_Transmit+0x4c>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d105      	bne.n	8005cbc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	d001      	beq.n	8005cbc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e07e      	b.n	8005dba <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2274      	movs	r2, #116	; 0x74
 8005cc0:	5c9b      	ldrb	r3, [r3, r2]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d101      	bne.n	8005cca <HAL_UART_Transmit+0x5a>
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	e077      	b.n	8005dba <HAL_UART_Transmit+0x14a>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2274      	movs	r2, #116	; 0x74
 8005cce:	2101      	movs	r1, #1
 8005cd0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2280      	movs	r2, #128	; 0x80
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2221      	movs	r2, #33	; 0x21
 8005cde:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ce0:	f7fe f826 	bl	8003d30 <HAL_GetTick>
 8005ce4:	0003      	movs	r3, r0
 8005ce6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	1dba      	adds	r2, r7, #6
 8005cec:	2150      	movs	r1, #80	; 0x50
 8005cee:	8812      	ldrh	r2, [r2, #0]
 8005cf0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	1dba      	adds	r2, r7, #6
 8005cf6:	2152      	movs	r1, #82	; 0x52
 8005cf8:	8812      	ldrh	r2, [r2, #0]
 8005cfa:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	689a      	ldr	r2, [r3, #8]
 8005d00:	2380      	movs	r3, #128	; 0x80
 8005d02:	015b      	lsls	r3, r3, #5
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d108      	bne.n	8005d1a <HAL_UART_Transmit+0xaa>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d104      	bne.n	8005d1a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005d10:	2300      	movs	r3, #0
 8005d12:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	61bb      	str	r3, [r7, #24]
 8005d18:	e003      	b.n	8005d22 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2274      	movs	r2, #116	; 0x74
 8005d26:	2100      	movs	r1, #0
 8005d28:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005d2a:	e02d      	b.n	8005d88 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	9300      	str	r3, [sp, #0]
 8005d34:	0013      	movs	r3, r2
 8005d36:	2200      	movs	r2, #0
 8005d38:	2180      	movs	r1, #128	; 0x80
 8005d3a:	f000 fdbb 	bl	80068b4 <UART_WaitOnFlagUntilTimeout>
 8005d3e:	1e03      	subs	r3, r0, #0
 8005d40:	d001      	beq.n	8005d46 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e039      	b.n	8005dba <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d10b      	bne.n	8005d64 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	881a      	ldrh	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	05d2      	lsls	r2, r2, #23
 8005d56:	0dd2      	lsrs	r2, r2, #23
 8005d58:	b292      	uxth	r2, r2
 8005d5a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	3302      	adds	r3, #2
 8005d60:	61bb      	str	r3, [r7, #24]
 8005d62:	e008      	b.n	8005d76 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	781a      	ldrb	r2, [r3, #0]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	b292      	uxth	r2, r2
 8005d6e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	3301      	adds	r3, #1
 8005d74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2252      	movs	r2, #82	; 0x52
 8005d7a:	5a9b      	ldrh	r3, [r3, r2]
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	b299      	uxth	r1, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2252      	movs	r2, #82	; 0x52
 8005d86:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2252      	movs	r2, #82	; 0x52
 8005d8c:	5a9b      	ldrh	r3, [r3, r2]
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1cb      	bne.n	8005d2c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	0013      	movs	r3, r2
 8005d9e:	2200      	movs	r2, #0
 8005da0:	2140      	movs	r1, #64	; 0x40
 8005da2:	f000 fd87 	bl	80068b4 <UART_WaitOnFlagUntilTimeout>
 8005da6:	1e03      	subs	r3, r0, #0
 8005da8:	d001      	beq.n	8005dae <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e005      	b.n	8005dba <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2220      	movs	r2, #32
 8005db2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005db4:	2300      	movs	r3, #0
 8005db6:	e000      	b.n	8005dba <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005db8:	2302      	movs	r3, #2
  }
}
 8005dba:	0018      	movs	r0, r3
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	b008      	add	sp, #32
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b088      	sub	sp, #32
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	60f8      	str	r0, [r7, #12]
 8005dca:	60b9      	str	r1, [r7, #8]
 8005dcc:	1dbb      	adds	r3, r7, #6
 8005dce:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dd4:	2b20      	cmp	r3, #32
 8005dd6:	d150      	bne.n	8005e7a <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <HAL_UART_Receive_IT+0x24>
 8005dde:	1dbb      	adds	r3, r7, #6
 8005de0:	881b      	ldrh	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e048      	b.n	8005e7c <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	689a      	ldr	r2, [r3, #8]
 8005dee:	2380      	movs	r3, #128	; 0x80
 8005df0:	015b      	lsls	r3, r3, #5
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d109      	bne.n	8005e0a <HAL_UART_Receive_IT+0x48>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d105      	bne.n	8005e0a <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	2201      	movs	r2, #1
 8005e02:	4013      	ands	r3, r2
 8005e04:	d001      	beq.n	8005e0a <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e038      	b.n	8005e7c <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2274      	movs	r2, #116	; 0x74
 8005e0e:	5c9b      	ldrb	r3, [r3, r2]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d101      	bne.n	8005e18 <HAL_UART_Receive_IT+0x56>
 8005e14:	2302      	movs	r3, #2
 8005e16:	e031      	b.n	8005e7c <HAL_UART_Receive_IT+0xba>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2274      	movs	r2, #116	; 0x74
 8005e1c:	2101      	movs	r1, #1
 8005e1e:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	2380      	movs	r3, #128	; 0x80
 8005e2e:	041b      	lsls	r3, r3, #16
 8005e30:	4013      	ands	r3, r2
 8005e32:	d019      	beq.n	8005e68 <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e34:	f3ef 8310 	mrs	r3, PRIMASK
 8005e38:	613b      	str	r3, [r7, #16]
  return(result);
 8005e3a:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e3c:	61fb      	str	r3, [r7, #28]
 8005e3e:	2301      	movs	r3, #1
 8005e40:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f383 8810 	msr	PRIMASK, r3
}
 8005e48:	46c0      	nop			; (mov r8, r8)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2180      	movs	r1, #128	; 0x80
 8005e56:	04c9      	lsls	r1, r1, #19
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	601a      	str	r2, [r3, #0]
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	f383 8810 	msr	PRIMASK, r3
}
 8005e66:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e68:	1dbb      	adds	r3, r7, #6
 8005e6a:	881a      	ldrh	r2, [r3, #0]
 8005e6c:	68b9      	ldr	r1, [r7, #8]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	0018      	movs	r0, r3
 8005e72:	f000 fde3 	bl	8006a3c <UART_Start_Receive_IT>
 8005e76:	0003      	movs	r3, r0
 8005e78:	e000      	b.n	8005e7c <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8005e7a:	2302      	movs	r3, #2
  }
}
 8005e7c:	0018      	movs	r0, r3
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	b008      	add	sp, #32
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e84:	b590      	push	{r4, r7, lr}
 8005e86:	b0ab      	sub	sp, #172	; 0xac
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	69db      	ldr	r3, [r3, #28]
 8005e92:	22a4      	movs	r2, #164	; 0xa4
 8005e94:	18b9      	adds	r1, r7, r2
 8005e96:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	20a0      	movs	r0, #160	; 0xa0
 8005ea0:	1839      	adds	r1, r7, r0
 8005ea2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	219c      	movs	r1, #156	; 0x9c
 8005eac:	1879      	adds	r1, r7, r1
 8005eae:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005eb0:	0011      	movs	r1, r2
 8005eb2:	18bb      	adds	r3, r7, r2
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a99      	ldr	r2, [pc, #612]	; (800611c <HAL_UART_IRQHandler+0x298>)
 8005eb8:	4013      	ands	r3, r2
 8005eba:	2298      	movs	r2, #152	; 0x98
 8005ebc:	18bc      	adds	r4, r7, r2
 8005ebe:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005ec0:	18bb      	adds	r3, r7, r2
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d114      	bne.n	8005ef2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ec8:	187b      	adds	r3, r7, r1
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	4013      	ands	r3, r2
 8005ed0:	d00f      	beq.n	8005ef2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ed2:	183b      	adds	r3, r7, r0
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	4013      	ands	r3, r2
 8005eda:	d00a      	beq.n	8005ef2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d100      	bne.n	8005ee6 <HAL_UART_IRQHandler+0x62>
 8005ee4:	e27e      	b.n	80063e4 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	0010      	movs	r0, r2
 8005eee:	4798      	blx	r3
      }
      return;
 8005ef0:	e278      	b.n	80063e4 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ef2:	2398      	movs	r3, #152	; 0x98
 8005ef4:	18fb      	adds	r3, r7, r3
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d100      	bne.n	8005efe <HAL_UART_IRQHandler+0x7a>
 8005efc:	e114      	b.n	8006128 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005efe:	239c      	movs	r3, #156	; 0x9c
 8005f00:	18fb      	adds	r3, r7, r3
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2201      	movs	r2, #1
 8005f06:	4013      	ands	r3, r2
 8005f08:	d106      	bne.n	8005f18 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005f0a:	23a0      	movs	r3, #160	; 0xa0
 8005f0c:	18fb      	adds	r3, r7, r3
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a83      	ldr	r2, [pc, #524]	; (8006120 <HAL_UART_IRQHandler+0x29c>)
 8005f12:	4013      	ands	r3, r2
 8005f14:	d100      	bne.n	8005f18 <HAL_UART_IRQHandler+0x94>
 8005f16:	e107      	b.n	8006128 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f18:	23a4      	movs	r3, #164	; 0xa4
 8005f1a:	18fb      	adds	r3, r7, r3
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	4013      	ands	r3, r2
 8005f22:	d012      	beq.n	8005f4a <HAL_UART_IRQHandler+0xc6>
 8005f24:	23a0      	movs	r3, #160	; 0xa0
 8005f26:	18fb      	adds	r3, r7, r3
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	2380      	movs	r3, #128	; 0x80
 8005f2c:	005b      	lsls	r3, r3, #1
 8005f2e:	4013      	ands	r3, r2
 8005f30:	d00b      	beq.n	8005f4a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2201      	movs	r2, #1
 8005f38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2280      	movs	r2, #128	; 0x80
 8005f3e:	589b      	ldr	r3, [r3, r2]
 8005f40:	2201      	movs	r2, #1
 8005f42:	431a      	orrs	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2180      	movs	r1, #128	; 0x80
 8005f48:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f4a:	23a4      	movs	r3, #164	; 0xa4
 8005f4c:	18fb      	adds	r3, r7, r3
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2202      	movs	r2, #2
 8005f52:	4013      	ands	r3, r2
 8005f54:	d011      	beq.n	8005f7a <HAL_UART_IRQHandler+0xf6>
 8005f56:	239c      	movs	r3, #156	; 0x9c
 8005f58:	18fb      	adds	r3, r7, r3
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	4013      	ands	r3, r2
 8005f60:	d00b      	beq.n	8005f7a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2202      	movs	r2, #2
 8005f68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2280      	movs	r2, #128	; 0x80
 8005f6e:	589b      	ldr	r3, [r3, r2]
 8005f70:	2204      	movs	r2, #4
 8005f72:	431a      	orrs	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2180      	movs	r1, #128	; 0x80
 8005f78:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f7a:	23a4      	movs	r3, #164	; 0xa4
 8005f7c:	18fb      	adds	r3, r7, r3
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2204      	movs	r2, #4
 8005f82:	4013      	ands	r3, r2
 8005f84:	d011      	beq.n	8005faa <HAL_UART_IRQHandler+0x126>
 8005f86:	239c      	movs	r3, #156	; 0x9c
 8005f88:	18fb      	adds	r3, r7, r3
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	4013      	ands	r3, r2
 8005f90:	d00b      	beq.n	8005faa <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2204      	movs	r2, #4
 8005f98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2280      	movs	r2, #128	; 0x80
 8005f9e:	589b      	ldr	r3, [r3, r2]
 8005fa0:	2202      	movs	r2, #2
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2180      	movs	r1, #128	; 0x80
 8005fa8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005faa:	23a4      	movs	r3, #164	; 0xa4
 8005fac:	18fb      	adds	r3, r7, r3
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2208      	movs	r2, #8
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	d017      	beq.n	8005fe6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fb6:	23a0      	movs	r3, #160	; 0xa0
 8005fb8:	18fb      	adds	r3, r7, r3
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	d105      	bne.n	8005fce <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005fc2:	239c      	movs	r3, #156	; 0x9c
 8005fc4:	18fb      	adds	r3, r7, r3
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fcc:	d00b      	beq.n	8005fe6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2208      	movs	r2, #8
 8005fd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2280      	movs	r2, #128	; 0x80
 8005fda:	589b      	ldr	r3, [r3, r2]
 8005fdc:	2208      	movs	r2, #8
 8005fde:	431a      	orrs	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2180      	movs	r1, #128	; 0x80
 8005fe4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005fe6:	23a4      	movs	r3, #164	; 0xa4
 8005fe8:	18fb      	adds	r3, r7, r3
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	2380      	movs	r3, #128	; 0x80
 8005fee:	011b      	lsls	r3, r3, #4
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	d013      	beq.n	800601c <HAL_UART_IRQHandler+0x198>
 8005ff4:	23a0      	movs	r3, #160	; 0xa0
 8005ff6:	18fb      	adds	r3, r7, r3
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	2380      	movs	r3, #128	; 0x80
 8005ffc:	04db      	lsls	r3, r3, #19
 8005ffe:	4013      	ands	r3, r2
 8006000:	d00c      	beq.n	800601c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2280      	movs	r2, #128	; 0x80
 8006008:	0112      	lsls	r2, r2, #4
 800600a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2280      	movs	r2, #128	; 0x80
 8006010:	589b      	ldr	r3, [r3, r2]
 8006012:	2220      	movs	r2, #32
 8006014:	431a      	orrs	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2180      	movs	r1, #128	; 0x80
 800601a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2280      	movs	r2, #128	; 0x80
 8006020:	589b      	ldr	r3, [r3, r2]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d100      	bne.n	8006028 <HAL_UART_IRQHandler+0x1a4>
 8006026:	e1df      	b.n	80063e8 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006028:	23a4      	movs	r3, #164	; 0xa4
 800602a:	18fb      	adds	r3, r7, r3
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2220      	movs	r2, #32
 8006030:	4013      	ands	r3, r2
 8006032:	d00e      	beq.n	8006052 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006034:	23a0      	movs	r3, #160	; 0xa0
 8006036:	18fb      	adds	r3, r7, r3
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2220      	movs	r2, #32
 800603c:	4013      	ands	r3, r2
 800603e:	d008      	beq.n	8006052 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006044:	2b00      	cmp	r3, #0
 8006046:	d004      	beq.n	8006052 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	0010      	movs	r0, r2
 8006050:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2280      	movs	r2, #128	; 0x80
 8006056:	589b      	ldr	r3, [r3, r2]
 8006058:	2194      	movs	r1, #148	; 0x94
 800605a:	187a      	adds	r2, r7, r1
 800605c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	2240      	movs	r2, #64	; 0x40
 8006066:	4013      	ands	r3, r2
 8006068:	2b40      	cmp	r3, #64	; 0x40
 800606a:	d004      	beq.n	8006076 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800606c:	187b      	adds	r3, r7, r1
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2228      	movs	r2, #40	; 0x28
 8006072:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006074:	d047      	beq.n	8006106 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	0018      	movs	r0, r3
 800607a:	f000 fd7b 	bl	8006b74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	2240      	movs	r2, #64	; 0x40
 8006086:	4013      	ands	r3, r2
 8006088:	2b40      	cmp	r3, #64	; 0x40
 800608a:	d137      	bne.n	80060fc <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800608c:	f3ef 8310 	mrs	r3, PRIMASK
 8006090:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006092:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006094:	2090      	movs	r0, #144	; 0x90
 8006096:	183a      	adds	r2, r7, r0
 8006098:	6013      	str	r3, [r2, #0]
 800609a:	2301      	movs	r3, #1
 800609c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800609e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060a0:	f383 8810 	msr	PRIMASK, r3
}
 80060a4:	46c0      	nop			; (mov r8, r8)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2140      	movs	r1, #64	; 0x40
 80060b2:	438a      	bics	r2, r1
 80060b4:	609a      	str	r2, [r3, #8]
 80060b6:	183b      	adds	r3, r7, r0
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060be:	f383 8810 	msr	PRIMASK, r3
}
 80060c2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d012      	beq.n	80060f2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d0:	4a14      	ldr	r2, [pc, #80]	; (8006124 <HAL_UART_IRQHandler+0x2a0>)
 80060d2:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d8:	0018      	movs	r0, r3
 80060da:	f7fe fb1f 	bl	800471c <HAL_DMA_Abort_IT>
 80060de:	1e03      	subs	r3, r0, #0
 80060e0:	d01a      	beq.n	8006118 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ec:	0018      	movs	r0, r3
 80060ee:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f0:	e012      	b.n	8006118 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	0018      	movs	r0, r3
 80060f6:	f000 f98d 	bl	8006414 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060fa:	e00d      	b.n	8006118 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	0018      	movs	r0, r3
 8006100:	f000 f988 	bl	8006414 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006104:	e008      	b.n	8006118 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	0018      	movs	r0, r3
 800610a:	f000 f983 	bl	8006414 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2280      	movs	r2, #128	; 0x80
 8006112:	2100      	movs	r1, #0
 8006114:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006116:	e167      	b.n	80063e8 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006118:	46c0      	nop			; (mov r8, r8)
    return;
 800611a:	e165      	b.n	80063e8 <HAL_UART_IRQHandler+0x564>
 800611c:	0000080f 	.word	0x0000080f
 8006120:	04000120 	.word	0x04000120
 8006124:	08006c39 	.word	0x08006c39

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800612c:	2b01      	cmp	r3, #1
 800612e:	d000      	beq.n	8006132 <HAL_UART_IRQHandler+0x2ae>
 8006130:	e131      	b.n	8006396 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006132:	23a4      	movs	r3, #164	; 0xa4
 8006134:	18fb      	adds	r3, r7, r3
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2210      	movs	r2, #16
 800613a:	4013      	ands	r3, r2
 800613c:	d100      	bne.n	8006140 <HAL_UART_IRQHandler+0x2bc>
 800613e:	e12a      	b.n	8006396 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006140:	23a0      	movs	r3, #160	; 0xa0
 8006142:	18fb      	adds	r3, r7, r3
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2210      	movs	r2, #16
 8006148:	4013      	ands	r3, r2
 800614a:	d100      	bne.n	800614e <HAL_UART_IRQHandler+0x2ca>
 800614c:	e123      	b.n	8006396 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2210      	movs	r2, #16
 8006154:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	2240      	movs	r2, #64	; 0x40
 800615e:	4013      	ands	r3, r2
 8006160:	2b40      	cmp	r3, #64	; 0x40
 8006162:	d000      	beq.n	8006166 <HAL_UART_IRQHandler+0x2e2>
 8006164:	e09b      	b.n	800629e <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	217e      	movs	r1, #126	; 0x7e
 8006170:	187b      	adds	r3, r7, r1
 8006172:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006174:	187b      	adds	r3, r7, r1
 8006176:	881b      	ldrh	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d100      	bne.n	800617e <HAL_UART_IRQHandler+0x2fa>
 800617c:	e136      	b.n	80063ec <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2258      	movs	r2, #88	; 0x58
 8006182:	5a9b      	ldrh	r3, [r3, r2]
 8006184:	187a      	adds	r2, r7, r1
 8006186:	8812      	ldrh	r2, [r2, #0]
 8006188:	429a      	cmp	r2, r3
 800618a:	d300      	bcc.n	800618e <HAL_UART_IRQHandler+0x30a>
 800618c:	e12e      	b.n	80063ec <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	187a      	adds	r2, r7, r1
 8006192:	215a      	movs	r1, #90	; 0x5a
 8006194:	8812      	ldrh	r2, [r2, #0]
 8006196:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	2b20      	cmp	r3, #32
 80061a0:	d06e      	beq.n	8006280 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061a2:	f3ef 8310 	mrs	r3, PRIMASK
 80061a6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80061a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80061ac:	2301      	movs	r3, #1
 80061ae:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b2:	f383 8810 	msr	PRIMASK, r3
}
 80061b6:	46c0      	nop			; (mov r8, r8)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	498e      	ldr	r1, [pc, #568]	; (80063fc <HAL_UART_IRQHandler+0x578>)
 80061c4:	400a      	ands	r2, r1
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061ca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ce:	f383 8810 	msr	PRIMASK, r3
}
 80061d2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061d4:	f3ef 8310 	mrs	r3, PRIMASK
 80061d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80061da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061dc:	677b      	str	r3, [r7, #116]	; 0x74
 80061de:	2301      	movs	r3, #1
 80061e0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061e4:	f383 8810 	msr	PRIMASK, r3
}
 80061e8:	46c0      	nop			; (mov r8, r8)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	689a      	ldr	r2, [r3, #8]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2101      	movs	r1, #1
 80061f6:	438a      	bics	r2, r1
 80061f8:	609a      	str	r2, [r3, #8]
 80061fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061fc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006200:	f383 8810 	msr	PRIMASK, r3
}
 8006204:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006206:	f3ef 8310 	mrs	r3, PRIMASK
 800620a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800620c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800620e:	673b      	str	r3, [r7, #112]	; 0x70
 8006210:	2301      	movs	r3, #1
 8006212:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006216:	f383 8810 	msr	PRIMASK, r3
}
 800621a:	46c0      	nop			; (mov r8, r8)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689a      	ldr	r2, [r3, #8]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2140      	movs	r1, #64	; 0x40
 8006228:	438a      	bics	r2, r1
 800622a:	609a      	str	r2, [r3, #8]
 800622c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800622e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006232:	f383 8810 	msr	PRIMASK, r3
}
 8006236:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2220      	movs	r2, #32
 800623c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006244:	f3ef 8310 	mrs	r3, PRIMASK
 8006248:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800624a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800624c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800624e:	2301      	movs	r3, #1
 8006250:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006252:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006254:	f383 8810 	msr	PRIMASK, r3
}
 8006258:	46c0      	nop			; (mov r8, r8)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2110      	movs	r1, #16
 8006266:	438a      	bics	r2, r1
 8006268:	601a      	str	r2, [r3, #0]
 800626a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800626c:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800626e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006270:	f383 8810 	msr	PRIMASK, r3
}
 8006274:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800627a:	0018      	movs	r0, r3
 800627c:	f7fe fa16 	bl	80046ac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2258      	movs	r2, #88	; 0x58
 8006284:	5a9a      	ldrh	r2, [r3, r2]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	215a      	movs	r1, #90	; 0x5a
 800628a:	5a5b      	ldrh	r3, [r3, r1]
 800628c:	b29b      	uxth	r3, r3
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	b29a      	uxth	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	0011      	movs	r1, r2
 8006296:	0018      	movs	r0, r3
 8006298:	f000 f8c4 	bl	8006424 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800629c:	e0a6      	b.n	80063ec <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2258      	movs	r2, #88	; 0x58
 80062a2:	5a99      	ldrh	r1, [r3, r2]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	225a      	movs	r2, #90	; 0x5a
 80062a8:	5a9b      	ldrh	r3, [r3, r2]
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	208e      	movs	r0, #142	; 0x8e
 80062ae:	183b      	adds	r3, r7, r0
 80062b0:	1a8a      	subs	r2, r1, r2
 80062b2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	225a      	movs	r2, #90	; 0x5a
 80062b8:	5a9b      	ldrh	r3, [r3, r2]
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d100      	bne.n	80062c2 <HAL_UART_IRQHandler+0x43e>
 80062c0:	e096      	b.n	80063f0 <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 80062c2:	183b      	adds	r3, r7, r0
 80062c4:	881b      	ldrh	r3, [r3, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d100      	bne.n	80062cc <HAL_UART_IRQHandler+0x448>
 80062ca:	e091      	b.n	80063f0 <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062cc:	f3ef 8310 	mrs	r3, PRIMASK
 80062d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80062d2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062d4:	2488      	movs	r4, #136	; 0x88
 80062d6:	193a      	adds	r2, r7, r4
 80062d8:	6013      	str	r3, [r2, #0]
 80062da:	2301      	movs	r3, #1
 80062dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	f383 8810 	msr	PRIMASK, r3
}
 80062e4:	46c0      	nop			; (mov r8, r8)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4943      	ldr	r1, [pc, #268]	; (8006400 <HAL_UART_IRQHandler+0x57c>)
 80062f2:	400a      	ands	r2, r1
 80062f4:	601a      	str	r2, [r3, #0]
 80062f6:	193b      	adds	r3, r7, r4
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	f383 8810 	msr	PRIMASK, r3
}
 8006302:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006304:	f3ef 8310 	mrs	r3, PRIMASK
 8006308:	61bb      	str	r3, [r7, #24]
  return(result);
 800630a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800630c:	2484      	movs	r4, #132	; 0x84
 800630e:	193a      	adds	r2, r7, r4
 8006310:	6013      	str	r3, [r2, #0]
 8006312:	2301      	movs	r3, #1
 8006314:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	f383 8810 	msr	PRIMASK, r3
}
 800631c:	46c0      	nop			; (mov r8, r8)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2101      	movs	r1, #1
 800632a:	438a      	bics	r2, r1
 800632c:	609a      	str	r2, [r3, #8]
 800632e:	193b      	adds	r3, r7, r4
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006334:	6a3b      	ldr	r3, [r7, #32]
 8006336:	f383 8810 	msr	PRIMASK, r3
}
 800633a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2220      	movs	r2, #32
 8006340:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800634e:	f3ef 8310 	mrs	r3, PRIMASK
 8006352:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006356:	2480      	movs	r4, #128	; 0x80
 8006358:	193a      	adds	r2, r7, r4
 800635a:	6013      	str	r3, [r2, #0]
 800635c:	2301      	movs	r3, #1
 800635e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006362:	f383 8810 	msr	PRIMASK, r3
}
 8006366:	46c0      	nop			; (mov r8, r8)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2110      	movs	r1, #16
 8006374:	438a      	bics	r2, r1
 8006376:	601a      	str	r2, [r3, #0]
 8006378:	193b      	adds	r3, r7, r4
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800637e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006380:	f383 8810 	msr	PRIMASK, r3
}
 8006384:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006386:	183b      	adds	r3, r7, r0
 8006388:	881a      	ldrh	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	0011      	movs	r1, r2
 800638e:	0018      	movs	r0, r3
 8006390:	f000 f848 	bl	8006424 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006394:	e02c      	b.n	80063f0 <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006396:	23a4      	movs	r3, #164	; 0xa4
 8006398:	18fb      	adds	r3, r7, r3
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2280      	movs	r2, #128	; 0x80
 800639e:	4013      	ands	r3, r2
 80063a0:	d00f      	beq.n	80063c2 <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80063a2:	23a0      	movs	r3, #160	; 0xa0
 80063a4:	18fb      	adds	r3, r7, r3
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2280      	movs	r2, #128	; 0x80
 80063aa:	4013      	ands	r3, r2
 80063ac:	d009      	beq.n	80063c2 <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d01e      	beq.n	80063f4 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	0010      	movs	r0, r2
 80063be:	4798      	blx	r3
    }
    return;
 80063c0:	e018      	b.n	80063f4 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80063c2:	23a4      	movs	r3, #164	; 0xa4
 80063c4:	18fb      	adds	r3, r7, r3
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2240      	movs	r2, #64	; 0x40
 80063ca:	4013      	ands	r3, r2
 80063cc:	d013      	beq.n	80063f6 <HAL_UART_IRQHandler+0x572>
 80063ce:	23a0      	movs	r3, #160	; 0xa0
 80063d0:	18fb      	adds	r3, r7, r3
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2240      	movs	r2, #64	; 0x40
 80063d6:	4013      	ands	r3, r2
 80063d8:	d00d      	beq.n	80063f6 <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	0018      	movs	r0, r3
 80063de:	f000 fc42 	bl	8006c66 <UART_EndTransmit_IT>
    return;
 80063e2:	e008      	b.n	80063f6 <HAL_UART_IRQHandler+0x572>
      return;
 80063e4:	46c0      	nop			; (mov r8, r8)
 80063e6:	e006      	b.n	80063f6 <HAL_UART_IRQHandler+0x572>
    return;
 80063e8:	46c0      	nop			; (mov r8, r8)
 80063ea:	e004      	b.n	80063f6 <HAL_UART_IRQHandler+0x572>
      return;
 80063ec:	46c0      	nop			; (mov r8, r8)
 80063ee:	e002      	b.n	80063f6 <HAL_UART_IRQHandler+0x572>
      return;
 80063f0:	46c0      	nop			; (mov r8, r8)
 80063f2:	e000      	b.n	80063f6 <HAL_UART_IRQHandler+0x572>
    return;
 80063f4:	46c0      	nop			; (mov r8, r8)
  }

}
 80063f6:	46bd      	mov	sp, r7
 80063f8:	b02b      	add	sp, #172	; 0xac
 80063fa:	bd90      	pop	{r4, r7, pc}
 80063fc:	fffffeff 	.word	0xfffffeff
 8006400:	fffffedf 	.word	0xfffffedf

08006404 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800640c:	46c0      	nop			; (mov r8, r8)
 800640e:	46bd      	mov	sp, r7
 8006410:	b002      	add	sp, #8
 8006412:	bd80      	pop	{r7, pc}

08006414 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800641c:	46c0      	nop			; (mov r8, r8)
 800641e:	46bd      	mov	sp, r7
 8006420:	b002      	add	sp, #8
 8006422:	bd80      	pop	{r7, pc}

08006424 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	000a      	movs	r2, r1
 800642e:	1cbb      	adds	r3, r7, #2
 8006430:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006432:	46c0      	nop			; (mov r8, r8)
 8006434:	46bd      	mov	sp, r7
 8006436:	b002      	add	sp, #8
 8006438:	bd80      	pop	{r7, pc}
	...

0800643c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b088      	sub	sp, #32
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006444:	231e      	movs	r3, #30
 8006446:	18fb      	adds	r3, r7, r3
 8006448:	2200      	movs	r2, #0
 800644a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	431a      	orrs	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	431a      	orrs	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	69db      	ldr	r3, [r3, #28]
 8006460:	4313      	orrs	r3, r2
 8006462:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a8d      	ldr	r2, [pc, #564]	; (80066a0 <UART_SetConfig+0x264>)
 800646c:	4013      	ands	r3, r2
 800646e:	0019      	movs	r1, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	430a      	orrs	r2, r1
 8006478:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	4a88      	ldr	r2, [pc, #544]	; (80066a4 <UART_SetConfig+0x268>)
 8006482:	4013      	ands	r3, r2
 8006484:	0019      	movs	r1, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	68da      	ldr	r2, [r3, #12]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	4313      	orrs	r3, r2
 80064a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	4a7f      	ldr	r2, [pc, #508]	; (80066a8 <UART_SetConfig+0x26c>)
 80064aa:	4013      	ands	r3, r2
 80064ac:	0019      	movs	r1, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	430a      	orrs	r2, r1
 80064b6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a7b      	ldr	r2, [pc, #492]	; (80066ac <UART_SetConfig+0x270>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d127      	bne.n	8006512 <UART_SetConfig+0xd6>
 80064c2:	4b7b      	ldr	r3, [pc, #492]	; (80066b0 <UART_SetConfig+0x274>)
 80064c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c6:	2203      	movs	r2, #3
 80064c8:	4013      	ands	r3, r2
 80064ca:	2b03      	cmp	r3, #3
 80064cc:	d00d      	beq.n	80064ea <UART_SetConfig+0xae>
 80064ce:	d81b      	bhi.n	8006508 <UART_SetConfig+0xcc>
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d014      	beq.n	80064fe <UART_SetConfig+0xc2>
 80064d4:	d818      	bhi.n	8006508 <UART_SetConfig+0xcc>
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d002      	beq.n	80064e0 <UART_SetConfig+0xa4>
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d00a      	beq.n	80064f4 <UART_SetConfig+0xb8>
 80064de:	e013      	b.n	8006508 <UART_SetConfig+0xcc>
 80064e0:	231f      	movs	r3, #31
 80064e2:	18fb      	adds	r3, r7, r3
 80064e4:	2200      	movs	r2, #0
 80064e6:	701a      	strb	r2, [r3, #0]
 80064e8:	e021      	b.n	800652e <UART_SetConfig+0xf2>
 80064ea:	231f      	movs	r3, #31
 80064ec:	18fb      	adds	r3, r7, r3
 80064ee:	2202      	movs	r2, #2
 80064f0:	701a      	strb	r2, [r3, #0]
 80064f2:	e01c      	b.n	800652e <UART_SetConfig+0xf2>
 80064f4:	231f      	movs	r3, #31
 80064f6:	18fb      	adds	r3, r7, r3
 80064f8:	2204      	movs	r2, #4
 80064fa:	701a      	strb	r2, [r3, #0]
 80064fc:	e017      	b.n	800652e <UART_SetConfig+0xf2>
 80064fe:	231f      	movs	r3, #31
 8006500:	18fb      	adds	r3, r7, r3
 8006502:	2208      	movs	r2, #8
 8006504:	701a      	strb	r2, [r3, #0]
 8006506:	e012      	b.n	800652e <UART_SetConfig+0xf2>
 8006508:	231f      	movs	r3, #31
 800650a:	18fb      	adds	r3, r7, r3
 800650c:	2210      	movs	r2, #16
 800650e:	701a      	strb	r2, [r3, #0]
 8006510:	e00d      	b.n	800652e <UART_SetConfig+0xf2>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a67      	ldr	r2, [pc, #412]	; (80066b4 <UART_SetConfig+0x278>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d104      	bne.n	8006526 <UART_SetConfig+0xea>
 800651c:	231f      	movs	r3, #31
 800651e:	18fb      	adds	r3, r7, r3
 8006520:	2200      	movs	r2, #0
 8006522:	701a      	strb	r2, [r3, #0]
 8006524:	e003      	b.n	800652e <UART_SetConfig+0xf2>
 8006526:	231f      	movs	r3, #31
 8006528:	18fb      	adds	r3, r7, r3
 800652a:	2210      	movs	r2, #16
 800652c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	69da      	ldr	r2, [r3, #28]
 8006532:	2380      	movs	r3, #128	; 0x80
 8006534:	021b      	lsls	r3, r3, #8
 8006536:	429a      	cmp	r2, r3
 8006538:	d15d      	bne.n	80065f6 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800653a:	231f      	movs	r3, #31
 800653c:	18fb      	adds	r3, r7, r3
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	2b08      	cmp	r3, #8
 8006542:	d015      	beq.n	8006570 <UART_SetConfig+0x134>
 8006544:	dc18      	bgt.n	8006578 <UART_SetConfig+0x13c>
 8006546:	2b04      	cmp	r3, #4
 8006548:	d00d      	beq.n	8006566 <UART_SetConfig+0x12a>
 800654a:	dc15      	bgt.n	8006578 <UART_SetConfig+0x13c>
 800654c:	2b00      	cmp	r3, #0
 800654e:	d002      	beq.n	8006556 <UART_SetConfig+0x11a>
 8006550:	2b02      	cmp	r3, #2
 8006552:	d005      	beq.n	8006560 <UART_SetConfig+0x124>
 8006554:	e010      	b.n	8006578 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006556:	f7fe ff43 	bl	80053e0 <HAL_RCC_GetPCLK1Freq>
 800655a:	0003      	movs	r3, r0
 800655c:	61bb      	str	r3, [r7, #24]
        break;
 800655e:	e012      	b.n	8006586 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006560:	4b55      	ldr	r3, [pc, #340]	; (80066b8 <UART_SetConfig+0x27c>)
 8006562:	61bb      	str	r3, [r7, #24]
        break;
 8006564:	e00f      	b.n	8006586 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006566:	f7fe fecd 	bl	8005304 <HAL_RCC_GetSysClockFreq>
 800656a:	0003      	movs	r3, r0
 800656c:	61bb      	str	r3, [r7, #24]
        break;
 800656e:	e00a      	b.n	8006586 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006570:	2380      	movs	r3, #128	; 0x80
 8006572:	021b      	lsls	r3, r3, #8
 8006574:	61bb      	str	r3, [r7, #24]
        break;
 8006576:	e006      	b.n	8006586 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8006578:	2300      	movs	r3, #0
 800657a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800657c:	231e      	movs	r3, #30
 800657e:	18fb      	adds	r3, r7, r3
 8006580:	2201      	movs	r2, #1
 8006582:	701a      	strb	r2, [r3, #0]
        break;
 8006584:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d100      	bne.n	800658e <UART_SetConfig+0x152>
 800658c:	e07b      	b.n	8006686 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	005a      	lsls	r2, r3, #1
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	085b      	lsrs	r3, r3, #1
 8006598:	18d2      	adds	r2, r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	0019      	movs	r1, r3
 80065a0:	0010      	movs	r0, r2
 80065a2:	f7f9 fdd7 	bl	8000154 <__udivsi3>
 80065a6:	0003      	movs	r3, r0
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	2b0f      	cmp	r3, #15
 80065b0:	d91c      	bls.n	80065ec <UART_SetConfig+0x1b0>
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	2380      	movs	r3, #128	; 0x80
 80065b6:	025b      	lsls	r3, r3, #9
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d217      	bcs.n	80065ec <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	b29a      	uxth	r2, r3
 80065c0:	200e      	movs	r0, #14
 80065c2:	183b      	adds	r3, r7, r0
 80065c4:	210f      	movs	r1, #15
 80065c6:	438a      	bics	r2, r1
 80065c8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	085b      	lsrs	r3, r3, #1
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	2207      	movs	r2, #7
 80065d2:	4013      	ands	r3, r2
 80065d4:	b299      	uxth	r1, r3
 80065d6:	183b      	adds	r3, r7, r0
 80065d8:	183a      	adds	r2, r7, r0
 80065da:	8812      	ldrh	r2, [r2, #0]
 80065dc:	430a      	orrs	r2, r1
 80065de:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	183a      	adds	r2, r7, r0
 80065e6:	8812      	ldrh	r2, [r2, #0]
 80065e8:	60da      	str	r2, [r3, #12]
 80065ea:	e04c      	b.n	8006686 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80065ec:	231e      	movs	r3, #30
 80065ee:	18fb      	adds	r3, r7, r3
 80065f0:	2201      	movs	r2, #1
 80065f2:	701a      	strb	r2, [r3, #0]
 80065f4:	e047      	b.n	8006686 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065f6:	231f      	movs	r3, #31
 80065f8:	18fb      	adds	r3, r7, r3
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	2b08      	cmp	r3, #8
 80065fe:	d015      	beq.n	800662c <UART_SetConfig+0x1f0>
 8006600:	dc18      	bgt.n	8006634 <UART_SetConfig+0x1f8>
 8006602:	2b04      	cmp	r3, #4
 8006604:	d00d      	beq.n	8006622 <UART_SetConfig+0x1e6>
 8006606:	dc15      	bgt.n	8006634 <UART_SetConfig+0x1f8>
 8006608:	2b00      	cmp	r3, #0
 800660a:	d002      	beq.n	8006612 <UART_SetConfig+0x1d6>
 800660c:	2b02      	cmp	r3, #2
 800660e:	d005      	beq.n	800661c <UART_SetConfig+0x1e0>
 8006610:	e010      	b.n	8006634 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006612:	f7fe fee5 	bl	80053e0 <HAL_RCC_GetPCLK1Freq>
 8006616:	0003      	movs	r3, r0
 8006618:	61bb      	str	r3, [r7, #24]
        break;
 800661a:	e012      	b.n	8006642 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800661c:	4b26      	ldr	r3, [pc, #152]	; (80066b8 <UART_SetConfig+0x27c>)
 800661e:	61bb      	str	r3, [r7, #24]
        break;
 8006620:	e00f      	b.n	8006642 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006622:	f7fe fe6f 	bl	8005304 <HAL_RCC_GetSysClockFreq>
 8006626:	0003      	movs	r3, r0
 8006628:	61bb      	str	r3, [r7, #24]
        break;
 800662a:	e00a      	b.n	8006642 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800662c:	2380      	movs	r3, #128	; 0x80
 800662e:	021b      	lsls	r3, r3, #8
 8006630:	61bb      	str	r3, [r7, #24]
        break;
 8006632:	e006      	b.n	8006642 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006638:	231e      	movs	r3, #30
 800663a:	18fb      	adds	r3, r7, r3
 800663c:	2201      	movs	r2, #1
 800663e:	701a      	strb	r2, [r3, #0]
        break;
 8006640:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d01e      	beq.n	8006686 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	085a      	lsrs	r2, r3, #1
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	18d2      	adds	r2, r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	0019      	movs	r1, r3
 8006658:	0010      	movs	r0, r2
 800665a:	f7f9 fd7b 	bl	8000154 <__udivsi3>
 800665e:	0003      	movs	r3, r0
 8006660:	b29b      	uxth	r3, r3
 8006662:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	2b0f      	cmp	r3, #15
 8006668:	d909      	bls.n	800667e <UART_SetConfig+0x242>
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	2380      	movs	r3, #128	; 0x80
 800666e:	025b      	lsls	r3, r3, #9
 8006670:	429a      	cmp	r2, r3
 8006672:	d204      	bcs.n	800667e <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	60da      	str	r2, [r3, #12]
 800667c:	e003      	b.n	8006686 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800667e:	231e      	movs	r3, #30
 8006680:	18fb      	adds	r3, r7, r3
 8006682:	2201      	movs	r2, #1
 8006684:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006692:	231e      	movs	r3, #30
 8006694:	18fb      	adds	r3, r7, r3
 8006696:	781b      	ldrb	r3, [r3, #0]
}
 8006698:	0018      	movs	r0, r3
 800669a:	46bd      	mov	sp, r7
 800669c:	b008      	add	sp, #32
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	ffff69f3 	.word	0xffff69f3
 80066a4:	ffffcfff 	.word	0xffffcfff
 80066a8:	fffff4ff 	.word	0xfffff4ff
 80066ac:	40013800 	.word	0x40013800
 80066b0:	40021000 	.word	0x40021000
 80066b4:	40004400 	.word	0x40004400
 80066b8:	007a1200 	.word	0x007a1200

080066bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c8:	2201      	movs	r2, #1
 80066ca:	4013      	ands	r3, r2
 80066cc:	d00b      	beq.n	80066e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	4a4a      	ldr	r2, [pc, #296]	; (8006800 <UART_AdvFeatureConfig+0x144>)
 80066d6:	4013      	ands	r3, r2
 80066d8:	0019      	movs	r1, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ea:	2202      	movs	r2, #2
 80066ec:	4013      	ands	r3, r2
 80066ee:	d00b      	beq.n	8006708 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	4a43      	ldr	r2, [pc, #268]	; (8006804 <UART_AdvFeatureConfig+0x148>)
 80066f8:	4013      	ands	r3, r2
 80066fa:	0019      	movs	r1, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	430a      	orrs	r2, r1
 8006706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670c:	2204      	movs	r2, #4
 800670e:	4013      	ands	r3, r2
 8006710:	d00b      	beq.n	800672a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	4a3b      	ldr	r2, [pc, #236]	; (8006808 <UART_AdvFeatureConfig+0x14c>)
 800671a:	4013      	ands	r3, r2
 800671c:	0019      	movs	r1, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	430a      	orrs	r2, r1
 8006728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672e:	2208      	movs	r2, #8
 8006730:	4013      	ands	r3, r2
 8006732:	d00b      	beq.n	800674c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	4a34      	ldr	r2, [pc, #208]	; (800680c <UART_AdvFeatureConfig+0x150>)
 800673c:	4013      	ands	r3, r2
 800673e:	0019      	movs	r1, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	430a      	orrs	r2, r1
 800674a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006750:	2210      	movs	r2, #16
 8006752:	4013      	ands	r3, r2
 8006754:	d00b      	beq.n	800676e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	4a2c      	ldr	r2, [pc, #176]	; (8006810 <UART_AdvFeatureConfig+0x154>)
 800675e:	4013      	ands	r3, r2
 8006760:	0019      	movs	r1, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006772:	2220      	movs	r2, #32
 8006774:	4013      	ands	r3, r2
 8006776:	d00b      	beq.n	8006790 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	4a25      	ldr	r2, [pc, #148]	; (8006814 <UART_AdvFeatureConfig+0x158>)
 8006780:	4013      	ands	r3, r2
 8006782:	0019      	movs	r1, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	430a      	orrs	r2, r1
 800678e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006794:	2240      	movs	r2, #64	; 0x40
 8006796:	4013      	ands	r3, r2
 8006798:	d01d      	beq.n	80067d6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	4a1d      	ldr	r2, [pc, #116]	; (8006818 <UART_AdvFeatureConfig+0x15c>)
 80067a2:	4013      	ands	r3, r2
 80067a4:	0019      	movs	r1, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067b6:	2380      	movs	r3, #128	; 0x80
 80067b8:	035b      	lsls	r3, r3, #13
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d10b      	bne.n	80067d6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	4a15      	ldr	r2, [pc, #84]	; (800681c <UART_AdvFeatureConfig+0x160>)
 80067c6:	4013      	ands	r3, r2
 80067c8:	0019      	movs	r1, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	430a      	orrs	r2, r1
 80067d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067da:	2280      	movs	r2, #128	; 0x80
 80067dc:	4013      	ands	r3, r2
 80067de:	d00b      	beq.n	80067f8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	4a0e      	ldr	r2, [pc, #56]	; (8006820 <UART_AdvFeatureConfig+0x164>)
 80067e8:	4013      	ands	r3, r2
 80067ea:	0019      	movs	r1, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	430a      	orrs	r2, r1
 80067f6:	605a      	str	r2, [r3, #4]
  }
}
 80067f8:	46c0      	nop			; (mov r8, r8)
 80067fa:	46bd      	mov	sp, r7
 80067fc:	b002      	add	sp, #8
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	fffdffff 	.word	0xfffdffff
 8006804:	fffeffff 	.word	0xfffeffff
 8006808:	fffbffff 	.word	0xfffbffff
 800680c:	ffff7fff 	.word	0xffff7fff
 8006810:	ffffefff 	.word	0xffffefff
 8006814:	ffffdfff 	.word	0xffffdfff
 8006818:	ffefffff 	.word	0xffefffff
 800681c:	ff9fffff 	.word	0xff9fffff
 8006820:	fff7ffff 	.word	0xfff7ffff

08006824 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af02      	add	r7, sp, #8
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2280      	movs	r2, #128	; 0x80
 8006830:	2100      	movs	r1, #0
 8006832:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006834:	f7fd fa7c 	bl	8003d30 <HAL_GetTick>
 8006838:	0003      	movs	r3, r0
 800683a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2208      	movs	r2, #8
 8006844:	4013      	ands	r3, r2
 8006846:	2b08      	cmp	r3, #8
 8006848:	d10c      	bne.n	8006864 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2280      	movs	r2, #128	; 0x80
 800684e:	0391      	lsls	r1, r2, #14
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	4a17      	ldr	r2, [pc, #92]	; (80068b0 <UART_CheckIdleState+0x8c>)
 8006854:	9200      	str	r2, [sp, #0]
 8006856:	2200      	movs	r2, #0
 8006858:	f000 f82c 	bl	80068b4 <UART_WaitOnFlagUntilTimeout>
 800685c:	1e03      	subs	r3, r0, #0
 800685e:	d001      	beq.n	8006864 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	e021      	b.n	80068a8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2204      	movs	r2, #4
 800686c:	4013      	ands	r3, r2
 800686e:	2b04      	cmp	r3, #4
 8006870:	d10c      	bne.n	800688c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2280      	movs	r2, #128	; 0x80
 8006876:	03d1      	lsls	r1, r2, #15
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	4a0d      	ldr	r2, [pc, #52]	; (80068b0 <UART_CheckIdleState+0x8c>)
 800687c:	9200      	str	r2, [sp, #0]
 800687e:	2200      	movs	r2, #0
 8006880:	f000 f818 	bl	80068b4 <UART_WaitOnFlagUntilTimeout>
 8006884:	1e03      	subs	r3, r0, #0
 8006886:	d001      	beq.n	800688c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006888:	2303      	movs	r3, #3
 800688a:	e00d      	b.n	80068a8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2220      	movs	r2, #32
 8006890:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2220      	movs	r2, #32
 8006896:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2274      	movs	r2, #116	; 0x74
 80068a2:	2100      	movs	r1, #0
 80068a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	0018      	movs	r0, r3
 80068aa:	46bd      	mov	sp, r7
 80068ac:	b004      	add	sp, #16
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	01ffffff 	.word	0x01ffffff

080068b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b094      	sub	sp, #80	; 0x50
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	603b      	str	r3, [r7, #0]
 80068c0:	1dfb      	adds	r3, r7, #7
 80068c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068c4:	e0a3      	b.n	8006a0e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068c8:	3301      	adds	r3, #1
 80068ca:	d100      	bne.n	80068ce <UART_WaitOnFlagUntilTimeout+0x1a>
 80068cc:	e09f      	b.n	8006a0e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ce:	f7fd fa2f 	bl	8003d30 <HAL_GetTick>
 80068d2:	0002      	movs	r2, r0
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068da:	429a      	cmp	r2, r3
 80068dc:	d302      	bcc.n	80068e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80068de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d13d      	bne.n	8006960 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068e4:	f3ef 8310 	mrs	r3, PRIMASK
 80068e8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80068ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068ec:	647b      	str	r3, [r7, #68]	; 0x44
 80068ee:	2301      	movs	r3, #1
 80068f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f4:	f383 8810 	msr	PRIMASK, r3
}
 80068f8:	46c0      	nop			; (mov r8, r8)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	494c      	ldr	r1, [pc, #304]	; (8006a38 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006906:	400a      	ands	r2, r1
 8006908:	601a      	str	r2, [r3, #0]
 800690a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800690c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800690e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006910:	f383 8810 	msr	PRIMASK, r3
}
 8006914:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006916:	f3ef 8310 	mrs	r3, PRIMASK
 800691a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800691c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800691e:	643b      	str	r3, [r7, #64]	; 0x40
 8006920:	2301      	movs	r3, #1
 8006922:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006926:	f383 8810 	msr	PRIMASK, r3
}
 800692a:	46c0      	nop			; (mov r8, r8)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	689a      	ldr	r2, [r3, #8]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2101      	movs	r1, #1
 8006938:	438a      	bics	r2, r1
 800693a:	609a      	str	r2, [r3, #8]
 800693c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800693e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006942:	f383 8810 	msr	PRIMASK, r3
}
 8006946:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2220      	movs	r2, #32
 800694c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2220      	movs	r2, #32
 8006952:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2274      	movs	r2, #116	; 0x74
 8006958:	2100      	movs	r1, #0
 800695a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e067      	b.n	8006a30 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2204      	movs	r2, #4
 8006968:	4013      	ands	r3, r2
 800696a:	d050      	beq.n	8006a0e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	69da      	ldr	r2, [r3, #28]
 8006972:	2380      	movs	r3, #128	; 0x80
 8006974:	011b      	lsls	r3, r3, #4
 8006976:	401a      	ands	r2, r3
 8006978:	2380      	movs	r3, #128	; 0x80
 800697a:	011b      	lsls	r3, r3, #4
 800697c:	429a      	cmp	r2, r3
 800697e:	d146      	bne.n	8006a0e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2280      	movs	r2, #128	; 0x80
 8006986:	0112      	lsls	r2, r2, #4
 8006988:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800698a:	f3ef 8310 	mrs	r3, PRIMASK
 800698e:	613b      	str	r3, [r7, #16]
  return(result);
 8006990:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006994:	2301      	movs	r3, #1
 8006996:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f383 8810 	msr	PRIMASK, r3
}
 800699e:	46c0      	nop			; (mov r8, r8)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4923      	ldr	r1, [pc, #140]	; (8006a38 <UART_WaitOnFlagUntilTimeout+0x184>)
 80069ac:	400a      	ands	r2, r1
 80069ae:	601a      	str	r2, [r3, #0]
 80069b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	f383 8810 	msr	PRIMASK, r3
}
 80069ba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069bc:	f3ef 8310 	mrs	r3, PRIMASK
 80069c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80069c2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80069c6:	2301      	movs	r3, #1
 80069c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069ca:	6a3b      	ldr	r3, [r7, #32]
 80069cc:	f383 8810 	msr	PRIMASK, r3
}
 80069d0:	46c0      	nop			; (mov r8, r8)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	689a      	ldr	r2, [r3, #8]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2101      	movs	r1, #1
 80069de:	438a      	bics	r2, r1
 80069e0:	609a      	str	r2, [r3, #8]
 80069e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069e4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e8:	f383 8810 	msr	PRIMASK, r3
}
 80069ec:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2220      	movs	r2, #32
 80069f2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2220      	movs	r2, #32
 80069f8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2280      	movs	r2, #128	; 0x80
 80069fe:	2120      	movs	r1, #32
 8006a00:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2274      	movs	r2, #116	; 0x74
 8006a06:	2100      	movs	r1, #0
 8006a08:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	e010      	b.n	8006a30 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	69db      	ldr	r3, [r3, #28]
 8006a14:	68ba      	ldr	r2, [r7, #8]
 8006a16:	4013      	ands	r3, r2
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	425a      	negs	r2, r3
 8006a1e:	4153      	adcs	r3, r2
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	001a      	movs	r2, r3
 8006a24:	1dfb      	adds	r3, r7, #7
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d100      	bne.n	8006a2e <UART_WaitOnFlagUntilTimeout+0x17a>
 8006a2c:	e74b      	b.n	80068c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	0018      	movs	r0, r3
 8006a32:	46bd      	mov	sp, r7
 8006a34:	b014      	add	sp, #80	; 0x50
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	fffffe5f 	.word	0xfffffe5f

08006a3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b08c      	sub	sp, #48	; 0x30
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	1dbb      	adds	r3, r7, #6
 8006a48:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	1dba      	adds	r2, r7, #6
 8006a54:	2158      	movs	r1, #88	; 0x58
 8006a56:	8812      	ldrh	r2, [r2, #0]
 8006a58:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	1dba      	adds	r2, r7, #6
 8006a5e:	215a      	movs	r1, #90	; 0x5a
 8006a60:	8812      	ldrh	r2, [r2, #0]
 8006a62:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	689a      	ldr	r2, [r3, #8]
 8006a6e:	2380      	movs	r3, #128	; 0x80
 8006a70:	015b      	lsls	r3, r3, #5
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d10d      	bne.n	8006a92 <UART_Start_Receive_IT+0x56>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d104      	bne.n	8006a88 <UART_Start_Receive_IT+0x4c>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	225c      	movs	r2, #92	; 0x5c
 8006a82:	4939      	ldr	r1, [pc, #228]	; (8006b68 <UART_Start_Receive_IT+0x12c>)
 8006a84:	5299      	strh	r1, [r3, r2]
 8006a86:	e01a      	b.n	8006abe <UART_Start_Receive_IT+0x82>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	225c      	movs	r2, #92	; 0x5c
 8006a8c:	21ff      	movs	r1, #255	; 0xff
 8006a8e:	5299      	strh	r1, [r3, r2]
 8006a90:	e015      	b.n	8006abe <UART_Start_Receive_IT+0x82>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10d      	bne.n	8006ab6 <UART_Start_Receive_IT+0x7a>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d104      	bne.n	8006aac <UART_Start_Receive_IT+0x70>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	225c      	movs	r2, #92	; 0x5c
 8006aa6:	21ff      	movs	r1, #255	; 0xff
 8006aa8:	5299      	strh	r1, [r3, r2]
 8006aaa:	e008      	b.n	8006abe <UART_Start_Receive_IT+0x82>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	225c      	movs	r2, #92	; 0x5c
 8006ab0:	217f      	movs	r1, #127	; 0x7f
 8006ab2:	5299      	strh	r1, [r3, r2]
 8006ab4:	e003      	b.n	8006abe <UART_Start_Receive_IT+0x82>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	225c      	movs	r2, #92	; 0x5c
 8006aba:	2100      	movs	r1, #0
 8006abc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2280      	movs	r2, #128	; 0x80
 8006ac2:	2100      	movs	r1, #0
 8006ac4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2222      	movs	r2, #34	; 0x22
 8006aca:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006acc:	f3ef 8310 	mrs	r3, PRIMASK
 8006ad0:	61fb      	str	r3, [r7, #28]
  return(result);
 8006ad2:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	f383 8810 	msr	PRIMASK, r3
}
 8006ae0:	46c0      	nop			; (mov r8, r8)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	689a      	ldr	r2, [r3, #8]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2101      	movs	r1, #1
 8006aee:	430a      	orrs	r2, r1
 8006af0:	609a      	str	r2, [r3, #8]
 8006af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af8:	f383 8810 	msr	PRIMASK, r3
}
 8006afc:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	689a      	ldr	r2, [r3, #8]
 8006b02:	2380      	movs	r3, #128	; 0x80
 8006b04:	015b      	lsls	r3, r3, #5
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d107      	bne.n	8006b1a <UART_Start_Receive_IT+0xde>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d103      	bne.n	8006b1a <UART_Start_Receive_IT+0xde>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	4a15      	ldr	r2, [pc, #84]	; (8006b6c <UART_Start_Receive_IT+0x130>)
 8006b16:	665a      	str	r2, [r3, #100]	; 0x64
 8006b18:	e002      	b.n	8006b20 <UART_Start_Receive_IT+0xe4>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	4a14      	ldr	r2, [pc, #80]	; (8006b70 <UART_Start_Receive_IT+0x134>)
 8006b1e:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2274      	movs	r2, #116	; 0x74
 8006b24:	2100      	movs	r1, #0
 8006b26:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b28:	f3ef 8310 	mrs	r3, PRIMASK
 8006b2c:	613b      	str	r3, [r7, #16]
  return(result);
 8006b2e:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b32:	2301      	movs	r3, #1
 8006b34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	f383 8810 	msr	PRIMASK, r3
}
 8006b3c:	46c0      	nop			; (mov r8, r8)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2190      	movs	r1, #144	; 0x90
 8006b4a:	0049      	lsls	r1, r1, #1
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	601a      	str	r2, [r3, #0]
 8006b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b52:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	f383 8810 	msr	PRIMASK, r3
}
 8006b5a:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	0018      	movs	r0, r3
 8006b60:	46bd      	mov	sp, r7
 8006b62:	b00c      	add	sp, #48	; 0x30
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	46c0      	nop			; (mov r8, r8)
 8006b68:	000001ff 	.word	0x000001ff
 8006b6c:	08006e25 	.word	0x08006e25
 8006b70:	08006cbd 	.word	0x08006cbd

08006b74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b08e      	sub	sp, #56	; 0x38
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b7c:	f3ef 8310 	mrs	r3, PRIMASK
 8006b80:	617b      	str	r3, [r7, #20]
  return(result);
 8006b82:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b84:	637b      	str	r3, [r7, #52]	; 0x34
 8006b86:	2301      	movs	r3, #1
 8006b88:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	f383 8810 	msr	PRIMASK, r3
}
 8006b90:	46c0      	nop			; (mov r8, r8)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4925      	ldr	r1, [pc, #148]	; (8006c34 <UART_EndRxTransfer+0xc0>)
 8006b9e:	400a      	ands	r2, r1
 8006ba0:	601a      	str	r2, [r3, #0]
 8006ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	f383 8810 	msr	PRIMASK, r3
}
 8006bac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bae:	f3ef 8310 	mrs	r3, PRIMASK
 8006bb2:	623b      	str	r3, [r7, #32]
  return(result);
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bb6:	633b      	str	r3, [r7, #48]	; 0x30
 8006bb8:	2301      	movs	r3, #1
 8006bba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbe:	f383 8810 	msr	PRIMASK, r3
}
 8006bc2:	46c0      	nop			; (mov r8, r8)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	689a      	ldr	r2, [r3, #8]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2101      	movs	r1, #1
 8006bd0:	438a      	bics	r2, r1
 8006bd2:	609a      	str	r2, [r3, #8]
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bda:	f383 8810 	msr	PRIMASK, r3
}
 8006bde:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d118      	bne.n	8006c1a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006be8:	f3ef 8310 	mrs	r3, PRIMASK
 8006bec:	60bb      	str	r3, [r7, #8]
  return(result);
 8006bee:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f383 8810 	msr	PRIMASK, r3
}
 8006bfc:	46c0      	nop			; (mov r8, r8)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2110      	movs	r1, #16
 8006c0a:	438a      	bics	r2, r1
 8006c0c:	601a      	str	r2, [r3, #0]
 8006c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	f383 8810 	msr	PRIMASK, r3
}
 8006c18:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2220      	movs	r2, #32
 8006c1e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006c2c:	46c0      	nop			; (mov r8, r8)
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	b00e      	add	sp, #56	; 0x38
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	fffffedf 	.word	0xfffffedf

08006c38 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	225a      	movs	r2, #90	; 0x5a
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2252      	movs	r2, #82	; 0x52
 8006c52:	2100      	movs	r1, #0
 8006c54:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	0018      	movs	r0, r3
 8006c5a:	f7ff fbdb 	bl	8006414 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c5e:	46c0      	nop			; (mov r8, r8)
 8006c60:	46bd      	mov	sp, r7
 8006c62:	b004      	add	sp, #16
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b086      	sub	sp, #24
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c6e:	f3ef 8310 	mrs	r3, PRIMASK
 8006c72:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c74:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c76:	617b      	str	r3, [r7, #20]
 8006c78:	2301      	movs	r3, #1
 8006c7a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f383 8810 	msr	PRIMASK, r3
}
 8006c82:	46c0      	nop			; (mov r8, r8)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2140      	movs	r1, #64	; 0x40
 8006c90:	438a      	bics	r2, r1
 8006c92:	601a      	str	r2, [r3, #0]
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	f383 8810 	msr	PRIMASK, r3
}
 8006c9e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2220      	movs	r2, #32
 8006ca4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	0018      	movs	r0, r3
 8006cb0:	f7ff fba8 	bl	8006404 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cb4:	46c0      	nop			; (mov r8, r8)
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	b006      	add	sp, #24
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b090      	sub	sp, #64	; 0x40
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006cc4:	203e      	movs	r0, #62	; 0x3e
 8006cc6:	183b      	adds	r3, r7, r0
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	215c      	movs	r1, #92	; 0x5c
 8006ccc:	5a52      	ldrh	r2, [r2, r1]
 8006cce:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cd4:	2b22      	cmp	r3, #34	; 0x22
 8006cd6:	d000      	beq.n	8006cda <UART_RxISR_8BIT+0x1e>
 8006cd8:	e095      	b.n	8006e06 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	213c      	movs	r1, #60	; 0x3c
 8006ce0:	187b      	adds	r3, r7, r1
 8006ce2:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006ce4:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006ce6:	187b      	adds	r3, r7, r1
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	b2da      	uxtb	r2, r3
 8006cec:	183b      	adds	r3, r7, r0
 8006cee:	881b      	ldrh	r3, [r3, #0]
 8006cf0:	b2d9      	uxtb	r1, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf6:	400a      	ands	r2, r1
 8006cf8:	b2d2      	uxtb	r2, r2
 8006cfa:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d00:	1c5a      	adds	r2, r3, #1
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	225a      	movs	r2, #90	; 0x5a
 8006d0a:	5a9b      	ldrh	r3, [r3, r2]
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	b299      	uxth	r1, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	225a      	movs	r2, #90	; 0x5a
 8006d16:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	225a      	movs	r2, #90	; 0x5a
 8006d1c:	5a9b      	ldrh	r3, [r3, r2]
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d178      	bne.n	8006e16 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d24:	f3ef 8310 	mrs	r3, PRIMASK
 8006d28:	61bb      	str	r3, [r7, #24]
  return(result);
 8006d2a:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d2e:	2301      	movs	r3, #1
 8006d30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	f383 8810 	msr	PRIMASK, r3
}
 8006d38:	46c0      	nop			; (mov r8, r8)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4936      	ldr	r1, [pc, #216]	; (8006e20 <UART_RxISR_8BIT+0x164>)
 8006d46:	400a      	ands	r2, r1
 8006d48:	601a      	str	r2, [r3, #0]
 8006d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d4e:	6a3b      	ldr	r3, [r7, #32]
 8006d50:	f383 8810 	msr	PRIMASK, r3
}
 8006d54:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d56:	f3ef 8310 	mrs	r3, PRIMASK
 8006d5a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d5e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d60:	2301      	movs	r3, #1
 8006d62:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d66:	f383 8810 	msr	PRIMASK, r3
}
 8006d6a:	46c0      	nop			; (mov r8, r8)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689a      	ldr	r2, [r3, #8]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2101      	movs	r1, #1
 8006d78:	438a      	bics	r2, r1
 8006d7a:	609a      	str	r2, [r3, #8]
 8006d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d82:	f383 8810 	msr	PRIMASK, r3
}
 8006d86:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d12f      	bne.n	8006dfc <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006da2:	f3ef 8310 	mrs	r3, PRIMASK
 8006da6:	60fb      	str	r3, [r7, #12]
  return(result);
 8006da8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006daa:	633b      	str	r3, [r7, #48]	; 0x30
 8006dac:	2301      	movs	r3, #1
 8006dae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	f383 8810 	msr	PRIMASK, r3
}
 8006db6:	46c0      	nop			; (mov r8, r8)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2110      	movs	r1, #16
 8006dc4:	438a      	bics	r2, r1
 8006dc6:	601a      	str	r2, [r3, #0]
 8006dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	f383 8810 	msr	PRIMASK, r3
}
 8006dd2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	69db      	ldr	r3, [r3, #28]
 8006dda:	2210      	movs	r2, #16
 8006ddc:	4013      	ands	r3, r2
 8006dde:	2b10      	cmp	r3, #16
 8006de0:	d103      	bne.n	8006dea <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2210      	movs	r2, #16
 8006de8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2258      	movs	r2, #88	; 0x58
 8006dee:	5a9a      	ldrh	r2, [r3, r2]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	0011      	movs	r1, r2
 8006df4:	0018      	movs	r0, r3
 8006df6:	f7ff fb15 	bl	8006424 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006dfa:	e00c      	b.n	8006e16 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	0018      	movs	r0, r3
 8006e00:	f7fc fa5e 	bl	80032c0 <HAL_UART_RxCpltCallback>
}
 8006e04:	e007      	b.n	8006e16 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	699a      	ldr	r2, [r3, #24]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2108      	movs	r1, #8
 8006e12:	430a      	orrs	r2, r1
 8006e14:	619a      	str	r2, [r3, #24]
}
 8006e16:	46c0      	nop			; (mov r8, r8)
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	b010      	add	sp, #64	; 0x40
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	46c0      	nop			; (mov r8, r8)
 8006e20:	fffffedf 	.word	0xfffffedf

08006e24 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b090      	sub	sp, #64	; 0x40
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006e2c:	203e      	movs	r0, #62	; 0x3e
 8006e2e:	183b      	adds	r3, r7, r0
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	215c      	movs	r1, #92	; 0x5c
 8006e34:	5a52      	ldrh	r2, [r2, r1]
 8006e36:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e3c:	2b22      	cmp	r3, #34	; 0x22
 8006e3e:	d000      	beq.n	8006e42 <UART_RxISR_16BIT+0x1e>
 8006e40:	e095      	b.n	8006f6e <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	213c      	movs	r1, #60	; 0x3c
 8006e48:	187b      	adds	r3, r7, r1
 8006e4a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006e4c:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e52:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8006e54:	187b      	adds	r3, r7, r1
 8006e56:	183a      	adds	r2, r7, r0
 8006e58:	881b      	ldrh	r3, [r3, #0]
 8006e5a:	8812      	ldrh	r2, [r2, #0]
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e62:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e68:	1c9a      	adds	r2, r3, #2
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	225a      	movs	r2, #90	; 0x5a
 8006e72:	5a9b      	ldrh	r3, [r3, r2]
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	3b01      	subs	r3, #1
 8006e78:	b299      	uxth	r1, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	225a      	movs	r2, #90	; 0x5a
 8006e7e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	225a      	movs	r2, #90	; 0x5a
 8006e84:	5a9b      	ldrh	r3, [r3, r2]
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d178      	bne.n	8006f7e <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e8c:	f3ef 8310 	mrs	r3, PRIMASK
 8006e90:	617b      	str	r3, [r7, #20]
  return(result);
 8006e92:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e94:	637b      	str	r3, [r7, #52]	; 0x34
 8006e96:	2301      	movs	r3, #1
 8006e98:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	f383 8810 	msr	PRIMASK, r3
}
 8006ea0:	46c0      	nop			; (mov r8, r8)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4936      	ldr	r1, [pc, #216]	; (8006f88 <UART_RxISR_16BIT+0x164>)
 8006eae:	400a      	ands	r2, r1
 8006eb0:	601a      	str	r2, [r3, #0]
 8006eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	f383 8810 	msr	PRIMASK, r3
}
 8006ebc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ebe:	f3ef 8310 	mrs	r3, PRIMASK
 8006ec2:	623b      	str	r3, [r7, #32]
  return(result);
 8006ec4:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ec6:	633b      	str	r3, [r7, #48]	; 0x30
 8006ec8:	2301      	movs	r3, #1
 8006eca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ece:	f383 8810 	msr	PRIMASK, r3
}
 8006ed2:	46c0      	nop			; (mov r8, r8)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	689a      	ldr	r2, [r3, #8]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2101      	movs	r1, #1
 8006ee0:	438a      	bics	r2, r1
 8006ee2:	609a      	str	r2, [r3, #8]
 8006ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eea:	f383 8810 	msr	PRIMASK, r3
}
 8006eee:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2220      	movs	r2, #32
 8006ef4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d12f      	bne.n	8006f64 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f0a:	f3ef 8310 	mrs	r3, PRIMASK
 8006f0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f10:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f14:	2301      	movs	r3, #1
 8006f16:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f383 8810 	msr	PRIMASK, r3
}
 8006f1e:	46c0      	nop			; (mov r8, r8)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2110      	movs	r1, #16
 8006f2c:	438a      	bics	r2, r1
 8006f2e:	601a      	str	r2, [r3, #0]
 8006f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	f383 8810 	msr	PRIMASK, r3
}
 8006f3a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	69db      	ldr	r3, [r3, #28]
 8006f42:	2210      	movs	r2, #16
 8006f44:	4013      	ands	r3, r2
 8006f46:	2b10      	cmp	r3, #16
 8006f48:	d103      	bne.n	8006f52 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2210      	movs	r2, #16
 8006f50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2258      	movs	r2, #88	; 0x58
 8006f56:	5a9a      	ldrh	r2, [r3, r2]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	0011      	movs	r1, r2
 8006f5c:	0018      	movs	r0, r3
 8006f5e:	f7ff fa61 	bl	8006424 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f62:	e00c      	b.n	8006f7e <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	0018      	movs	r0, r3
 8006f68:	f7fc f9aa 	bl	80032c0 <HAL_UART_RxCpltCallback>
}
 8006f6c:	e007      	b.n	8006f7e <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	699a      	ldr	r2, [r3, #24]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2108      	movs	r1, #8
 8006f7a:	430a      	orrs	r2, r1
 8006f7c:	619a      	str	r2, [r3, #24]
}
 8006f7e:	46c0      	nop			; (mov r8, r8)
 8006f80:	46bd      	mov	sp, r7
 8006f82:	b010      	add	sp, #64	; 0x40
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	46c0      	nop			; (mov r8, r8)
 8006f88:	fffffedf 	.word	0xfffffedf

08006f8c <__errno>:
 8006f8c:	4b01      	ldr	r3, [pc, #4]	; (8006f94 <__errno+0x8>)
 8006f8e:	6818      	ldr	r0, [r3, #0]
 8006f90:	4770      	bx	lr
 8006f92:	46c0      	nop			; (mov r8, r8)
 8006f94:	2000000c 	.word	0x2000000c

08006f98 <__libc_init_array>:
 8006f98:	b570      	push	{r4, r5, r6, lr}
 8006f9a:	2600      	movs	r6, #0
 8006f9c:	4d0c      	ldr	r5, [pc, #48]	; (8006fd0 <__libc_init_array+0x38>)
 8006f9e:	4c0d      	ldr	r4, [pc, #52]	; (8006fd4 <__libc_init_array+0x3c>)
 8006fa0:	1b64      	subs	r4, r4, r5
 8006fa2:	10a4      	asrs	r4, r4, #2
 8006fa4:	42a6      	cmp	r6, r4
 8006fa6:	d109      	bne.n	8006fbc <__libc_init_array+0x24>
 8006fa8:	2600      	movs	r6, #0
 8006faa:	f002 ffcf 	bl	8009f4c <_init>
 8006fae:	4d0a      	ldr	r5, [pc, #40]	; (8006fd8 <__libc_init_array+0x40>)
 8006fb0:	4c0a      	ldr	r4, [pc, #40]	; (8006fdc <__libc_init_array+0x44>)
 8006fb2:	1b64      	subs	r4, r4, r5
 8006fb4:	10a4      	asrs	r4, r4, #2
 8006fb6:	42a6      	cmp	r6, r4
 8006fb8:	d105      	bne.n	8006fc6 <__libc_init_array+0x2e>
 8006fba:	bd70      	pop	{r4, r5, r6, pc}
 8006fbc:	00b3      	lsls	r3, r6, #2
 8006fbe:	58eb      	ldr	r3, [r5, r3]
 8006fc0:	4798      	blx	r3
 8006fc2:	3601      	adds	r6, #1
 8006fc4:	e7ee      	b.n	8006fa4 <__libc_init_array+0xc>
 8006fc6:	00b3      	lsls	r3, r6, #2
 8006fc8:	58eb      	ldr	r3, [r5, r3]
 8006fca:	4798      	blx	r3
 8006fcc:	3601      	adds	r6, #1
 8006fce:	e7f2      	b.n	8006fb6 <__libc_init_array+0x1e>
 8006fd0:	0800a514 	.word	0x0800a514
 8006fd4:	0800a514 	.word	0x0800a514
 8006fd8:	0800a514 	.word	0x0800a514
 8006fdc:	0800a518 	.word	0x0800a518

08006fe0 <memset>:
 8006fe0:	0003      	movs	r3, r0
 8006fe2:	1882      	adds	r2, r0, r2
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d100      	bne.n	8006fea <memset+0xa>
 8006fe8:	4770      	bx	lr
 8006fea:	7019      	strb	r1, [r3, #0]
 8006fec:	3301      	adds	r3, #1
 8006fee:	e7f9      	b.n	8006fe4 <memset+0x4>

08006ff0 <__cvt>:
 8006ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ff2:	001e      	movs	r6, r3
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	0014      	movs	r4, r2
 8006ff8:	b08b      	sub	sp, #44	; 0x2c
 8006ffa:	429e      	cmp	r6, r3
 8006ffc:	da04      	bge.n	8007008 <__cvt+0x18>
 8006ffe:	2180      	movs	r1, #128	; 0x80
 8007000:	0609      	lsls	r1, r1, #24
 8007002:	1873      	adds	r3, r6, r1
 8007004:	001e      	movs	r6, r3
 8007006:	232d      	movs	r3, #45	; 0x2d
 8007008:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800700a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800700c:	7013      	strb	r3, [r2, #0]
 800700e:	2320      	movs	r3, #32
 8007010:	2203      	movs	r2, #3
 8007012:	439f      	bics	r7, r3
 8007014:	2f46      	cmp	r7, #70	; 0x46
 8007016:	d007      	beq.n	8007028 <__cvt+0x38>
 8007018:	003b      	movs	r3, r7
 800701a:	3b45      	subs	r3, #69	; 0x45
 800701c:	4259      	negs	r1, r3
 800701e:	414b      	adcs	r3, r1
 8007020:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007022:	3a01      	subs	r2, #1
 8007024:	18cb      	adds	r3, r1, r3
 8007026:	9310      	str	r3, [sp, #64]	; 0x40
 8007028:	ab09      	add	r3, sp, #36	; 0x24
 800702a:	9304      	str	r3, [sp, #16]
 800702c:	ab08      	add	r3, sp, #32
 800702e:	9303      	str	r3, [sp, #12]
 8007030:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007032:	9200      	str	r2, [sp, #0]
 8007034:	9302      	str	r3, [sp, #8]
 8007036:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007038:	0022      	movs	r2, r4
 800703a:	9301      	str	r3, [sp, #4]
 800703c:	0033      	movs	r3, r6
 800703e:	f000 fd05 	bl	8007a4c <_dtoa_r>
 8007042:	0005      	movs	r5, r0
 8007044:	2f47      	cmp	r7, #71	; 0x47
 8007046:	d102      	bne.n	800704e <__cvt+0x5e>
 8007048:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800704a:	07db      	lsls	r3, r3, #31
 800704c:	d528      	bpl.n	80070a0 <__cvt+0xb0>
 800704e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007050:	18eb      	adds	r3, r5, r3
 8007052:	9307      	str	r3, [sp, #28]
 8007054:	2f46      	cmp	r7, #70	; 0x46
 8007056:	d114      	bne.n	8007082 <__cvt+0x92>
 8007058:	782b      	ldrb	r3, [r5, #0]
 800705a:	2b30      	cmp	r3, #48	; 0x30
 800705c:	d10c      	bne.n	8007078 <__cvt+0x88>
 800705e:	2200      	movs	r2, #0
 8007060:	2300      	movs	r3, #0
 8007062:	0020      	movs	r0, r4
 8007064:	0031      	movs	r1, r6
 8007066:	f7f9 f9fb 	bl	8000460 <__aeabi_dcmpeq>
 800706a:	2800      	cmp	r0, #0
 800706c:	d104      	bne.n	8007078 <__cvt+0x88>
 800706e:	2301      	movs	r3, #1
 8007070:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007072:	1a9b      	subs	r3, r3, r2
 8007074:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007076:	6013      	str	r3, [r2, #0]
 8007078:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800707a:	9a07      	ldr	r2, [sp, #28]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	18d3      	adds	r3, r2, r3
 8007080:	9307      	str	r3, [sp, #28]
 8007082:	2200      	movs	r2, #0
 8007084:	2300      	movs	r3, #0
 8007086:	0020      	movs	r0, r4
 8007088:	0031      	movs	r1, r6
 800708a:	f7f9 f9e9 	bl	8000460 <__aeabi_dcmpeq>
 800708e:	2800      	cmp	r0, #0
 8007090:	d001      	beq.n	8007096 <__cvt+0xa6>
 8007092:	9b07      	ldr	r3, [sp, #28]
 8007094:	9309      	str	r3, [sp, #36]	; 0x24
 8007096:	2230      	movs	r2, #48	; 0x30
 8007098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800709a:	9907      	ldr	r1, [sp, #28]
 800709c:	428b      	cmp	r3, r1
 800709e:	d306      	bcc.n	80070ae <__cvt+0xbe>
 80070a0:	0028      	movs	r0, r5
 80070a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070a4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80070a6:	1b5b      	subs	r3, r3, r5
 80070a8:	6013      	str	r3, [r2, #0]
 80070aa:	b00b      	add	sp, #44	; 0x2c
 80070ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070ae:	1c59      	adds	r1, r3, #1
 80070b0:	9109      	str	r1, [sp, #36]	; 0x24
 80070b2:	701a      	strb	r2, [r3, #0]
 80070b4:	e7f0      	b.n	8007098 <__cvt+0xa8>

080070b6 <__exponent>:
 80070b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070b8:	1c83      	adds	r3, r0, #2
 80070ba:	b087      	sub	sp, #28
 80070bc:	9303      	str	r3, [sp, #12]
 80070be:	0005      	movs	r5, r0
 80070c0:	000c      	movs	r4, r1
 80070c2:	232b      	movs	r3, #43	; 0x2b
 80070c4:	7002      	strb	r2, [r0, #0]
 80070c6:	2900      	cmp	r1, #0
 80070c8:	da01      	bge.n	80070ce <__exponent+0x18>
 80070ca:	424c      	negs	r4, r1
 80070cc:	3302      	adds	r3, #2
 80070ce:	706b      	strb	r3, [r5, #1]
 80070d0:	2c09      	cmp	r4, #9
 80070d2:	dd31      	ble.n	8007138 <__exponent+0x82>
 80070d4:	270a      	movs	r7, #10
 80070d6:	ab04      	add	r3, sp, #16
 80070d8:	1dde      	adds	r6, r3, #7
 80070da:	0020      	movs	r0, r4
 80070dc:	0039      	movs	r1, r7
 80070de:	9601      	str	r6, [sp, #4]
 80070e0:	f7f9 f9a8 	bl	8000434 <__aeabi_idivmod>
 80070e4:	3e01      	subs	r6, #1
 80070e6:	3130      	adds	r1, #48	; 0x30
 80070e8:	0020      	movs	r0, r4
 80070ea:	7031      	strb	r1, [r6, #0]
 80070ec:	0039      	movs	r1, r7
 80070ee:	9402      	str	r4, [sp, #8]
 80070f0:	f7f9 f8ba 	bl	8000268 <__divsi3>
 80070f4:	9b02      	ldr	r3, [sp, #8]
 80070f6:	0004      	movs	r4, r0
 80070f8:	2b63      	cmp	r3, #99	; 0x63
 80070fa:	dcee      	bgt.n	80070da <__exponent+0x24>
 80070fc:	9b01      	ldr	r3, [sp, #4]
 80070fe:	3430      	adds	r4, #48	; 0x30
 8007100:	1e9a      	subs	r2, r3, #2
 8007102:	0013      	movs	r3, r2
 8007104:	9903      	ldr	r1, [sp, #12]
 8007106:	7014      	strb	r4, [r2, #0]
 8007108:	a804      	add	r0, sp, #16
 800710a:	3007      	adds	r0, #7
 800710c:	4298      	cmp	r0, r3
 800710e:	d80e      	bhi.n	800712e <__exponent+0x78>
 8007110:	ab04      	add	r3, sp, #16
 8007112:	3307      	adds	r3, #7
 8007114:	2000      	movs	r0, #0
 8007116:	429a      	cmp	r2, r3
 8007118:	d804      	bhi.n	8007124 <__exponent+0x6e>
 800711a:	ab04      	add	r3, sp, #16
 800711c:	3009      	adds	r0, #9
 800711e:	18c0      	adds	r0, r0, r3
 8007120:	9b01      	ldr	r3, [sp, #4]
 8007122:	1ac0      	subs	r0, r0, r3
 8007124:	9b03      	ldr	r3, [sp, #12]
 8007126:	1818      	adds	r0, r3, r0
 8007128:	1b40      	subs	r0, r0, r5
 800712a:	b007      	add	sp, #28
 800712c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800712e:	7818      	ldrb	r0, [r3, #0]
 8007130:	3301      	adds	r3, #1
 8007132:	7008      	strb	r0, [r1, #0]
 8007134:	3101      	adds	r1, #1
 8007136:	e7e7      	b.n	8007108 <__exponent+0x52>
 8007138:	2330      	movs	r3, #48	; 0x30
 800713a:	18e4      	adds	r4, r4, r3
 800713c:	70ab      	strb	r3, [r5, #2]
 800713e:	1d28      	adds	r0, r5, #4
 8007140:	70ec      	strb	r4, [r5, #3]
 8007142:	e7f1      	b.n	8007128 <__exponent+0x72>

08007144 <_printf_float>:
 8007144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007146:	b095      	sub	sp, #84	; 0x54
 8007148:	000c      	movs	r4, r1
 800714a:	9209      	str	r2, [sp, #36]	; 0x24
 800714c:	001e      	movs	r6, r3
 800714e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007150:	0007      	movs	r7, r0
 8007152:	f001 fa95 	bl	8008680 <_localeconv_r>
 8007156:	6803      	ldr	r3, [r0, #0]
 8007158:	0018      	movs	r0, r3
 800715a:	930c      	str	r3, [sp, #48]	; 0x30
 800715c:	f7f8 ffde 	bl	800011c <strlen>
 8007160:	2300      	movs	r3, #0
 8007162:	9312      	str	r3, [sp, #72]	; 0x48
 8007164:	7e23      	ldrb	r3, [r4, #24]
 8007166:	2207      	movs	r2, #7
 8007168:	930a      	str	r3, [sp, #40]	; 0x28
 800716a:	6823      	ldr	r3, [r4, #0]
 800716c:	900e      	str	r0, [sp, #56]	; 0x38
 800716e:	930d      	str	r3, [sp, #52]	; 0x34
 8007170:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007172:	682b      	ldr	r3, [r5, #0]
 8007174:	05c9      	lsls	r1, r1, #23
 8007176:	d547      	bpl.n	8007208 <_printf_float+0xc4>
 8007178:	189b      	adds	r3, r3, r2
 800717a:	4393      	bics	r3, r2
 800717c:	001a      	movs	r2, r3
 800717e:	3208      	adds	r2, #8
 8007180:	602a      	str	r2, [r5, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	64a2      	str	r2, [r4, #72]	; 0x48
 8007188:	64e3      	str	r3, [r4, #76]	; 0x4c
 800718a:	2201      	movs	r2, #1
 800718c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800718e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8007190:	930b      	str	r3, [sp, #44]	; 0x2c
 8007192:	006b      	lsls	r3, r5, #1
 8007194:	085b      	lsrs	r3, r3, #1
 8007196:	930f      	str	r3, [sp, #60]	; 0x3c
 8007198:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800719a:	4ba7      	ldr	r3, [pc, #668]	; (8007438 <_printf_float+0x2f4>)
 800719c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800719e:	4252      	negs	r2, r2
 80071a0:	f7fb f9e6 	bl	8002570 <__aeabi_dcmpun>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	d131      	bne.n	800720c <_printf_float+0xc8>
 80071a8:	2201      	movs	r2, #1
 80071aa:	4ba3      	ldr	r3, [pc, #652]	; (8007438 <_printf_float+0x2f4>)
 80071ac:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80071ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80071b0:	4252      	negs	r2, r2
 80071b2:	f7f9 f965 	bl	8000480 <__aeabi_dcmple>
 80071b6:	2800      	cmp	r0, #0
 80071b8:	d128      	bne.n	800720c <_printf_float+0xc8>
 80071ba:	2200      	movs	r2, #0
 80071bc:	2300      	movs	r3, #0
 80071be:	0029      	movs	r1, r5
 80071c0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80071c2:	f7f9 f953 	bl	800046c <__aeabi_dcmplt>
 80071c6:	2800      	cmp	r0, #0
 80071c8:	d003      	beq.n	80071d2 <_printf_float+0x8e>
 80071ca:	0023      	movs	r3, r4
 80071cc:	222d      	movs	r2, #45	; 0x2d
 80071ce:	3343      	adds	r3, #67	; 0x43
 80071d0:	701a      	strb	r2, [r3, #0]
 80071d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071d4:	4d99      	ldr	r5, [pc, #612]	; (800743c <_printf_float+0x2f8>)
 80071d6:	2b47      	cmp	r3, #71	; 0x47
 80071d8:	d900      	bls.n	80071dc <_printf_float+0x98>
 80071da:	4d99      	ldr	r5, [pc, #612]	; (8007440 <_printf_float+0x2fc>)
 80071dc:	2303      	movs	r3, #3
 80071de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80071e0:	6123      	str	r3, [r4, #16]
 80071e2:	3301      	adds	r3, #1
 80071e4:	439a      	bics	r2, r3
 80071e6:	2300      	movs	r3, #0
 80071e8:	6022      	str	r2, [r4, #0]
 80071ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80071ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071ee:	0021      	movs	r1, r4
 80071f0:	0038      	movs	r0, r7
 80071f2:	9600      	str	r6, [sp, #0]
 80071f4:	aa13      	add	r2, sp, #76	; 0x4c
 80071f6:	f000 f9e7 	bl	80075c8 <_printf_common>
 80071fa:	1c43      	adds	r3, r0, #1
 80071fc:	d000      	beq.n	8007200 <_printf_float+0xbc>
 80071fe:	e0a2      	b.n	8007346 <_printf_float+0x202>
 8007200:	2001      	movs	r0, #1
 8007202:	4240      	negs	r0, r0
 8007204:	b015      	add	sp, #84	; 0x54
 8007206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007208:	3307      	adds	r3, #7
 800720a:	e7b6      	b.n	800717a <_printf_float+0x36>
 800720c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800720e:	002b      	movs	r3, r5
 8007210:	0010      	movs	r0, r2
 8007212:	0029      	movs	r1, r5
 8007214:	f7fb f9ac 	bl	8002570 <__aeabi_dcmpun>
 8007218:	2800      	cmp	r0, #0
 800721a:	d00b      	beq.n	8007234 <_printf_float+0xf0>
 800721c:	2d00      	cmp	r5, #0
 800721e:	da03      	bge.n	8007228 <_printf_float+0xe4>
 8007220:	0023      	movs	r3, r4
 8007222:	222d      	movs	r2, #45	; 0x2d
 8007224:	3343      	adds	r3, #67	; 0x43
 8007226:	701a      	strb	r2, [r3, #0]
 8007228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800722a:	4d86      	ldr	r5, [pc, #536]	; (8007444 <_printf_float+0x300>)
 800722c:	2b47      	cmp	r3, #71	; 0x47
 800722e:	d9d5      	bls.n	80071dc <_printf_float+0x98>
 8007230:	4d85      	ldr	r5, [pc, #532]	; (8007448 <_printf_float+0x304>)
 8007232:	e7d3      	b.n	80071dc <_printf_float+0x98>
 8007234:	2220      	movs	r2, #32
 8007236:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007238:	6863      	ldr	r3, [r4, #4]
 800723a:	4391      	bics	r1, r2
 800723c:	910f      	str	r1, [sp, #60]	; 0x3c
 800723e:	1c5a      	adds	r2, r3, #1
 8007240:	d149      	bne.n	80072d6 <_printf_float+0x192>
 8007242:	3307      	adds	r3, #7
 8007244:	6063      	str	r3, [r4, #4]
 8007246:	2380      	movs	r3, #128	; 0x80
 8007248:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800724a:	00db      	lsls	r3, r3, #3
 800724c:	4313      	orrs	r3, r2
 800724e:	2200      	movs	r2, #0
 8007250:	9206      	str	r2, [sp, #24]
 8007252:	aa12      	add	r2, sp, #72	; 0x48
 8007254:	9205      	str	r2, [sp, #20]
 8007256:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007258:	a908      	add	r1, sp, #32
 800725a:	9204      	str	r2, [sp, #16]
 800725c:	aa11      	add	r2, sp, #68	; 0x44
 800725e:	9203      	str	r2, [sp, #12]
 8007260:	2223      	movs	r2, #35	; 0x23
 8007262:	6023      	str	r3, [r4, #0]
 8007264:	9301      	str	r3, [sp, #4]
 8007266:	6863      	ldr	r3, [r4, #4]
 8007268:	1852      	adds	r2, r2, r1
 800726a:	9202      	str	r2, [sp, #8]
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	0038      	movs	r0, r7
 8007270:	002b      	movs	r3, r5
 8007272:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007274:	f7ff febc 	bl	8006ff0 <__cvt>
 8007278:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800727a:	0005      	movs	r5, r0
 800727c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800727e:	2b47      	cmp	r3, #71	; 0x47
 8007280:	d108      	bne.n	8007294 <_printf_float+0x150>
 8007282:	1ccb      	adds	r3, r1, #3
 8007284:	db02      	blt.n	800728c <_printf_float+0x148>
 8007286:	6863      	ldr	r3, [r4, #4]
 8007288:	4299      	cmp	r1, r3
 800728a:	dd48      	ble.n	800731e <_printf_float+0x1da>
 800728c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800728e:	3b02      	subs	r3, #2
 8007290:	b2db      	uxtb	r3, r3
 8007292:	930a      	str	r3, [sp, #40]	; 0x28
 8007294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007296:	2b65      	cmp	r3, #101	; 0x65
 8007298:	d824      	bhi.n	80072e4 <_printf_float+0x1a0>
 800729a:	0020      	movs	r0, r4
 800729c:	001a      	movs	r2, r3
 800729e:	3901      	subs	r1, #1
 80072a0:	3050      	adds	r0, #80	; 0x50
 80072a2:	9111      	str	r1, [sp, #68]	; 0x44
 80072a4:	f7ff ff07 	bl	80070b6 <__exponent>
 80072a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80072aa:	900b      	str	r0, [sp, #44]	; 0x2c
 80072ac:	1813      	adds	r3, r2, r0
 80072ae:	6123      	str	r3, [r4, #16]
 80072b0:	2a01      	cmp	r2, #1
 80072b2:	dc02      	bgt.n	80072ba <_printf_float+0x176>
 80072b4:	6822      	ldr	r2, [r4, #0]
 80072b6:	07d2      	lsls	r2, r2, #31
 80072b8:	d501      	bpl.n	80072be <_printf_float+0x17a>
 80072ba:	3301      	adds	r3, #1
 80072bc:	6123      	str	r3, [r4, #16]
 80072be:	2323      	movs	r3, #35	; 0x23
 80072c0:	aa08      	add	r2, sp, #32
 80072c2:	189b      	adds	r3, r3, r2
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d100      	bne.n	80072cc <_printf_float+0x188>
 80072ca:	e78f      	b.n	80071ec <_printf_float+0xa8>
 80072cc:	0023      	movs	r3, r4
 80072ce:	222d      	movs	r2, #45	; 0x2d
 80072d0:	3343      	adds	r3, #67	; 0x43
 80072d2:	701a      	strb	r2, [r3, #0]
 80072d4:	e78a      	b.n	80071ec <_printf_float+0xa8>
 80072d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80072d8:	2a47      	cmp	r2, #71	; 0x47
 80072da:	d1b4      	bne.n	8007246 <_printf_float+0x102>
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1b2      	bne.n	8007246 <_printf_float+0x102>
 80072e0:	3301      	adds	r3, #1
 80072e2:	e7af      	b.n	8007244 <_printf_float+0x100>
 80072e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072e6:	2b66      	cmp	r3, #102	; 0x66
 80072e8:	d11b      	bne.n	8007322 <_printf_float+0x1de>
 80072ea:	6863      	ldr	r3, [r4, #4]
 80072ec:	2900      	cmp	r1, #0
 80072ee:	dd0d      	ble.n	800730c <_printf_float+0x1c8>
 80072f0:	6121      	str	r1, [r4, #16]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d102      	bne.n	80072fc <_printf_float+0x1b8>
 80072f6:	6822      	ldr	r2, [r4, #0]
 80072f8:	07d2      	lsls	r2, r2, #31
 80072fa:	d502      	bpl.n	8007302 <_printf_float+0x1be>
 80072fc:	3301      	adds	r3, #1
 80072fe:	1859      	adds	r1, r3, r1
 8007300:	6121      	str	r1, [r4, #16]
 8007302:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007304:	65a3      	str	r3, [r4, #88]	; 0x58
 8007306:	2300      	movs	r3, #0
 8007308:	930b      	str	r3, [sp, #44]	; 0x2c
 800730a:	e7d8      	b.n	80072be <_printf_float+0x17a>
 800730c:	2b00      	cmp	r3, #0
 800730e:	d103      	bne.n	8007318 <_printf_float+0x1d4>
 8007310:	2201      	movs	r2, #1
 8007312:	6821      	ldr	r1, [r4, #0]
 8007314:	4211      	tst	r1, r2
 8007316:	d000      	beq.n	800731a <_printf_float+0x1d6>
 8007318:	1c9a      	adds	r2, r3, #2
 800731a:	6122      	str	r2, [r4, #16]
 800731c:	e7f1      	b.n	8007302 <_printf_float+0x1be>
 800731e:	2367      	movs	r3, #103	; 0x67
 8007320:	930a      	str	r3, [sp, #40]	; 0x28
 8007322:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007324:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007326:	4293      	cmp	r3, r2
 8007328:	db06      	blt.n	8007338 <_printf_float+0x1f4>
 800732a:	6822      	ldr	r2, [r4, #0]
 800732c:	6123      	str	r3, [r4, #16]
 800732e:	07d2      	lsls	r2, r2, #31
 8007330:	d5e7      	bpl.n	8007302 <_printf_float+0x1be>
 8007332:	3301      	adds	r3, #1
 8007334:	6123      	str	r3, [r4, #16]
 8007336:	e7e4      	b.n	8007302 <_printf_float+0x1be>
 8007338:	2101      	movs	r1, #1
 800733a:	2b00      	cmp	r3, #0
 800733c:	dc01      	bgt.n	8007342 <_printf_float+0x1fe>
 800733e:	1849      	adds	r1, r1, r1
 8007340:	1ac9      	subs	r1, r1, r3
 8007342:	1852      	adds	r2, r2, r1
 8007344:	e7e9      	b.n	800731a <_printf_float+0x1d6>
 8007346:	6822      	ldr	r2, [r4, #0]
 8007348:	0553      	lsls	r3, r2, #21
 800734a:	d407      	bmi.n	800735c <_printf_float+0x218>
 800734c:	6923      	ldr	r3, [r4, #16]
 800734e:	002a      	movs	r2, r5
 8007350:	0038      	movs	r0, r7
 8007352:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007354:	47b0      	blx	r6
 8007356:	1c43      	adds	r3, r0, #1
 8007358:	d128      	bne.n	80073ac <_printf_float+0x268>
 800735a:	e751      	b.n	8007200 <_printf_float+0xbc>
 800735c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800735e:	2b65      	cmp	r3, #101	; 0x65
 8007360:	d800      	bhi.n	8007364 <_printf_float+0x220>
 8007362:	e0e1      	b.n	8007528 <_printf_float+0x3e4>
 8007364:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007366:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007368:	2200      	movs	r2, #0
 800736a:	2300      	movs	r3, #0
 800736c:	f7f9 f878 	bl	8000460 <__aeabi_dcmpeq>
 8007370:	2800      	cmp	r0, #0
 8007372:	d031      	beq.n	80073d8 <_printf_float+0x294>
 8007374:	2301      	movs	r3, #1
 8007376:	0038      	movs	r0, r7
 8007378:	4a34      	ldr	r2, [pc, #208]	; (800744c <_printf_float+0x308>)
 800737a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800737c:	47b0      	blx	r6
 800737e:	1c43      	adds	r3, r0, #1
 8007380:	d100      	bne.n	8007384 <_printf_float+0x240>
 8007382:	e73d      	b.n	8007200 <_printf_float+0xbc>
 8007384:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007386:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007388:	4293      	cmp	r3, r2
 800738a:	db02      	blt.n	8007392 <_printf_float+0x24e>
 800738c:	6823      	ldr	r3, [r4, #0]
 800738e:	07db      	lsls	r3, r3, #31
 8007390:	d50c      	bpl.n	80073ac <_printf_float+0x268>
 8007392:	0038      	movs	r0, r7
 8007394:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007396:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007398:	9909      	ldr	r1, [sp, #36]	; 0x24
 800739a:	47b0      	blx	r6
 800739c:	2500      	movs	r5, #0
 800739e:	1c43      	adds	r3, r0, #1
 80073a0:	d100      	bne.n	80073a4 <_printf_float+0x260>
 80073a2:	e72d      	b.n	8007200 <_printf_float+0xbc>
 80073a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073a6:	3b01      	subs	r3, #1
 80073a8:	42ab      	cmp	r3, r5
 80073aa:	dc0a      	bgt.n	80073c2 <_printf_float+0x27e>
 80073ac:	6823      	ldr	r3, [r4, #0]
 80073ae:	079b      	lsls	r3, r3, #30
 80073b0:	d500      	bpl.n	80073b4 <_printf_float+0x270>
 80073b2:	e106      	b.n	80075c2 <_printf_float+0x47e>
 80073b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80073b6:	68e0      	ldr	r0, [r4, #12]
 80073b8:	4298      	cmp	r0, r3
 80073ba:	db00      	blt.n	80073be <_printf_float+0x27a>
 80073bc:	e722      	b.n	8007204 <_printf_float+0xc0>
 80073be:	0018      	movs	r0, r3
 80073c0:	e720      	b.n	8007204 <_printf_float+0xc0>
 80073c2:	0022      	movs	r2, r4
 80073c4:	2301      	movs	r3, #1
 80073c6:	0038      	movs	r0, r7
 80073c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073ca:	321a      	adds	r2, #26
 80073cc:	47b0      	blx	r6
 80073ce:	1c43      	adds	r3, r0, #1
 80073d0:	d100      	bne.n	80073d4 <_printf_float+0x290>
 80073d2:	e715      	b.n	8007200 <_printf_float+0xbc>
 80073d4:	3501      	adds	r5, #1
 80073d6:	e7e5      	b.n	80073a4 <_printf_float+0x260>
 80073d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073da:	2b00      	cmp	r3, #0
 80073dc:	dc38      	bgt.n	8007450 <_printf_float+0x30c>
 80073de:	2301      	movs	r3, #1
 80073e0:	0038      	movs	r0, r7
 80073e2:	4a1a      	ldr	r2, [pc, #104]	; (800744c <_printf_float+0x308>)
 80073e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073e6:	47b0      	blx	r6
 80073e8:	1c43      	adds	r3, r0, #1
 80073ea:	d100      	bne.n	80073ee <_printf_float+0x2aa>
 80073ec:	e708      	b.n	8007200 <_printf_float+0xbc>
 80073ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80073f2:	4313      	orrs	r3, r2
 80073f4:	d102      	bne.n	80073fc <_printf_float+0x2b8>
 80073f6:	6823      	ldr	r3, [r4, #0]
 80073f8:	07db      	lsls	r3, r3, #31
 80073fa:	d5d7      	bpl.n	80073ac <_printf_float+0x268>
 80073fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073fe:	0038      	movs	r0, r7
 8007400:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007402:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007404:	47b0      	blx	r6
 8007406:	1c43      	adds	r3, r0, #1
 8007408:	d100      	bne.n	800740c <_printf_float+0x2c8>
 800740a:	e6f9      	b.n	8007200 <_printf_float+0xbc>
 800740c:	2300      	movs	r3, #0
 800740e:	930a      	str	r3, [sp, #40]	; 0x28
 8007410:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007412:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007414:	425b      	negs	r3, r3
 8007416:	4293      	cmp	r3, r2
 8007418:	dc01      	bgt.n	800741e <_printf_float+0x2da>
 800741a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800741c:	e797      	b.n	800734e <_printf_float+0x20a>
 800741e:	0022      	movs	r2, r4
 8007420:	2301      	movs	r3, #1
 8007422:	0038      	movs	r0, r7
 8007424:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007426:	321a      	adds	r2, #26
 8007428:	47b0      	blx	r6
 800742a:	1c43      	adds	r3, r0, #1
 800742c:	d100      	bne.n	8007430 <_printf_float+0x2ec>
 800742e:	e6e7      	b.n	8007200 <_printf_float+0xbc>
 8007430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007432:	3301      	adds	r3, #1
 8007434:	e7eb      	b.n	800740e <_printf_float+0x2ca>
 8007436:	46c0      	nop			; (mov r8, r8)
 8007438:	7fefffff 	.word	0x7fefffff
 800743c:	0800a140 	.word	0x0800a140
 8007440:	0800a144 	.word	0x0800a144
 8007444:	0800a148 	.word	0x0800a148
 8007448:	0800a14c 	.word	0x0800a14c
 800744c:	0800a150 	.word	0x0800a150
 8007450:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007452:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007454:	920a      	str	r2, [sp, #40]	; 0x28
 8007456:	429a      	cmp	r2, r3
 8007458:	dd00      	ble.n	800745c <_printf_float+0x318>
 800745a:	930a      	str	r3, [sp, #40]	; 0x28
 800745c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800745e:	2b00      	cmp	r3, #0
 8007460:	dc3c      	bgt.n	80074dc <_printf_float+0x398>
 8007462:	2300      	movs	r3, #0
 8007464:	930d      	str	r3, [sp, #52]	; 0x34
 8007466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007468:	43db      	mvns	r3, r3
 800746a:	17db      	asrs	r3, r3, #31
 800746c:	930f      	str	r3, [sp, #60]	; 0x3c
 800746e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007470:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007472:	930b      	str	r3, [sp, #44]	; 0x2c
 8007474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007476:	4013      	ands	r3, r2
 8007478:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800747e:	4293      	cmp	r3, r2
 8007480:	dc34      	bgt.n	80074ec <_printf_float+0x3a8>
 8007482:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007484:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007486:	4293      	cmp	r3, r2
 8007488:	db3d      	blt.n	8007506 <_printf_float+0x3c2>
 800748a:	6823      	ldr	r3, [r4, #0]
 800748c:	07db      	lsls	r3, r3, #31
 800748e:	d43a      	bmi.n	8007506 <_printf_float+0x3c2>
 8007490:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007494:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	1a52      	subs	r2, r2, r1
 800749a:	920a      	str	r2, [sp, #40]	; 0x28
 800749c:	429a      	cmp	r2, r3
 800749e:	dd00      	ble.n	80074a2 <_printf_float+0x35e>
 80074a0:	930a      	str	r3, [sp, #40]	; 0x28
 80074a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	dc36      	bgt.n	8007516 <_printf_float+0x3d2>
 80074a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074aa:	2500      	movs	r5, #0
 80074ac:	43db      	mvns	r3, r3
 80074ae:	17db      	asrs	r3, r3, #31
 80074b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80074b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80074b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80074b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074b8:	1a9b      	subs	r3, r3, r2
 80074ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074bc:	400a      	ands	r2, r1
 80074be:	1a9b      	subs	r3, r3, r2
 80074c0:	42ab      	cmp	r3, r5
 80074c2:	dc00      	bgt.n	80074c6 <_printf_float+0x382>
 80074c4:	e772      	b.n	80073ac <_printf_float+0x268>
 80074c6:	0022      	movs	r2, r4
 80074c8:	2301      	movs	r3, #1
 80074ca:	0038      	movs	r0, r7
 80074cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074ce:	321a      	adds	r2, #26
 80074d0:	47b0      	blx	r6
 80074d2:	1c43      	adds	r3, r0, #1
 80074d4:	d100      	bne.n	80074d8 <_printf_float+0x394>
 80074d6:	e693      	b.n	8007200 <_printf_float+0xbc>
 80074d8:	3501      	adds	r5, #1
 80074da:	e7ea      	b.n	80074b2 <_printf_float+0x36e>
 80074dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074de:	002a      	movs	r2, r5
 80074e0:	0038      	movs	r0, r7
 80074e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074e4:	47b0      	blx	r6
 80074e6:	1c43      	adds	r3, r0, #1
 80074e8:	d1bb      	bne.n	8007462 <_printf_float+0x31e>
 80074ea:	e689      	b.n	8007200 <_printf_float+0xbc>
 80074ec:	0022      	movs	r2, r4
 80074ee:	2301      	movs	r3, #1
 80074f0:	0038      	movs	r0, r7
 80074f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074f4:	321a      	adds	r2, #26
 80074f6:	47b0      	blx	r6
 80074f8:	1c43      	adds	r3, r0, #1
 80074fa:	d100      	bne.n	80074fe <_printf_float+0x3ba>
 80074fc:	e680      	b.n	8007200 <_printf_float+0xbc>
 80074fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007500:	3301      	adds	r3, #1
 8007502:	930d      	str	r3, [sp, #52]	; 0x34
 8007504:	e7b3      	b.n	800746e <_printf_float+0x32a>
 8007506:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007508:	0038      	movs	r0, r7
 800750a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800750c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800750e:	47b0      	blx	r6
 8007510:	1c43      	adds	r3, r0, #1
 8007512:	d1bd      	bne.n	8007490 <_printf_float+0x34c>
 8007514:	e674      	b.n	8007200 <_printf_float+0xbc>
 8007516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007518:	0038      	movs	r0, r7
 800751a:	18ea      	adds	r2, r5, r3
 800751c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800751e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007520:	47b0      	blx	r6
 8007522:	1c43      	adds	r3, r0, #1
 8007524:	d1c0      	bne.n	80074a8 <_printf_float+0x364>
 8007526:	e66b      	b.n	8007200 <_printf_float+0xbc>
 8007528:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800752a:	2b01      	cmp	r3, #1
 800752c:	dc02      	bgt.n	8007534 <_printf_float+0x3f0>
 800752e:	2301      	movs	r3, #1
 8007530:	421a      	tst	r2, r3
 8007532:	d034      	beq.n	800759e <_printf_float+0x45a>
 8007534:	2301      	movs	r3, #1
 8007536:	002a      	movs	r2, r5
 8007538:	0038      	movs	r0, r7
 800753a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800753c:	47b0      	blx	r6
 800753e:	1c43      	adds	r3, r0, #1
 8007540:	d100      	bne.n	8007544 <_printf_float+0x400>
 8007542:	e65d      	b.n	8007200 <_printf_float+0xbc>
 8007544:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007546:	0038      	movs	r0, r7
 8007548:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800754a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800754c:	47b0      	blx	r6
 800754e:	1c43      	adds	r3, r0, #1
 8007550:	d100      	bne.n	8007554 <_printf_float+0x410>
 8007552:	e655      	b.n	8007200 <_printf_float+0xbc>
 8007554:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007556:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007558:	2200      	movs	r2, #0
 800755a:	2300      	movs	r3, #0
 800755c:	f7f8 ff80 	bl	8000460 <__aeabi_dcmpeq>
 8007560:	2800      	cmp	r0, #0
 8007562:	d11a      	bne.n	800759a <_printf_float+0x456>
 8007564:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007566:	1c6a      	adds	r2, r5, #1
 8007568:	3b01      	subs	r3, #1
 800756a:	0038      	movs	r0, r7
 800756c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800756e:	47b0      	blx	r6
 8007570:	1c43      	adds	r3, r0, #1
 8007572:	d10e      	bne.n	8007592 <_printf_float+0x44e>
 8007574:	e644      	b.n	8007200 <_printf_float+0xbc>
 8007576:	0022      	movs	r2, r4
 8007578:	2301      	movs	r3, #1
 800757a:	0038      	movs	r0, r7
 800757c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800757e:	321a      	adds	r2, #26
 8007580:	47b0      	blx	r6
 8007582:	1c43      	adds	r3, r0, #1
 8007584:	d100      	bne.n	8007588 <_printf_float+0x444>
 8007586:	e63b      	b.n	8007200 <_printf_float+0xbc>
 8007588:	3501      	adds	r5, #1
 800758a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800758c:	3b01      	subs	r3, #1
 800758e:	42ab      	cmp	r3, r5
 8007590:	dcf1      	bgt.n	8007576 <_printf_float+0x432>
 8007592:	0022      	movs	r2, r4
 8007594:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007596:	3250      	adds	r2, #80	; 0x50
 8007598:	e6da      	b.n	8007350 <_printf_float+0x20c>
 800759a:	2500      	movs	r5, #0
 800759c:	e7f5      	b.n	800758a <_printf_float+0x446>
 800759e:	002a      	movs	r2, r5
 80075a0:	e7e3      	b.n	800756a <_printf_float+0x426>
 80075a2:	0022      	movs	r2, r4
 80075a4:	2301      	movs	r3, #1
 80075a6:	0038      	movs	r0, r7
 80075a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075aa:	3219      	adds	r2, #25
 80075ac:	47b0      	blx	r6
 80075ae:	1c43      	adds	r3, r0, #1
 80075b0:	d100      	bne.n	80075b4 <_printf_float+0x470>
 80075b2:	e625      	b.n	8007200 <_printf_float+0xbc>
 80075b4:	3501      	adds	r5, #1
 80075b6:	68e3      	ldr	r3, [r4, #12]
 80075b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80075ba:	1a9b      	subs	r3, r3, r2
 80075bc:	42ab      	cmp	r3, r5
 80075be:	dcf0      	bgt.n	80075a2 <_printf_float+0x45e>
 80075c0:	e6f8      	b.n	80073b4 <_printf_float+0x270>
 80075c2:	2500      	movs	r5, #0
 80075c4:	e7f7      	b.n	80075b6 <_printf_float+0x472>
 80075c6:	46c0      	nop			; (mov r8, r8)

080075c8 <_printf_common>:
 80075c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075ca:	0015      	movs	r5, r2
 80075cc:	9301      	str	r3, [sp, #4]
 80075ce:	688a      	ldr	r2, [r1, #8]
 80075d0:	690b      	ldr	r3, [r1, #16]
 80075d2:	000c      	movs	r4, r1
 80075d4:	9000      	str	r0, [sp, #0]
 80075d6:	4293      	cmp	r3, r2
 80075d8:	da00      	bge.n	80075dc <_printf_common+0x14>
 80075da:	0013      	movs	r3, r2
 80075dc:	0022      	movs	r2, r4
 80075de:	602b      	str	r3, [r5, #0]
 80075e0:	3243      	adds	r2, #67	; 0x43
 80075e2:	7812      	ldrb	r2, [r2, #0]
 80075e4:	2a00      	cmp	r2, #0
 80075e6:	d001      	beq.n	80075ec <_printf_common+0x24>
 80075e8:	3301      	adds	r3, #1
 80075ea:	602b      	str	r3, [r5, #0]
 80075ec:	6823      	ldr	r3, [r4, #0]
 80075ee:	069b      	lsls	r3, r3, #26
 80075f0:	d502      	bpl.n	80075f8 <_printf_common+0x30>
 80075f2:	682b      	ldr	r3, [r5, #0]
 80075f4:	3302      	adds	r3, #2
 80075f6:	602b      	str	r3, [r5, #0]
 80075f8:	6822      	ldr	r2, [r4, #0]
 80075fa:	2306      	movs	r3, #6
 80075fc:	0017      	movs	r7, r2
 80075fe:	401f      	ands	r7, r3
 8007600:	421a      	tst	r2, r3
 8007602:	d027      	beq.n	8007654 <_printf_common+0x8c>
 8007604:	0023      	movs	r3, r4
 8007606:	3343      	adds	r3, #67	; 0x43
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	1e5a      	subs	r2, r3, #1
 800760c:	4193      	sbcs	r3, r2
 800760e:	6822      	ldr	r2, [r4, #0]
 8007610:	0692      	lsls	r2, r2, #26
 8007612:	d430      	bmi.n	8007676 <_printf_common+0xae>
 8007614:	0022      	movs	r2, r4
 8007616:	9901      	ldr	r1, [sp, #4]
 8007618:	9800      	ldr	r0, [sp, #0]
 800761a:	9e08      	ldr	r6, [sp, #32]
 800761c:	3243      	adds	r2, #67	; 0x43
 800761e:	47b0      	blx	r6
 8007620:	1c43      	adds	r3, r0, #1
 8007622:	d025      	beq.n	8007670 <_printf_common+0xa8>
 8007624:	2306      	movs	r3, #6
 8007626:	6820      	ldr	r0, [r4, #0]
 8007628:	682a      	ldr	r2, [r5, #0]
 800762a:	68e1      	ldr	r1, [r4, #12]
 800762c:	2500      	movs	r5, #0
 800762e:	4003      	ands	r3, r0
 8007630:	2b04      	cmp	r3, #4
 8007632:	d103      	bne.n	800763c <_printf_common+0x74>
 8007634:	1a8d      	subs	r5, r1, r2
 8007636:	43eb      	mvns	r3, r5
 8007638:	17db      	asrs	r3, r3, #31
 800763a:	401d      	ands	r5, r3
 800763c:	68a3      	ldr	r3, [r4, #8]
 800763e:	6922      	ldr	r2, [r4, #16]
 8007640:	4293      	cmp	r3, r2
 8007642:	dd01      	ble.n	8007648 <_printf_common+0x80>
 8007644:	1a9b      	subs	r3, r3, r2
 8007646:	18ed      	adds	r5, r5, r3
 8007648:	2700      	movs	r7, #0
 800764a:	42bd      	cmp	r5, r7
 800764c:	d120      	bne.n	8007690 <_printf_common+0xc8>
 800764e:	2000      	movs	r0, #0
 8007650:	e010      	b.n	8007674 <_printf_common+0xac>
 8007652:	3701      	adds	r7, #1
 8007654:	68e3      	ldr	r3, [r4, #12]
 8007656:	682a      	ldr	r2, [r5, #0]
 8007658:	1a9b      	subs	r3, r3, r2
 800765a:	42bb      	cmp	r3, r7
 800765c:	ddd2      	ble.n	8007604 <_printf_common+0x3c>
 800765e:	0022      	movs	r2, r4
 8007660:	2301      	movs	r3, #1
 8007662:	9901      	ldr	r1, [sp, #4]
 8007664:	9800      	ldr	r0, [sp, #0]
 8007666:	9e08      	ldr	r6, [sp, #32]
 8007668:	3219      	adds	r2, #25
 800766a:	47b0      	blx	r6
 800766c:	1c43      	adds	r3, r0, #1
 800766e:	d1f0      	bne.n	8007652 <_printf_common+0x8a>
 8007670:	2001      	movs	r0, #1
 8007672:	4240      	negs	r0, r0
 8007674:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007676:	2030      	movs	r0, #48	; 0x30
 8007678:	18e1      	adds	r1, r4, r3
 800767a:	3143      	adds	r1, #67	; 0x43
 800767c:	7008      	strb	r0, [r1, #0]
 800767e:	0021      	movs	r1, r4
 8007680:	1c5a      	adds	r2, r3, #1
 8007682:	3145      	adds	r1, #69	; 0x45
 8007684:	7809      	ldrb	r1, [r1, #0]
 8007686:	18a2      	adds	r2, r4, r2
 8007688:	3243      	adds	r2, #67	; 0x43
 800768a:	3302      	adds	r3, #2
 800768c:	7011      	strb	r1, [r2, #0]
 800768e:	e7c1      	b.n	8007614 <_printf_common+0x4c>
 8007690:	0022      	movs	r2, r4
 8007692:	2301      	movs	r3, #1
 8007694:	9901      	ldr	r1, [sp, #4]
 8007696:	9800      	ldr	r0, [sp, #0]
 8007698:	9e08      	ldr	r6, [sp, #32]
 800769a:	321a      	adds	r2, #26
 800769c:	47b0      	blx	r6
 800769e:	1c43      	adds	r3, r0, #1
 80076a0:	d0e6      	beq.n	8007670 <_printf_common+0xa8>
 80076a2:	3701      	adds	r7, #1
 80076a4:	e7d1      	b.n	800764a <_printf_common+0x82>
	...

080076a8 <_printf_i>:
 80076a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076aa:	b08b      	sub	sp, #44	; 0x2c
 80076ac:	9206      	str	r2, [sp, #24]
 80076ae:	000a      	movs	r2, r1
 80076b0:	3243      	adds	r2, #67	; 0x43
 80076b2:	9307      	str	r3, [sp, #28]
 80076b4:	9005      	str	r0, [sp, #20]
 80076b6:	9204      	str	r2, [sp, #16]
 80076b8:	7e0a      	ldrb	r2, [r1, #24]
 80076ba:	000c      	movs	r4, r1
 80076bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80076be:	2a78      	cmp	r2, #120	; 0x78
 80076c0:	d807      	bhi.n	80076d2 <_printf_i+0x2a>
 80076c2:	2a62      	cmp	r2, #98	; 0x62
 80076c4:	d809      	bhi.n	80076da <_printf_i+0x32>
 80076c6:	2a00      	cmp	r2, #0
 80076c8:	d100      	bne.n	80076cc <_printf_i+0x24>
 80076ca:	e0c1      	b.n	8007850 <_printf_i+0x1a8>
 80076cc:	2a58      	cmp	r2, #88	; 0x58
 80076ce:	d100      	bne.n	80076d2 <_printf_i+0x2a>
 80076d0:	e08c      	b.n	80077ec <_printf_i+0x144>
 80076d2:	0026      	movs	r6, r4
 80076d4:	3642      	adds	r6, #66	; 0x42
 80076d6:	7032      	strb	r2, [r6, #0]
 80076d8:	e022      	b.n	8007720 <_printf_i+0x78>
 80076da:	0010      	movs	r0, r2
 80076dc:	3863      	subs	r0, #99	; 0x63
 80076de:	2815      	cmp	r0, #21
 80076e0:	d8f7      	bhi.n	80076d2 <_printf_i+0x2a>
 80076e2:	f7f8 fd2d 	bl	8000140 <__gnu_thumb1_case_shi>
 80076e6:	0016      	.short	0x0016
 80076e8:	fff6001f 	.word	0xfff6001f
 80076ec:	fff6fff6 	.word	0xfff6fff6
 80076f0:	001ffff6 	.word	0x001ffff6
 80076f4:	fff6fff6 	.word	0xfff6fff6
 80076f8:	fff6fff6 	.word	0xfff6fff6
 80076fc:	003600a8 	.word	0x003600a8
 8007700:	fff6009a 	.word	0xfff6009a
 8007704:	00b9fff6 	.word	0x00b9fff6
 8007708:	0036fff6 	.word	0x0036fff6
 800770c:	fff6fff6 	.word	0xfff6fff6
 8007710:	009e      	.short	0x009e
 8007712:	0026      	movs	r6, r4
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	3642      	adds	r6, #66	; 0x42
 8007718:	1d11      	adds	r1, r2, #4
 800771a:	6019      	str	r1, [r3, #0]
 800771c:	6813      	ldr	r3, [r2, #0]
 800771e:	7033      	strb	r3, [r6, #0]
 8007720:	2301      	movs	r3, #1
 8007722:	e0a7      	b.n	8007874 <_printf_i+0x1cc>
 8007724:	6808      	ldr	r0, [r1, #0]
 8007726:	6819      	ldr	r1, [r3, #0]
 8007728:	1d0a      	adds	r2, r1, #4
 800772a:	0605      	lsls	r5, r0, #24
 800772c:	d50b      	bpl.n	8007746 <_printf_i+0x9e>
 800772e:	680d      	ldr	r5, [r1, #0]
 8007730:	601a      	str	r2, [r3, #0]
 8007732:	2d00      	cmp	r5, #0
 8007734:	da03      	bge.n	800773e <_printf_i+0x96>
 8007736:	232d      	movs	r3, #45	; 0x2d
 8007738:	9a04      	ldr	r2, [sp, #16]
 800773a:	426d      	negs	r5, r5
 800773c:	7013      	strb	r3, [r2, #0]
 800773e:	4b61      	ldr	r3, [pc, #388]	; (80078c4 <_printf_i+0x21c>)
 8007740:	270a      	movs	r7, #10
 8007742:	9303      	str	r3, [sp, #12]
 8007744:	e01b      	b.n	800777e <_printf_i+0xd6>
 8007746:	680d      	ldr	r5, [r1, #0]
 8007748:	601a      	str	r2, [r3, #0]
 800774a:	0641      	lsls	r1, r0, #25
 800774c:	d5f1      	bpl.n	8007732 <_printf_i+0x8a>
 800774e:	b22d      	sxth	r5, r5
 8007750:	e7ef      	b.n	8007732 <_printf_i+0x8a>
 8007752:	680d      	ldr	r5, [r1, #0]
 8007754:	6819      	ldr	r1, [r3, #0]
 8007756:	1d08      	adds	r0, r1, #4
 8007758:	6018      	str	r0, [r3, #0]
 800775a:	062e      	lsls	r6, r5, #24
 800775c:	d501      	bpl.n	8007762 <_printf_i+0xba>
 800775e:	680d      	ldr	r5, [r1, #0]
 8007760:	e003      	b.n	800776a <_printf_i+0xc2>
 8007762:	066d      	lsls	r5, r5, #25
 8007764:	d5fb      	bpl.n	800775e <_printf_i+0xb6>
 8007766:	680d      	ldr	r5, [r1, #0]
 8007768:	b2ad      	uxth	r5, r5
 800776a:	4b56      	ldr	r3, [pc, #344]	; (80078c4 <_printf_i+0x21c>)
 800776c:	2708      	movs	r7, #8
 800776e:	9303      	str	r3, [sp, #12]
 8007770:	2a6f      	cmp	r2, #111	; 0x6f
 8007772:	d000      	beq.n	8007776 <_printf_i+0xce>
 8007774:	3702      	adds	r7, #2
 8007776:	0023      	movs	r3, r4
 8007778:	2200      	movs	r2, #0
 800777a:	3343      	adds	r3, #67	; 0x43
 800777c:	701a      	strb	r2, [r3, #0]
 800777e:	6863      	ldr	r3, [r4, #4]
 8007780:	60a3      	str	r3, [r4, #8]
 8007782:	2b00      	cmp	r3, #0
 8007784:	db03      	blt.n	800778e <_printf_i+0xe6>
 8007786:	2204      	movs	r2, #4
 8007788:	6821      	ldr	r1, [r4, #0]
 800778a:	4391      	bics	r1, r2
 800778c:	6021      	str	r1, [r4, #0]
 800778e:	2d00      	cmp	r5, #0
 8007790:	d102      	bne.n	8007798 <_printf_i+0xf0>
 8007792:	9e04      	ldr	r6, [sp, #16]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00c      	beq.n	80077b2 <_printf_i+0x10a>
 8007798:	9e04      	ldr	r6, [sp, #16]
 800779a:	0028      	movs	r0, r5
 800779c:	0039      	movs	r1, r7
 800779e:	f7f8 fd5f 	bl	8000260 <__aeabi_uidivmod>
 80077a2:	9b03      	ldr	r3, [sp, #12]
 80077a4:	3e01      	subs	r6, #1
 80077a6:	5c5b      	ldrb	r3, [r3, r1]
 80077a8:	7033      	strb	r3, [r6, #0]
 80077aa:	002b      	movs	r3, r5
 80077ac:	0005      	movs	r5, r0
 80077ae:	429f      	cmp	r7, r3
 80077b0:	d9f3      	bls.n	800779a <_printf_i+0xf2>
 80077b2:	2f08      	cmp	r7, #8
 80077b4:	d109      	bne.n	80077ca <_printf_i+0x122>
 80077b6:	6823      	ldr	r3, [r4, #0]
 80077b8:	07db      	lsls	r3, r3, #31
 80077ba:	d506      	bpl.n	80077ca <_printf_i+0x122>
 80077bc:	6863      	ldr	r3, [r4, #4]
 80077be:	6922      	ldr	r2, [r4, #16]
 80077c0:	4293      	cmp	r3, r2
 80077c2:	dc02      	bgt.n	80077ca <_printf_i+0x122>
 80077c4:	2330      	movs	r3, #48	; 0x30
 80077c6:	3e01      	subs	r6, #1
 80077c8:	7033      	strb	r3, [r6, #0]
 80077ca:	9b04      	ldr	r3, [sp, #16]
 80077cc:	1b9b      	subs	r3, r3, r6
 80077ce:	6123      	str	r3, [r4, #16]
 80077d0:	9b07      	ldr	r3, [sp, #28]
 80077d2:	0021      	movs	r1, r4
 80077d4:	9300      	str	r3, [sp, #0]
 80077d6:	9805      	ldr	r0, [sp, #20]
 80077d8:	9b06      	ldr	r3, [sp, #24]
 80077da:	aa09      	add	r2, sp, #36	; 0x24
 80077dc:	f7ff fef4 	bl	80075c8 <_printf_common>
 80077e0:	1c43      	adds	r3, r0, #1
 80077e2:	d14c      	bne.n	800787e <_printf_i+0x1d6>
 80077e4:	2001      	movs	r0, #1
 80077e6:	4240      	negs	r0, r0
 80077e8:	b00b      	add	sp, #44	; 0x2c
 80077ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077ec:	3145      	adds	r1, #69	; 0x45
 80077ee:	700a      	strb	r2, [r1, #0]
 80077f0:	4a34      	ldr	r2, [pc, #208]	; (80078c4 <_printf_i+0x21c>)
 80077f2:	9203      	str	r2, [sp, #12]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	6821      	ldr	r1, [r4, #0]
 80077f8:	ca20      	ldmia	r2!, {r5}
 80077fa:	601a      	str	r2, [r3, #0]
 80077fc:	0608      	lsls	r0, r1, #24
 80077fe:	d516      	bpl.n	800782e <_printf_i+0x186>
 8007800:	07cb      	lsls	r3, r1, #31
 8007802:	d502      	bpl.n	800780a <_printf_i+0x162>
 8007804:	2320      	movs	r3, #32
 8007806:	4319      	orrs	r1, r3
 8007808:	6021      	str	r1, [r4, #0]
 800780a:	2710      	movs	r7, #16
 800780c:	2d00      	cmp	r5, #0
 800780e:	d1b2      	bne.n	8007776 <_printf_i+0xce>
 8007810:	2320      	movs	r3, #32
 8007812:	6822      	ldr	r2, [r4, #0]
 8007814:	439a      	bics	r2, r3
 8007816:	6022      	str	r2, [r4, #0]
 8007818:	e7ad      	b.n	8007776 <_printf_i+0xce>
 800781a:	2220      	movs	r2, #32
 800781c:	6809      	ldr	r1, [r1, #0]
 800781e:	430a      	orrs	r2, r1
 8007820:	6022      	str	r2, [r4, #0]
 8007822:	0022      	movs	r2, r4
 8007824:	2178      	movs	r1, #120	; 0x78
 8007826:	3245      	adds	r2, #69	; 0x45
 8007828:	7011      	strb	r1, [r2, #0]
 800782a:	4a27      	ldr	r2, [pc, #156]	; (80078c8 <_printf_i+0x220>)
 800782c:	e7e1      	b.n	80077f2 <_printf_i+0x14a>
 800782e:	0648      	lsls	r0, r1, #25
 8007830:	d5e6      	bpl.n	8007800 <_printf_i+0x158>
 8007832:	b2ad      	uxth	r5, r5
 8007834:	e7e4      	b.n	8007800 <_printf_i+0x158>
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	680d      	ldr	r5, [r1, #0]
 800783a:	1d10      	adds	r0, r2, #4
 800783c:	6949      	ldr	r1, [r1, #20]
 800783e:	6018      	str	r0, [r3, #0]
 8007840:	6813      	ldr	r3, [r2, #0]
 8007842:	062e      	lsls	r6, r5, #24
 8007844:	d501      	bpl.n	800784a <_printf_i+0x1a2>
 8007846:	6019      	str	r1, [r3, #0]
 8007848:	e002      	b.n	8007850 <_printf_i+0x1a8>
 800784a:	066d      	lsls	r5, r5, #25
 800784c:	d5fb      	bpl.n	8007846 <_printf_i+0x19e>
 800784e:	8019      	strh	r1, [r3, #0]
 8007850:	2300      	movs	r3, #0
 8007852:	9e04      	ldr	r6, [sp, #16]
 8007854:	6123      	str	r3, [r4, #16]
 8007856:	e7bb      	b.n	80077d0 <_printf_i+0x128>
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	1d11      	adds	r1, r2, #4
 800785c:	6019      	str	r1, [r3, #0]
 800785e:	6816      	ldr	r6, [r2, #0]
 8007860:	2100      	movs	r1, #0
 8007862:	0030      	movs	r0, r6
 8007864:	6862      	ldr	r2, [r4, #4]
 8007866:	f000 ff19 	bl	800869c <memchr>
 800786a:	2800      	cmp	r0, #0
 800786c:	d001      	beq.n	8007872 <_printf_i+0x1ca>
 800786e:	1b80      	subs	r0, r0, r6
 8007870:	6060      	str	r0, [r4, #4]
 8007872:	6863      	ldr	r3, [r4, #4]
 8007874:	6123      	str	r3, [r4, #16]
 8007876:	2300      	movs	r3, #0
 8007878:	9a04      	ldr	r2, [sp, #16]
 800787a:	7013      	strb	r3, [r2, #0]
 800787c:	e7a8      	b.n	80077d0 <_printf_i+0x128>
 800787e:	6923      	ldr	r3, [r4, #16]
 8007880:	0032      	movs	r2, r6
 8007882:	9906      	ldr	r1, [sp, #24]
 8007884:	9805      	ldr	r0, [sp, #20]
 8007886:	9d07      	ldr	r5, [sp, #28]
 8007888:	47a8      	blx	r5
 800788a:	1c43      	adds	r3, r0, #1
 800788c:	d0aa      	beq.n	80077e4 <_printf_i+0x13c>
 800788e:	6823      	ldr	r3, [r4, #0]
 8007890:	079b      	lsls	r3, r3, #30
 8007892:	d415      	bmi.n	80078c0 <_printf_i+0x218>
 8007894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007896:	68e0      	ldr	r0, [r4, #12]
 8007898:	4298      	cmp	r0, r3
 800789a:	daa5      	bge.n	80077e8 <_printf_i+0x140>
 800789c:	0018      	movs	r0, r3
 800789e:	e7a3      	b.n	80077e8 <_printf_i+0x140>
 80078a0:	0022      	movs	r2, r4
 80078a2:	2301      	movs	r3, #1
 80078a4:	9906      	ldr	r1, [sp, #24]
 80078a6:	9805      	ldr	r0, [sp, #20]
 80078a8:	9e07      	ldr	r6, [sp, #28]
 80078aa:	3219      	adds	r2, #25
 80078ac:	47b0      	blx	r6
 80078ae:	1c43      	adds	r3, r0, #1
 80078b0:	d098      	beq.n	80077e4 <_printf_i+0x13c>
 80078b2:	3501      	adds	r5, #1
 80078b4:	68e3      	ldr	r3, [r4, #12]
 80078b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078b8:	1a9b      	subs	r3, r3, r2
 80078ba:	42ab      	cmp	r3, r5
 80078bc:	dcf0      	bgt.n	80078a0 <_printf_i+0x1f8>
 80078be:	e7e9      	b.n	8007894 <_printf_i+0x1ec>
 80078c0:	2500      	movs	r5, #0
 80078c2:	e7f7      	b.n	80078b4 <_printf_i+0x20c>
 80078c4:	0800a152 	.word	0x0800a152
 80078c8:	0800a163 	.word	0x0800a163

080078cc <siprintf>:
 80078cc:	b40e      	push	{r1, r2, r3}
 80078ce:	b500      	push	{lr}
 80078d0:	490b      	ldr	r1, [pc, #44]	; (8007900 <siprintf+0x34>)
 80078d2:	b09c      	sub	sp, #112	; 0x70
 80078d4:	ab1d      	add	r3, sp, #116	; 0x74
 80078d6:	9002      	str	r0, [sp, #8]
 80078d8:	9006      	str	r0, [sp, #24]
 80078da:	9107      	str	r1, [sp, #28]
 80078dc:	9104      	str	r1, [sp, #16]
 80078de:	4809      	ldr	r0, [pc, #36]	; (8007904 <siprintf+0x38>)
 80078e0:	4909      	ldr	r1, [pc, #36]	; (8007908 <siprintf+0x3c>)
 80078e2:	cb04      	ldmia	r3!, {r2}
 80078e4:	9105      	str	r1, [sp, #20]
 80078e6:	6800      	ldr	r0, [r0, #0]
 80078e8:	a902      	add	r1, sp, #8
 80078ea:	9301      	str	r3, [sp, #4]
 80078ec:	f001 fbf6 	bl	80090dc <_svfiprintf_r>
 80078f0:	2300      	movs	r3, #0
 80078f2:	9a02      	ldr	r2, [sp, #8]
 80078f4:	7013      	strb	r3, [r2, #0]
 80078f6:	b01c      	add	sp, #112	; 0x70
 80078f8:	bc08      	pop	{r3}
 80078fa:	b003      	add	sp, #12
 80078fc:	4718      	bx	r3
 80078fe:	46c0      	nop			; (mov r8, r8)
 8007900:	7fffffff 	.word	0x7fffffff
 8007904:	2000000c 	.word	0x2000000c
 8007908:	ffff0208 	.word	0xffff0208

0800790c <strncpy>:
 800790c:	0003      	movs	r3, r0
 800790e:	b530      	push	{r4, r5, lr}
 8007910:	001d      	movs	r5, r3
 8007912:	2a00      	cmp	r2, #0
 8007914:	d006      	beq.n	8007924 <strncpy+0x18>
 8007916:	780c      	ldrb	r4, [r1, #0]
 8007918:	3a01      	subs	r2, #1
 800791a:	3301      	adds	r3, #1
 800791c:	702c      	strb	r4, [r5, #0]
 800791e:	3101      	adds	r1, #1
 8007920:	2c00      	cmp	r4, #0
 8007922:	d1f5      	bne.n	8007910 <strncpy+0x4>
 8007924:	2100      	movs	r1, #0
 8007926:	189a      	adds	r2, r3, r2
 8007928:	4293      	cmp	r3, r2
 800792a:	d100      	bne.n	800792e <strncpy+0x22>
 800792c:	bd30      	pop	{r4, r5, pc}
 800792e:	7019      	strb	r1, [r3, #0]
 8007930:	3301      	adds	r3, #1
 8007932:	e7f9      	b.n	8007928 <strncpy+0x1c>

08007934 <quorem>:
 8007934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007936:	0006      	movs	r6, r0
 8007938:	690b      	ldr	r3, [r1, #16]
 800793a:	6932      	ldr	r2, [r6, #16]
 800793c:	b087      	sub	sp, #28
 800793e:	2000      	movs	r0, #0
 8007940:	9103      	str	r1, [sp, #12]
 8007942:	429a      	cmp	r2, r3
 8007944:	db65      	blt.n	8007a12 <quorem+0xde>
 8007946:	3b01      	subs	r3, #1
 8007948:	009c      	lsls	r4, r3, #2
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	000b      	movs	r3, r1
 800794e:	3314      	adds	r3, #20
 8007950:	9305      	str	r3, [sp, #20]
 8007952:	191b      	adds	r3, r3, r4
 8007954:	9304      	str	r3, [sp, #16]
 8007956:	0033      	movs	r3, r6
 8007958:	3314      	adds	r3, #20
 800795a:	9302      	str	r3, [sp, #8]
 800795c:	191c      	adds	r4, r3, r4
 800795e:	9b04      	ldr	r3, [sp, #16]
 8007960:	6827      	ldr	r7, [r4, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	0038      	movs	r0, r7
 8007966:	1c5d      	adds	r5, r3, #1
 8007968:	0029      	movs	r1, r5
 800796a:	9301      	str	r3, [sp, #4]
 800796c:	f7f8 fbf2 	bl	8000154 <__udivsi3>
 8007970:	9001      	str	r0, [sp, #4]
 8007972:	42af      	cmp	r7, r5
 8007974:	d324      	bcc.n	80079c0 <quorem+0x8c>
 8007976:	2500      	movs	r5, #0
 8007978:	46ac      	mov	ip, r5
 800797a:	9802      	ldr	r0, [sp, #8]
 800797c:	9f05      	ldr	r7, [sp, #20]
 800797e:	cf08      	ldmia	r7!, {r3}
 8007980:	9a01      	ldr	r2, [sp, #4]
 8007982:	b299      	uxth	r1, r3
 8007984:	4351      	muls	r1, r2
 8007986:	0c1b      	lsrs	r3, r3, #16
 8007988:	4353      	muls	r3, r2
 800798a:	1949      	adds	r1, r1, r5
 800798c:	0c0a      	lsrs	r2, r1, #16
 800798e:	189b      	adds	r3, r3, r2
 8007990:	6802      	ldr	r2, [r0, #0]
 8007992:	b289      	uxth	r1, r1
 8007994:	b292      	uxth	r2, r2
 8007996:	4462      	add	r2, ip
 8007998:	1a52      	subs	r2, r2, r1
 800799a:	6801      	ldr	r1, [r0, #0]
 800799c:	0c1d      	lsrs	r5, r3, #16
 800799e:	0c09      	lsrs	r1, r1, #16
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	1acb      	subs	r3, r1, r3
 80079a4:	1411      	asrs	r1, r2, #16
 80079a6:	185b      	adds	r3, r3, r1
 80079a8:	1419      	asrs	r1, r3, #16
 80079aa:	b292      	uxth	r2, r2
 80079ac:	041b      	lsls	r3, r3, #16
 80079ae:	431a      	orrs	r2, r3
 80079b0:	9b04      	ldr	r3, [sp, #16]
 80079b2:	468c      	mov	ip, r1
 80079b4:	c004      	stmia	r0!, {r2}
 80079b6:	42bb      	cmp	r3, r7
 80079b8:	d2e1      	bcs.n	800797e <quorem+0x4a>
 80079ba:	6823      	ldr	r3, [r4, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d030      	beq.n	8007a22 <quorem+0xee>
 80079c0:	0030      	movs	r0, r6
 80079c2:	9903      	ldr	r1, [sp, #12]
 80079c4:	f001 f902 	bl	8008bcc <__mcmp>
 80079c8:	2800      	cmp	r0, #0
 80079ca:	db21      	blt.n	8007a10 <quorem+0xdc>
 80079cc:	0030      	movs	r0, r6
 80079ce:	2400      	movs	r4, #0
 80079d0:	9b01      	ldr	r3, [sp, #4]
 80079d2:	9903      	ldr	r1, [sp, #12]
 80079d4:	3301      	adds	r3, #1
 80079d6:	9301      	str	r3, [sp, #4]
 80079d8:	3014      	adds	r0, #20
 80079da:	3114      	adds	r1, #20
 80079dc:	6803      	ldr	r3, [r0, #0]
 80079de:	c920      	ldmia	r1!, {r5}
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	1914      	adds	r4, r2, r4
 80079e4:	b2aa      	uxth	r2, r5
 80079e6:	1aa2      	subs	r2, r4, r2
 80079e8:	0c1b      	lsrs	r3, r3, #16
 80079ea:	0c2d      	lsrs	r5, r5, #16
 80079ec:	1414      	asrs	r4, r2, #16
 80079ee:	1b5b      	subs	r3, r3, r5
 80079f0:	191b      	adds	r3, r3, r4
 80079f2:	141c      	asrs	r4, r3, #16
 80079f4:	b292      	uxth	r2, r2
 80079f6:	041b      	lsls	r3, r3, #16
 80079f8:	4313      	orrs	r3, r2
 80079fa:	c008      	stmia	r0!, {r3}
 80079fc:	9b04      	ldr	r3, [sp, #16]
 80079fe:	428b      	cmp	r3, r1
 8007a00:	d2ec      	bcs.n	80079dc <quorem+0xa8>
 8007a02:	9b00      	ldr	r3, [sp, #0]
 8007a04:	9a02      	ldr	r2, [sp, #8]
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	18d3      	adds	r3, r2, r3
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	2a00      	cmp	r2, #0
 8007a0e:	d015      	beq.n	8007a3c <quorem+0x108>
 8007a10:	9801      	ldr	r0, [sp, #4]
 8007a12:	b007      	add	sp, #28
 8007a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a16:	6823      	ldr	r3, [r4, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d106      	bne.n	8007a2a <quorem+0xf6>
 8007a1c:	9b00      	ldr	r3, [sp, #0]
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	9300      	str	r3, [sp, #0]
 8007a22:	9b02      	ldr	r3, [sp, #8]
 8007a24:	3c04      	subs	r4, #4
 8007a26:	42a3      	cmp	r3, r4
 8007a28:	d3f5      	bcc.n	8007a16 <quorem+0xe2>
 8007a2a:	9b00      	ldr	r3, [sp, #0]
 8007a2c:	6133      	str	r3, [r6, #16]
 8007a2e:	e7c7      	b.n	80079c0 <quorem+0x8c>
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	2a00      	cmp	r2, #0
 8007a34:	d106      	bne.n	8007a44 <quorem+0x110>
 8007a36:	9a00      	ldr	r2, [sp, #0]
 8007a38:	3a01      	subs	r2, #1
 8007a3a:	9200      	str	r2, [sp, #0]
 8007a3c:	9a02      	ldr	r2, [sp, #8]
 8007a3e:	3b04      	subs	r3, #4
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d3f5      	bcc.n	8007a30 <quorem+0xfc>
 8007a44:	9b00      	ldr	r3, [sp, #0]
 8007a46:	6133      	str	r3, [r6, #16]
 8007a48:	e7e2      	b.n	8007a10 <quorem+0xdc>
	...

08007a4c <_dtoa_r>:
 8007a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a4e:	b09d      	sub	sp, #116	; 0x74
 8007a50:	9202      	str	r2, [sp, #8]
 8007a52:	9303      	str	r3, [sp, #12]
 8007a54:	9b02      	ldr	r3, [sp, #8]
 8007a56:	9c03      	ldr	r4, [sp, #12]
 8007a58:	9308      	str	r3, [sp, #32]
 8007a5a:	9409      	str	r4, [sp, #36]	; 0x24
 8007a5c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007a5e:	0007      	movs	r7, r0
 8007a60:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8007a62:	2c00      	cmp	r4, #0
 8007a64:	d10e      	bne.n	8007a84 <_dtoa_r+0x38>
 8007a66:	2010      	movs	r0, #16
 8007a68:	f000 fe0e 	bl	8008688 <malloc>
 8007a6c:	1e02      	subs	r2, r0, #0
 8007a6e:	6278      	str	r0, [r7, #36]	; 0x24
 8007a70:	d104      	bne.n	8007a7c <_dtoa_r+0x30>
 8007a72:	21ea      	movs	r1, #234	; 0xea
 8007a74:	4bc7      	ldr	r3, [pc, #796]	; (8007d94 <_dtoa_r+0x348>)
 8007a76:	48c8      	ldr	r0, [pc, #800]	; (8007d98 <_dtoa_r+0x34c>)
 8007a78:	f001 fc42 	bl	8009300 <__assert_func>
 8007a7c:	6044      	str	r4, [r0, #4]
 8007a7e:	6084      	str	r4, [r0, #8]
 8007a80:	6004      	str	r4, [r0, #0]
 8007a82:	60c4      	str	r4, [r0, #12]
 8007a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a86:	6819      	ldr	r1, [r3, #0]
 8007a88:	2900      	cmp	r1, #0
 8007a8a:	d00a      	beq.n	8007aa2 <_dtoa_r+0x56>
 8007a8c:	685a      	ldr	r2, [r3, #4]
 8007a8e:	2301      	movs	r3, #1
 8007a90:	4093      	lsls	r3, r2
 8007a92:	604a      	str	r2, [r1, #4]
 8007a94:	608b      	str	r3, [r1, #8]
 8007a96:	0038      	movs	r0, r7
 8007a98:	f000 fe58 	bl	800874c <_Bfree>
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa0:	601a      	str	r2, [r3, #0]
 8007aa2:	9b03      	ldr	r3, [sp, #12]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	da20      	bge.n	8007aea <_dtoa_r+0x9e>
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	602b      	str	r3, [r5, #0]
 8007aac:	9b03      	ldr	r3, [sp, #12]
 8007aae:	005b      	lsls	r3, r3, #1
 8007ab0:	085b      	lsrs	r3, r3, #1
 8007ab2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ab4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007ab6:	4bb9      	ldr	r3, [pc, #740]	; (8007d9c <_dtoa_r+0x350>)
 8007ab8:	4ab8      	ldr	r2, [pc, #736]	; (8007d9c <_dtoa_r+0x350>)
 8007aba:	402b      	ands	r3, r5
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d117      	bne.n	8007af0 <_dtoa_r+0xa4>
 8007ac0:	4bb7      	ldr	r3, [pc, #732]	; (8007da0 <_dtoa_r+0x354>)
 8007ac2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007ac4:	0328      	lsls	r0, r5, #12
 8007ac6:	6013      	str	r3, [r2, #0]
 8007ac8:	9b02      	ldr	r3, [sp, #8]
 8007aca:	0b00      	lsrs	r0, r0, #12
 8007acc:	4318      	orrs	r0, r3
 8007ace:	d101      	bne.n	8007ad4 <_dtoa_r+0x88>
 8007ad0:	f000 fdbf 	bl	8008652 <_dtoa_r+0xc06>
 8007ad4:	48b3      	ldr	r0, [pc, #716]	; (8007da4 <_dtoa_r+0x358>)
 8007ad6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007ad8:	9006      	str	r0, [sp, #24]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d002      	beq.n	8007ae4 <_dtoa_r+0x98>
 8007ade:	4bb2      	ldr	r3, [pc, #712]	; (8007da8 <_dtoa_r+0x35c>)
 8007ae0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007ae2:	6013      	str	r3, [r2, #0]
 8007ae4:	9806      	ldr	r0, [sp, #24]
 8007ae6:	b01d      	add	sp, #116	; 0x74
 8007ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007aea:	2300      	movs	r3, #0
 8007aec:	602b      	str	r3, [r5, #0]
 8007aee:	e7e1      	b.n	8007ab4 <_dtoa_r+0x68>
 8007af0:	9b08      	ldr	r3, [sp, #32]
 8007af2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007af4:	9312      	str	r3, [sp, #72]	; 0x48
 8007af6:	9413      	str	r4, [sp, #76]	; 0x4c
 8007af8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007afa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007afc:	2200      	movs	r2, #0
 8007afe:	2300      	movs	r3, #0
 8007b00:	f7f8 fcae 	bl	8000460 <__aeabi_dcmpeq>
 8007b04:	1e04      	subs	r4, r0, #0
 8007b06:	d009      	beq.n	8007b1c <_dtoa_r+0xd0>
 8007b08:	2301      	movs	r3, #1
 8007b0a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007b0c:	6013      	str	r3, [r2, #0]
 8007b0e:	4ba7      	ldr	r3, [pc, #668]	; (8007dac <_dtoa_r+0x360>)
 8007b10:	9306      	str	r3, [sp, #24]
 8007b12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d0e5      	beq.n	8007ae4 <_dtoa_r+0x98>
 8007b18:	4ba5      	ldr	r3, [pc, #660]	; (8007db0 <_dtoa_r+0x364>)
 8007b1a:	e7e1      	b.n	8007ae0 <_dtoa_r+0x94>
 8007b1c:	ab1a      	add	r3, sp, #104	; 0x68
 8007b1e:	9301      	str	r3, [sp, #4]
 8007b20:	ab1b      	add	r3, sp, #108	; 0x6c
 8007b22:	9300      	str	r3, [sp, #0]
 8007b24:	0038      	movs	r0, r7
 8007b26:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b2a:	f001 f903 	bl	8008d34 <__d2b>
 8007b2e:	006e      	lsls	r6, r5, #1
 8007b30:	9005      	str	r0, [sp, #20]
 8007b32:	0d76      	lsrs	r6, r6, #21
 8007b34:	d100      	bne.n	8007b38 <_dtoa_r+0xec>
 8007b36:	e07c      	b.n	8007c32 <_dtoa_r+0x1e6>
 8007b38:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007b3a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007b3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b3e:	4a9d      	ldr	r2, [pc, #628]	; (8007db4 <_dtoa_r+0x368>)
 8007b40:	031b      	lsls	r3, r3, #12
 8007b42:	0b1b      	lsrs	r3, r3, #12
 8007b44:	431a      	orrs	r2, r3
 8007b46:	0011      	movs	r1, r2
 8007b48:	4b9b      	ldr	r3, [pc, #620]	; (8007db8 <_dtoa_r+0x36c>)
 8007b4a:	9418      	str	r4, [sp, #96]	; 0x60
 8007b4c:	18f6      	adds	r6, r6, r3
 8007b4e:	2200      	movs	r2, #0
 8007b50:	4b9a      	ldr	r3, [pc, #616]	; (8007dbc <_dtoa_r+0x370>)
 8007b52:	f7fa f97b 	bl	8001e4c <__aeabi_dsub>
 8007b56:	4a9a      	ldr	r2, [pc, #616]	; (8007dc0 <_dtoa_r+0x374>)
 8007b58:	4b9a      	ldr	r3, [pc, #616]	; (8007dc4 <_dtoa_r+0x378>)
 8007b5a:	f7f9 ff0b 	bl	8001974 <__aeabi_dmul>
 8007b5e:	4a9a      	ldr	r2, [pc, #616]	; (8007dc8 <_dtoa_r+0x37c>)
 8007b60:	4b9a      	ldr	r3, [pc, #616]	; (8007dcc <_dtoa_r+0x380>)
 8007b62:	f7f8 ffc9 	bl	8000af8 <__aeabi_dadd>
 8007b66:	0004      	movs	r4, r0
 8007b68:	0030      	movs	r0, r6
 8007b6a:	000d      	movs	r5, r1
 8007b6c:	f7fa fd54 	bl	8002618 <__aeabi_i2d>
 8007b70:	4a97      	ldr	r2, [pc, #604]	; (8007dd0 <_dtoa_r+0x384>)
 8007b72:	4b98      	ldr	r3, [pc, #608]	; (8007dd4 <_dtoa_r+0x388>)
 8007b74:	f7f9 fefe 	bl	8001974 <__aeabi_dmul>
 8007b78:	0002      	movs	r2, r0
 8007b7a:	000b      	movs	r3, r1
 8007b7c:	0020      	movs	r0, r4
 8007b7e:	0029      	movs	r1, r5
 8007b80:	f7f8 ffba 	bl	8000af8 <__aeabi_dadd>
 8007b84:	0004      	movs	r4, r0
 8007b86:	000d      	movs	r5, r1
 8007b88:	f7fa fd10 	bl	80025ac <__aeabi_d2iz>
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	9002      	str	r0, [sp, #8]
 8007b90:	2300      	movs	r3, #0
 8007b92:	0020      	movs	r0, r4
 8007b94:	0029      	movs	r1, r5
 8007b96:	f7f8 fc69 	bl	800046c <__aeabi_dcmplt>
 8007b9a:	2800      	cmp	r0, #0
 8007b9c:	d00b      	beq.n	8007bb6 <_dtoa_r+0x16a>
 8007b9e:	9802      	ldr	r0, [sp, #8]
 8007ba0:	f7fa fd3a 	bl	8002618 <__aeabi_i2d>
 8007ba4:	002b      	movs	r3, r5
 8007ba6:	0022      	movs	r2, r4
 8007ba8:	f7f8 fc5a 	bl	8000460 <__aeabi_dcmpeq>
 8007bac:	4243      	negs	r3, r0
 8007bae:	4158      	adcs	r0, r3
 8007bb0:	9b02      	ldr	r3, [sp, #8]
 8007bb2:	1a1b      	subs	r3, r3, r0
 8007bb4:	9302      	str	r3, [sp, #8]
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	9316      	str	r3, [sp, #88]	; 0x58
 8007bba:	9b02      	ldr	r3, [sp, #8]
 8007bbc:	2b16      	cmp	r3, #22
 8007bbe:	d80f      	bhi.n	8007be0 <_dtoa_r+0x194>
 8007bc0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007bc2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007bc4:	00da      	lsls	r2, r3, #3
 8007bc6:	4b84      	ldr	r3, [pc, #528]	; (8007dd8 <_dtoa_r+0x38c>)
 8007bc8:	189b      	adds	r3, r3, r2
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	f7f8 fc4d 	bl	800046c <__aeabi_dcmplt>
 8007bd2:	2800      	cmp	r0, #0
 8007bd4:	d049      	beq.n	8007c6a <_dtoa_r+0x21e>
 8007bd6:	9b02      	ldr	r3, [sp, #8]
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	9302      	str	r3, [sp, #8]
 8007bdc:	2300      	movs	r3, #0
 8007bde:	9316      	str	r3, [sp, #88]	; 0x58
 8007be0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007be2:	1b9e      	subs	r6, r3, r6
 8007be4:	2300      	movs	r3, #0
 8007be6:	930a      	str	r3, [sp, #40]	; 0x28
 8007be8:	0033      	movs	r3, r6
 8007bea:	3b01      	subs	r3, #1
 8007bec:	930d      	str	r3, [sp, #52]	; 0x34
 8007bee:	d504      	bpl.n	8007bfa <_dtoa_r+0x1ae>
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	1b9b      	subs	r3, r3, r6
 8007bf4:	930a      	str	r3, [sp, #40]	; 0x28
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	930d      	str	r3, [sp, #52]	; 0x34
 8007bfa:	9b02      	ldr	r3, [sp, #8]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	db36      	blt.n	8007c6e <_dtoa_r+0x222>
 8007c00:	9a02      	ldr	r2, [sp, #8]
 8007c02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c04:	4694      	mov	ip, r2
 8007c06:	4463      	add	r3, ip
 8007c08:	930d      	str	r3, [sp, #52]	; 0x34
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	9215      	str	r2, [sp, #84]	; 0x54
 8007c0e:	930e      	str	r3, [sp, #56]	; 0x38
 8007c10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c12:	2401      	movs	r4, #1
 8007c14:	2b09      	cmp	r3, #9
 8007c16:	d864      	bhi.n	8007ce2 <_dtoa_r+0x296>
 8007c18:	2b05      	cmp	r3, #5
 8007c1a:	dd02      	ble.n	8007c22 <_dtoa_r+0x1d6>
 8007c1c:	2400      	movs	r4, #0
 8007c1e:	3b04      	subs	r3, #4
 8007c20:	9322      	str	r3, [sp, #136]	; 0x88
 8007c22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c24:	1e98      	subs	r0, r3, #2
 8007c26:	2803      	cmp	r0, #3
 8007c28:	d864      	bhi.n	8007cf4 <_dtoa_r+0x2a8>
 8007c2a:	f7f8 fa7f 	bl	800012c <__gnu_thumb1_case_uqi>
 8007c2e:	3829      	.short	0x3829
 8007c30:	5836      	.short	0x5836
 8007c32:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007c34:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007c36:	189e      	adds	r6, r3, r2
 8007c38:	4b68      	ldr	r3, [pc, #416]	; (8007ddc <_dtoa_r+0x390>)
 8007c3a:	18f2      	adds	r2, r6, r3
 8007c3c:	2a20      	cmp	r2, #32
 8007c3e:	dd0f      	ble.n	8007c60 <_dtoa_r+0x214>
 8007c40:	2340      	movs	r3, #64	; 0x40
 8007c42:	1a9b      	subs	r3, r3, r2
 8007c44:	409d      	lsls	r5, r3
 8007c46:	4b66      	ldr	r3, [pc, #408]	; (8007de0 <_dtoa_r+0x394>)
 8007c48:	9802      	ldr	r0, [sp, #8]
 8007c4a:	18f3      	adds	r3, r6, r3
 8007c4c:	40d8      	lsrs	r0, r3
 8007c4e:	4328      	orrs	r0, r5
 8007c50:	f7fa fd12 	bl	8002678 <__aeabi_ui2d>
 8007c54:	2301      	movs	r3, #1
 8007c56:	4c63      	ldr	r4, [pc, #396]	; (8007de4 <_dtoa_r+0x398>)
 8007c58:	3e01      	subs	r6, #1
 8007c5a:	1909      	adds	r1, r1, r4
 8007c5c:	9318      	str	r3, [sp, #96]	; 0x60
 8007c5e:	e776      	b.n	8007b4e <_dtoa_r+0x102>
 8007c60:	2320      	movs	r3, #32
 8007c62:	9802      	ldr	r0, [sp, #8]
 8007c64:	1a9b      	subs	r3, r3, r2
 8007c66:	4098      	lsls	r0, r3
 8007c68:	e7f2      	b.n	8007c50 <_dtoa_r+0x204>
 8007c6a:	9016      	str	r0, [sp, #88]	; 0x58
 8007c6c:	e7b8      	b.n	8007be0 <_dtoa_r+0x194>
 8007c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c70:	9a02      	ldr	r2, [sp, #8]
 8007c72:	1a9b      	subs	r3, r3, r2
 8007c74:	930a      	str	r3, [sp, #40]	; 0x28
 8007c76:	4253      	negs	r3, r2
 8007c78:	930e      	str	r3, [sp, #56]	; 0x38
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	9315      	str	r3, [sp, #84]	; 0x54
 8007c7e:	e7c7      	b.n	8007c10 <_dtoa_r+0x1c4>
 8007c80:	2300      	movs	r3, #0
 8007c82:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c86:	930c      	str	r3, [sp, #48]	; 0x30
 8007c88:	9307      	str	r3, [sp, #28]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	dc13      	bgt.n	8007cb6 <_dtoa_r+0x26a>
 8007c8e:	2301      	movs	r3, #1
 8007c90:	001a      	movs	r2, r3
 8007c92:	930c      	str	r3, [sp, #48]	; 0x30
 8007c94:	9307      	str	r3, [sp, #28]
 8007c96:	9223      	str	r2, [sp, #140]	; 0x8c
 8007c98:	e00d      	b.n	8007cb6 <_dtoa_r+0x26a>
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e7f1      	b.n	8007c82 <_dtoa_r+0x236>
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007ca2:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ca4:	4694      	mov	ip, r2
 8007ca6:	9b02      	ldr	r3, [sp, #8]
 8007ca8:	4463      	add	r3, ip
 8007caa:	930c      	str	r3, [sp, #48]	; 0x30
 8007cac:	3301      	adds	r3, #1
 8007cae:	9307      	str	r3, [sp, #28]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	dc00      	bgt.n	8007cb6 <_dtoa_r+0x26a>
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007cba:	6042      	str	r2, [r0, #4]
 8007cbc:	3204      	adds	r2, #4
 8007cbe:	0015      	movs	r5, r2
 8007cc0:	3514      	adds	r5, #20
 8007cc2:	6841      	ldr	r1, [r0, #4]
 8007cc4:	429d      	cmp	r5, r3
 8007cc6:	d919      	bls.n	8007cfc <_dtoa_r+0x2b0>
 8007cc8:	0038      	movs	r0, r7
 8007cca:	f000 fcfb 	bl	80086c4 <_Balloc>
 8007cce:	9006      	str	r0, [sp, #24]
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	d117      	bne.n	8007d04 <_dtoa_r+0x2b8>
 8007cd4:	21d5      	movs	r1, #213	; 0xd5
 8007cd6:	0002      	movs	r2, r0
 8007cd8:	4b43      	ldr	r3, [pc, #268]	; (8007de8 <_dtoa_r+0x39c>)
 8007cda:	0049      	lsls	r1, r1, #1
 8007cdc:	e6cb      	b.n	8007a76 <_dtoa_r+0x2a>
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e7de      	b.n	8007ca0 <_dtoa_r+0x254>
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	940f      	str	r4, [sp, #60]	; 0x3c
 8007ce6:	9322      	str	r3, [sp, #136]	; 0x88
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	930c      	str	r3, [sp, #48]	; 0x30
 8007cec:	9307      	str	r3, [sp, #28]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	3313      	adds	r3, #19
 8007cf2:	e7d0      	b.n	8007c96 <_dtoa_r+0x24a>
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cf8:	3b02      	subs	r3, #2
 8007cfa:	e7f6      	b.n	8007cea <_dtoa_r+0x29e>
 8007cfc:	3101      	adds	r1, #1
 8007cfe:	6041      	str	r1, [r0, #4]
 8007d00:	0052      	lsls	r2, r2, #1
 8007d02:	e7dc      	b.n	8007cbe <_dtoa_r+0x272>
 8007d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d06:	9a06      	ldr	r2, [sp, #24]
 8007d08:	601a      	str	r2, [r3, #0]
 8007d0a:	9b07      	ldr	r3, [sp, #28]
 8007d0c:	2b0e      	cmp	r3, #14
 8007d0e:	d900      	bls.n	8007d12 <_dtoa_r+0x2c6>
 8007d10:	e0eb      	b.n	8007eea <_dtoa_r+0x49e>
 8007d12:	2c00      	cmp	r4, #0
 8007d14:	d100      	bne.n	8007d18 <_dtoa_r+0x2cc>
 8007d16:	e0e8      	b.n	8007eea <_dtoa_r+0x49e>
 8007d18:	9b02      	ldr	r3, [sp, #8]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	dd68      	ble.n	8007df0 <_dtoa_r+0x3a4>
 8007d1e:	001a      	movs	r2, r3
 8007d20:	210f      	movs	r1, #15
 8007d22:	4b2d      	ldr	r3, [pc, #180]	; (8007dd8 <_dtoa_r+0x38c>)
 8007d24:	400a      	ands	r2, r1
 8007d26:	00d2      	lsls	r2, r2, #3
 8007d28:	189b      	adds	r3, r3, r2
 8007d2a:	681d      	ldr	r5, [r3, #0]
 8007d2c:	685e      	ldr	r6, [r3, #4]
 8007d2e:	9b02      	ldr	r3, [sp, #8]
 8007d30:	111c      	asrs	r4, r3, #4
 8007d32:	2302      	movs	r3, #2
 8007d34:	9310      	str	r3, [sp, #64]	; 0x40
 8007d36:	9b02      	ldr	r3, [sp, #8]
 8007d38:	05db      	lsls	r3, r3, #23
 8007d3a:	d50b      	bpl.n	8007d54 <_dtoa_r+0x308>
 8007d3c:	4b2b      	ldr	r3, [pc, #172]	; (8007dec <_dtoa_r+0x3a0>)
 8007d3e:	400c      	ands	r4, r1
 8007d40:	6a1a      	ldr	r2, [r3, #32]
 8007d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d44:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007d46:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007d48:	f7f9 fa12 	bl	8001170 <__aeabi_ddiv>
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	9008      	str	r0, [sp, #32]
 8007d50:	9109      	str	r1, [sp, #36]	; 0x24
 8007d52:	9310      	str	r3, [sp, #64]	; 0x40
 8007d54:	4b25      	ldr	r3, [pc, #148]	; (8007dec <_dtoa_r+0x3a0>)
 8007d56:	9314      	str	r3, [sp, #80]	; 0x50
 8007d58:	2c00      	cmp	r4, #0
 8007d5a:	d108      	bne.n	8007d6e <_dtoa_r+0x322>
 8007d5c:	9808      	ldr	r0, [sp, #32]
 8007d5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d60:	002a      	movs	r2, r5
 8007d62:	0033      	movs	r3, r6
 8007d64:	f7f9 fa04 	bl	8001170 <__aeabi_ddiv>
 8007d68:	9008      	str	r0, [sp, #32]
 8007d6a:	9109      	str	r1, [sp, #36]	; 0x24
 8007d6c:	e05c      	b.n	8007e28 <_dtoa_r+0x3dc>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	421c      	tst	r4, r3
 8007d72:	d00b      	beq.n	8007d8c <_dtoa_r+0x340>
 8007d74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d76:	0028      	movs	r0, r5
 8007d78:	3301      	adds	r3, #1
 8007d7a:	9310      	str	r3, [sp, #64]	; 0x40
 8007d7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d7e:	0031      	movs	r1, r6
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	f7f9 fdf6 	bl	8001974 <__aeabi_dmul>
 8007d88:	0005      	movs	r5, r0
 8007d8a:	000e      	movs	r6, r1
 8007d8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d8e:	1064      	asrs	r4, r4, #1
 8007d90:	3308      	adds	r3, #8
 8007d92:	e7e0      	b.n	8007d56 <_dtoa_r+0x30a>
 8007d94:	0800a181 	.word	0x0800a181
 8007d98:	0800a198 	.word	0x0800a198
 8007d9c:	7ff00000 	.word	0x7ff00000
 8007da0:	0000270f 	.word	0x0000270f
 8007da4:	0800a17d 	.word	0x0800a17d
 8007da8:	0800a180 	.word	0x0800a180
 8007dac:	0800a150 	.word	0x0800a150
 8007db0:	0800a151 	.word	0x0800a151
 8007db4:	3ff00000 	.word	0x3ff00000
 8007db8:	fffffc01 	.word	0xfffffc01
 8007dbc:	3ff80000 	.word	0x3ff80000
 8007dc0:	636f4361 	.word	0x636f4361
 8007dc4:	3fd287a7 	.word	0x3fd287a7
 8007dc8:	8b60c8b3 	.word	0x8b60c8b3
 8007dcc:	3fc68a28 	.word	0x3fc68a28
 8007dd0:	509f79fb 	.word	0x509f79fb
 8007dd4:	3fd34413 	.word	0x3fd34413
 8007dd8:	0800a288 	.word	0x0800a288
 8007ddc:	00000432 	.word	0x00000432
 8007de0:	00000412 	.word	0x00000412
 8007de4:	fe100000 	.word	0xfe100000
 8007de8:	0800a1f3 	.word	0x0800a1f3
 8007dec:	0800a260 	.word	0x0800a260
 8007df0:	2302      	movs	r3, #2
 8007df2:	9310      	str	r3, [sp, #64]	; 0x40
 8007df4:	9b02      	ldr	r3, [sp, #8]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d016      	beq.n	8007e28 <_dtoa_r+0x3dc>
 8007dfa:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007dfc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007dfe:	425c      	negs	r4, r3
 8007e00:	230f      	movs	r3, #15
 8007e02:	4ab6      	ldr	r2, [pc, #728]	; (80080dc <_dtoa_r+0x690>)
 8007e04:	4023      	ands	r3, r4
 8007e06:	00db      	lsls	r3, r3, #3
 8007e08:	18d3      	adds	r3, r2, r3
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	f7f9 fdb1 	bl	8001974 <__aeabi_dmul>
 8007e12:	2601      	movs	r6, #1
 8007e14:	2300      	movs	r3, #0
 8007e16:	9008      	str	r0, [sp, #32]
 8007e18:	9109      	str	r1, [sp, #36]	; 0x24
 8007e1a:	4db1      	ldr	r5, [pc, #708]	; (80080e0 <_dtoa_r+0x694>)
 8007e1c:	1124      	asrs	r4, r4, #4
 8007e1e:	2c00      	cmp	r4, #0
 8007e20:	d000      	beq.n	8007e24 <_dtoa_r+0x3d8>
 8007e22:	e094      	b.n	8007f4e <_dtoa_r+0x502>
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d19f      	bne.n	8007d68 <_dtoa_r+0x31c>
 8007e28:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d100      	bne.n	8007e30 <_dtoa_r+0x3e4>
 8007e2e:	e09b      	b.n	8007f68 <_dtoa_r+0x51c>
 8007e30:	9c08      	ldr	r4, [sp, #32]
 8007e32:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007e34:	2200      	movs	r2, #0
 8007e36:	0020      	movs	r0, r4
 8007e38:	0029      	movs	r1, r5
 8007e3a:	4baa      	ldr	r3, [pc, #680]	; (80080e4 <_dtoa_r+0x698>)
 8007e3c:	f7f8 fb16 	bl	800046c <__aeabi_dcmplt>
 8007e40:	2800      	cmp	r0, #0
 8007e42:	d100      	bne.n	8007e46 <_dtoa_r+0x3fa>
 8007e44:	e090      	b.n	8007f68 <_dtoa_r+0x51c>
 8007e46:	9b07      	ldr	r3, [sp, #28]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d100      	bne.n	8007e4e <_dtoa_r+0x402>
 8007e4c:	e08c      	b.n	8007f68 <_dtoa_r+0x51c>
 8007e4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	dd46      	ble.n	8007ee2 <_dtoa_r+0x496>
 8007e54:	9b02      	ldr	r3, [sp, #8]
 8007e56:	2200      	movs	r2, #0
 8007e58:	0020      	movs	r0, r4
 8007e5a:	0029      	movs	r1, r5
 8007e5c:	1e5e      	subs	r6, r3, #1
 8007e5e:	4ba2      	ldr	r3, [pc, #648]	; (80080e8 <_dtoa_r+0x69c>)
 8007e60:	f7f9 fd88 	bl	8001974 <__aeabi_dmul>
 8007e64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e66:	9008      	str	r0, [sp, #32]
 8007e68:	9109      	str	r1, [sp, #36]	; 0x24
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	9310      	str	r3, [sp, #64]	; 0x40
 8007e6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e70:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007e72:	9c08      	ldr	r4, [sp, #32]
 8007e74:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007e76:	9314      	str	r3, [sp, #80]	; 0x50
 8007e78:	f7fa fbce 	bl	8002618 <__aeabi_i2d>
 8007e7c:	0022      	movs	r2, r4
 8007e7e:	002b      	movs	r3, r5
 8007e80:	f7f9 fd78 	bl	8001974 <__aeabi_dmul>
 8007e84:	2200      	movs	r2, #0
 8007e86:	4b99      	ldr	r3, [pc, #612]	; (80080ec <_dtoa_r+0x6a0>)
 8007e88:	f7f8 fe36 	bl	8000af8 <__aeabi_dadd>
 8007e8c:	9010      	str	r0, [sp, #64]	; 0x40
 8007e8e:	9111      	str	r1, [sp, #68]	; 0x44
 8007e90:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007e92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e94:	9208      	str	r2, [sp, #32]
 8007e96:	9309      	str	r3, [sp, #36]	; 0x24
 8007e98:	4a95      	ldr	r2, [pc, #596]	; (80080f0 <_dtoa_r+0x6a4>)
 8007e9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e9c:	4694      	mov	ip, r2
 8007e9e:	4463      	add	r3, ip
 8007ea0:	9317      	str	r3, [sp, #92]	; 0x5c
 8007ea2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ea4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d161      	bne.n	8007f6e <_dtoa_r+0x522>
 8007eaa:	2200      	movs	r2, #0
 8007eac:	0020      	movs	r0, r4
 8007eae:	0029      	movs	r1, r5
 8007eb0:	4b90      	ldr	r3, [pc, #576]	; (80080f4 <_dtoa_r+0x6a8>)
 8007eb2:	f7f9 ffcb 	bl	8001e4c <__aeabi_dsub>
 8007eb6:	9a08      	ldr	r2, [sp, #32]
 8007eb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007eba:	0004      	movs	r4, r0
 8007ebc:	000d      	movs	r5, r1
 8007ebe:	f7f8 fae9 	bl	8000494 <__aeabi_dcmpgt>
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	d000      	beq.n	8007ec8 <_dtoa_r+0x47c>
 8007ec6:	e2af      	b.n	8008428 <_dtoa_r+0x9dc>
 8007ec8:	488b      	ldr	r0, [pc, #556]	; (80080f8 <_dtoa_r+0x6ac>)
 8007eca:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007ecc:	4684      	mov	ip, r0
 8007ece:	4461      	add	r1, ip
 8007ed0:	000b      	movs	r3, r1
 8007ed2:	0020      	movs	r0, r4
 8007ed4:	0029      	movs	r1, r5
 8007ed6:	9a08      	ldr	r2, [sp, #32]
 8007ed8:	f7f8 fac8 	bl	800046c <__aeabi_dcmplt>
 8007edc:	2800      	cmp	r0, #0
 8007ede:	d000      	beq.n	8007ee2 <_dtoa_r+0x496>
 8007ee0:	e29f      	b.n	8008422 <_dtoa_r+0x9d6>
 8007ee2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ee4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007ee6:	9308      	str	r3, [sp, #32]
 8007ee8:	9409      	str	r4, [sp, #36]	; 0x24
 8007eea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	da00      	bge.n	8007ef2 <_dtoa_r+0x4a6>
 8007ef0:	e172      	b.n	80081d8 <_dtoa_r+0x78c>
 8007ef2:	9a02      	ldr	r2, [sp, #8]
 8007ef4:	2a0e      	cmp	r2, #14
 8007ef6:	dd00      	ble.n	8007efa <_dtoa_r+0x4ae>
 8007ef8:	e16e      	b.n	80081d8 <_dtoa_r+0x78c>
 8007efa:	4b78      	ldr	r3, [pc, #480]	; (80080dc <_dtoa_r+0x690>)
 8007efc:	00d2      	lsls	r2, r2, #3
 8007efe:	189b      	adds	r3, r3, r2
 8007f00:	685c      	ldr	r4, [r3, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	930a      	str	r3, [sp, #40]	; 0x28
 8007f06:	940b      	str	r4, [sp, #44]	; 0x2c
 8007f08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	db00      	blt.n	8007f10 <_dtoa_r+0x4c4>
 8007f0e:	e0f7      	b.n	8008100 <_dtoa_r+0x6b4>
 8007f10:	9b07      	ldr	r3, [sp, #28]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	dd00      	ble.n	8007f18 <_dtoa_r+0x4cc>
 8007f16:	e0f3      	b.n	8008100 <_dtoa_r+0x6b4>
 8007f18:	d000      	beq.n	8007f1c <_dtoa_r+0x4d0>
 8007f1a:	e282      	b.n	8008422 <_dtoa_r+0x9d6>
 8007f1c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007f1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f20:	2200      	movs	r2, #0
 8007f22:	4b74      	ldr	r3, [pc, #464]	; (80080f4 <_dtoa_r+0x6a8>)
 8007f24:	f7f9 fd26 	bl	8001974 <__aeabi_dmul>
 8007f28:	9a08      	ldr	r2, [sp, #32]
 8007f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f2c:	f7f8 fabc 	bl	80004a8 <__aeabi_dcmpge>
 8007f30:	9e07      	ldr	r6, [sp, #28]
 8007f32:	0035      	movs	r5, r6
 8007f34:	2800      	cmp	r0, #0
 8007f36:	d000      	beq.n	8007f3a <_dtoa_r+0x4ee>
 8007f38:	e259      	b.n	80083ee <_dtoa_r+0x9a2>
 8007f3a:	9b06      	ldr	r3, [sp, #24]
 8007f3c:	9a06      	ldr	r2, [sp, #24]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	9308      	str	r3, [sp, #32]
 8007f42:	2331      	movs	r3, #49	; 0x31
 8007f44:	7013      	strb	r3, [r2, #0]
 8007f46:	9b02      	ldr	r3, [sp, #8]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	9302      	str	r3, [sp, #8]
 8007f4c:	e254      	b.n	80083f8 <_dtoa_r+0x9ac>
 8007f4e:	4234      	tst	r4, r6
 8007f50:	d007      	beq.n	8007f62 <_dtoa_r+0x516>
 8007f52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f54:	3301      	adds	r3, #1
 8007f56:	9310      	str	r3, [sp, #64]	; 0x40
 8007f58:	682a      	ldr	r2, [r5, #0]
 8007f5a:	686b      	ldr	r3, [r5, #4]
 8007f5c:	f7f9 fd0a 	bl	8001974 <__aeabi_dmul>
 8007f60:	0033      	movs	r3, r6
 8007f62:	1064      	asrs	r4, r4, #1
 8007f64:	3508      	adds	r5, #8
 8007f66:	e75a      	b.n	8007e1e <_dtoa_r+0x3d2>
 8007f68:	9e02      	ldr	r6, [sp, #8]
 8007f6a:	9b07      	ldr	r3, [sp, #28]
 8007f6c:	e780      	b.n	8007e70 <_dtoa_r+0x424>
 8007f6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f70:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007f72:	1e5a      	subs	r2, r3, #1
 8007f74:	4b59      	ldr	r3, [pc, #356]	; (80080dc <_dtoa_r+0x690>)
 8007f76:	00d2      	lsls	r2, r2, #3
 8007f78:	189b      	adds	r3, r3, r2
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	2900      	cmp	r1, #0
 8007f80:	d051      	beq.n	8008026 <_dtoa_r+0x5da>
 8007f82:	2000      	movs	r0, #0
 8007f84:	495d      	ldr	r1, [pc, #372]	; (80080fc <_dtoa_r+0x6b0>)
 8007f86:	f7f9 f8f3 	bl	8001170 <__aeabi_ddiv>
 8007f8a:	9a08      	ldr	r2, [sp, #32]
 8007f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f8e:	f7f9 ff5d 	bl	8001e4c <__aeabi_dsub>
 8007f92:	9a06      	ldr	r2, [sp, #24]
 8007f94:	9b06      	ldr	r3, [sp, #24]
 8007f96:	4694      	mov	ip, r2
 8007f98:	9317      	str	r3, [sp, #92]	; 0x5c
 8007f9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f9c:	9010      	str	r0, [sp, #64]	; 0x40
 8007f9e:	9111      	str	r1, [sp, #68]	; 0x44
 8007fa0:	4463      	add	r3, ip
 8007fa2:	9319      	str	r3, [sp, #100]	; 0x64
 8007fa4:	0029      	movs	r1, r5
 8007fa6:	0020      	movs	r0, r4
 8007fa8:	f7fa fb00 	bl	80025ac <__aeabi_d2iz>
 8007fac:	9014      	str	r0, [sp, #80]	; 0x50
 8007fae:	f7fa fb33 	bl	8002618 <__aeabi_i2d>
 8007fb2:	0002      	movs	r2, r0
 8007fb4:	000b      	movs	r3, r1
 8007fb6:	0020      	movs	r0, r4
 8007fb8:	0029      	movs	r1, r5
 8007fba:	f7f9 ff47 	bl	8001e4c <__aeabi_dsub>
 8007fbe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007fc0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	9308      	str	r3, [sp, #32]
 8007fc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007fc8:	0004      	movs	r4, r0
 8007fca:	3330      	adds	r3, #48	; 0x30
 8007fcc:	7013      	strb	r3, [r2, #0]
 8007fce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007fd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fd2:	000d      	movs	r5, r1
 8007fd4:	f7f8 fa4a 	bl	800046c <__aeabi_dcmplt>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	d175      	bne.n	80080c8 <_dtoa_r+0x67c>
 8007fdc:	0022      	movs	r2, r4
 8007fde:	002b      	movs	r3, r5
 8007fe0:	2000      	movs	r0, #0
 8007fe2:	4940      	ldr	r1, [pc, #256]	; (80080e4 <_dtoa_r+0x698>)
 8007fe4:	f7f9 ff32 	bl	8001e4c <__aeabi_dsub>
 8007fe8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007fea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fec:	f7f8 fa3e 	bl	800046c <__aeabi_dcmplt>
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	d000      	beq.n	8007ff6 <_dtoa_r+0x5aa>
 8007ff4:	e0d2      	b.n	800819c <_dtoa_r+0x750>
 8007ff6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ff8:	9a08      	ldr	r2, [sp, #32]
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d100      	bne.n	8008000 <_dtoa_r+0x5b4>
 8007ffe:	e770      	b.n	8007ee2 <_dtoa_r+0x496>
 8008000:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008002:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008004:	2200      	movs	r2, #0
 8008006:	4b38      	ldr	r3, [pc, #224]	; (80080e8 <_dtoa_r+0x69c>)
 8008008:	f7f9 fcb4 	bl	8001974 <__aeabi_dmul>
 800800c:	4b36      	ldr	r3, [pc, #216]	; (80080e8 <_dtoa_r+0x69c>)
 800800e:	9010      	str	r0, [sp, #64]	; 0x40
 8008010:	9111      	str	r1, [sp, #68]	; 0x44
 8008012:	2200      	movs	r2, #0
 8008014:	0020      	movs	r0, r4
 8008016:	0029      	movs	r1, r5
 8008018:	f7f9 fcac 	bl	8001974 <__aeabi_dmul>
 800801c:	9b08      	ldr	r3, [sp, #32]
 800801e:	0004      	movs	r4, r0
 8008020:	000d      	movs	r5, r1
 8008022:	9317      	str	r3, [sp, #92]	; 0x5c
 8008024:	e7be      	b.n	8007fa4 <_dtoa_r+0x558>
 8008026:	9808      	ldr	r0, [sp, #32]
 8008028:	9909      	ldr	r1, [sp, #36]	; 0x24
 800802a:	f7f9 fca3 	bl	8001974 <__aeabi_dmul>
 800802e:	9a06      	ldr	r2, [sp, #24]
 8008030:	9b06      	ldr	r3, [sp, #24]
 8008032:	4694      	mov	ip, r2
 8008034:	9308      	str	r3, [sp, #32]
 8008036:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008038:	9010      	str	r0, [sp, #64]	; 0x40
 800803a:	9111      	str	r1, [sp, #68]	; 0x44
 800803c:	4463      	add	r3, ip
 800803e:	9319      	str	r3, [sp, #100]	; 0x64
 8008040:	0029      	movs	r1, r5
 8008042:	0020      	movs	r0, r4
 8008044:	f7fa fab2 	bl	80025ac <__aeabi_d2iz>
 8008048:	9017      	str	r0, [sp, #92]	; 0x5c
 800804a:	f7fa fae5 	bl	8002618 <__aeabi_i2d>
 800804e:	0002      	movs	r2, r0
 8008050:	000b      	movs	r3, r1
 8008052:	0020      	movs	r0, r4
 8008054:	0029      	movs	r1, r5
 8008056:	f7f9 fef9 	bl	8001e4c <__aeabi_dsub>
 800805a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800805c:	9a08      	ldr	r2, [sp, #32]
 800805e:	3330      	adds	r3, #48	; 0x30
 8008060:	7013      	strb	r3, [r2, #0]
 8008062:	0013      	movs	r3, r2
 8008064:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008066:	3301      	adds	r3, #1
 8008068:	0004      	movs	r4, r0
 800806a:	000d      	movs	r5, r1
 800806c:	9308      	str	r3, [sp, #32]
 800806e:	4293      	cmp	r3, r2
 8008070:	d12c      	bne.n	80080cc <_dtoa_r+0x680>
 8008072:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008074:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008076:	9a06      	ldr	r2, [sp, #24]
 8008078:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800807a:	4694      	mov	ip, r2
 800807c:	4463      	add	r3, ip
 800807e:	2200      	movs	r2, #0
 8008080:	9308      	str	r3, [sp, #32]
 8008082:	4b1e      	ldr	r3, [pc, #120]	; (80080fc <_dtoa_r+0x6b0>)
 8008084:	f7f8 fd38 	bl	8000af8 <__aeabi_dadd>
 8008088:	0002      	movs	r2, r0
 800808a:	000b      	movs	r3, r1
 800808c:	0020      	movs	r0, r4
 800808e:	0029      	movs	r1, r5
 8008090:	f7f8 fa00 	bl	8000494 <__aeabi_dcmpgt>
 8008094:	2800      	cmp	r0, #0
 8008096:	d000      	beq.n	800809a <_dtoa_r+0x64e>
 8008098:	e080      	b.n	800819c <_dtoa_r+0x750>
 800809a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800809c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800809e:	2000      	movs	r0, #0
 80080a0:	4916      	ldr	r1, [pc, #88]	; (80080fc <_dtoa_r+0x6b0>)
 80080a2:	f7f9 fed3 	bl	8001e4c <__aeabi_dsub>
 80080a6:	0002      	movs	r2, r0
 80080a8:	000b      	movs	r3, r1
 80080aa:	0020      	movs	r0, r4
 80080ac:	0029      	movs	r1, r5
 80080ae:	f7f8 f9dd 	bl	800046c <__aeabi_dcmplt>
 80080b2:	2800      	cmp	r0, #0
 80080b4:	d100      	bne.n	80080b8 <_dtoa_r+0x66c>
 80080b6:	e714      	b.n	8007ee2 <_dtoa_r+0x496>
 80080b8:	9b08      	ldr	r3, [sp, #32]
 80080ba:	001a      	movs	r2, r3
 80080bc:	3a01      	subs	r2, #1
 80080be:	9208      	str	r2, [sp, #32]
 80080c0:	7812      	ldrb	r2, [r2, #0]
 80080c2:	2a30      	cmp	r2, #48	; 0x30
 80080c4:	d0f8      	beq.n	80080b8 <_dtoa_r+0x66c>
 80080c6:	9308      	str	r3, [sp, #32]
 80080c8:	9602      	str	r6, [sp, #8]
 80080ca:	e055      	b.n	8008178 <_dtoa_r+0x72c>
 80080cc:	2200      	movs	r2, #0
 80080ce:	4b06      	ldr	r3, [pc, #24]	; (80080e8 <_dtoa_r+0x69c>)
 80080d0:	f7f9 fc50 	bl	8001974 <__aeabi_dmul>
 80080d4:	0004      	movs	r4, r0
 80080d6:	000d      	movs	r5, r1
 80080d8:	e7b2      	b.n	8008040 <_dtoa_r+0x5f4>
 80080da:	46c0      	nop			; (mov r8, r8)
 80080dc:	0800a288 	.word	0x0800a288
 80080e0:	0800a260 	.word	0x0800a260
 80080e4:	3ff00000 	.word	0x3ff00000
 80080e8:	40240000 	.word	0x40240000
 80080ec:	401c0000 	.word	0x401c0000
 80080f0:	fcc00000 	.word	0xfcc00000
 80080f4:	40140000 	.word	0x40140000
 80080f8:	7cc00000 	.word	0x7cc00000
 80080fc:	3fe00000 	.word	0x3fe00000
 8008100:	9b07      	ldr	r3, [sp, #28]
 8008102:	9e06      	ldr	r6, [sp, #24]
 8008104:	3b01      	subs	r3, #1
 8008106:	199b      	adds	r3, r3, r6
 8008108:	930c      	str	r3, [sp, #48]	; 0x30
 800810a:	9c08      	ldr	r4, [sp, #32]
 800810c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800810e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008110:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008112:	0020      	movs	r0, r4
 8008114:	0029      	movs	r1, r5
 8008116:	f7f9 f82b 	bl	8001170 <__aeabi_ddiv>
 800811a:	f7fa fa47 	bl	80025ac <__aeabi_d2iz>
 800811e:	9007      	str	r0, [sp, #28]
 8008120:	f7fa fa7a 	bl	8002618 <__aeabi_i2d>
 8008124:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008128:	f7f9 fc24 	bl	8001974 <__aeabi_dmul>
 800812c:	0002      	movs	r2, r0
 800812e:	000b      	movs	r3, r1
 8008130:	0020      	movs	r0, r4
 8008132:	0029      	movs	r1, r5
 8008134:	f7f9 fe8a 	bl	8001e4c <__aeabi_dsub>
 8008138:	0033      	movs	r3, r6
 800813a:	9a07      	ldr	r2, [sp, #28]
 800813c:	3601      	adds	r6, #1
 800813e:	3230      	adds	r2, #48	; 0x30
 8008140:	701a      	strb	r2, [r3, #0]
 8008142:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008144:	9608      	str	r6, [sp, #32]
 8008146:	429a      	cmp	r2, r3
 8008148:	d139      	bne.n	80081be <_dtoa_r+0x772>
 800814a:	0002      	movs	r2, r0
 800814c:	000b      	movs	r3, r1
 800814e:	f7f8 fcd3 	bl	8000af8 <__aeabi_dadd>
 8008152:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008154:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008156:	0004      	movs	r4, r0
 8008158:	000d      	movs	r5, r1
 800815a:	f7f8 f99b 	bl	8000494 <__aeabi_dcmpgt>
 800815e:	2800      	cmp	r0, #0
 8008160:	d11b      	bne.n	800819a <_dtoa_r+0x74e>
 8008162:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008166:	0020      	movs	r0, r4
 8008168:	0029      	movs	r1, r5
 800816a:	f7f8 f979 	bl	8000460 <__aeabi_dcmpeq>
 800816e:	2800      	cmp	r0, #0
 8008170:	d002      	beq.n	8008178 <_dtoa_r+0x72c>
 8008172:	9b07      	ldr	r3, [sp, #28]
 8008174:	07db      	lsls	r3, r3, #31
 8008176:	d410      	bmi.n	800819a <_dtoa_r+0x74e>
 8008178:	0038      	movs	r0, r7
 800817a:	9905      	ldr	r1, [sp, #20]
 800817c:	f000 fae6 	bl	800874c <_Bfree>
 8008180:	2300      	movs	r3, #0
 8008182:	9a08      	ldr	r2, [sp, #32]
 8008184:	9802      	ldr	r0, [sp, #8]
 8008186:	7013      	strb	r3, [r2, #0]
 8008188:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800818a:	3001      	adds	r0, #1
 800818c:	6018      	str	r0, [r3, #0]
 800818e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008190:	2b00      	cmp	r3, #0
 8008192:	d100      	bne.n	8008196 <_dtoa_r+0x74a>
 8008194:	e4a6      	b.n	8007ae4 <_dtoa_r+0x98>
 8008196:	601a      	str	r2, [r3, #0]
 8008198:	e4a4      	b.n	8007ae4 <_dtoa_r+0x98>
 800819a:	9e02      	ldr	r6, [sp, #8]
 800819c:	9b08      	ldr	r3, [sp, #32]
 800819e:	9308      	str	r3, [sp, #32]
 80081a0:	3b01      	subs	r3, #1
 80081a2:	781a      	ldrb	r2, [r3, #0]
 80081a4:	2a39      	cmp	r2, #57	; 0x39
 80081a6:	d106      	bne.n	80081b6 <_dtoa_r+0x76a>
 80081a8:	9a06      	ldr	r2, [sp, #24]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d1f7      	bne.n	800819e <_dtoa_r+0x752>
 80081ae:	2230      	movs	r2, #48	; 0x30
 80081b0:	9906      	ldr	r1, [sp, #24]
 80081b2:	3601      	adds	r6, #1
 80081b4:	700a      	strb	r2, [r1, #0]
 80081b6:	781a      	ldrb	r2, [r3, #0]
 80081b8:	3201      	adds	r2, #1
 80081ba:	701a      	strb	r2, [r3, #0]
 80081bc:	e784      	b.n	80080c8 <_dtoa_r+0x67c>
 80081be:	2200      	movs	r2, #0
 80081c0:	4baa      	ldr	r3, [pc, #680]	; (800846c <_dtoa_r+0xa20>)
 80081c2:	f7f9 fbd7 	bl	8001974 <__aeabi_dmul>
 80081c6:	2200      	movs	r2, #0
 80081c8:	2300      	movs	r3, #0
 80081ca:	0004      	movs	r4, r0
 80081cc:	000d      	movs	r5, r1
 80081ce:	f7f8 f947 	bl	8000460 <__aeabi_dcmpeq>
 80081d2:	2800      	cmp	r0, #0
 80081d4:	d09b      	beq.n	800810e <_dtoa_r+0x6c2>
 80081d6:	e7cf      	b.n	8008178 <_dtoa_r+0x72c>
 80081d8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80081da:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80081dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80081de:	2d00      	cmp	r5, #0
 80081e0:	d012      	beq.n	8008208 <_dtoa_r+0x7bc>
 80081e2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80081e4:	2a01      	cmp	r2, #1
 80081e6:	dc66      	bgt.n	80082b6 <_dtoa_r+0x86a>
 80081e8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80081ea:	2a00      	cmp	r2, #0
 80081ec:	d05d      	beq.n	80082aa <_dtoa_r+0x85e>
 80081ee:	4aa0      	ldr	r2, [pc, #640]	; (8008470 <_dtoa_r+0xa24>)
 80081f0:	189b      	adds	r3, r3, r2
 80081f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081f4:	2101      	movs	r1, #1
 80081f6:	18d2      	adds	r2, r2, r3
 80081f8:	920a      	str	r2, [sp, #40]	; 0x28
 80081fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081fc:	0038      	movs	r0, r7
 80081fe:	18d3      	adds	r3, r2, r3
 8008200:	930d      	str	r3, [sp, #52]	; 0x34
 8008202:	f000 fb53 	bl	80088ac <__i2b>
 8008206:	0005      	movs	r5, r0
 8008208:	2c00      	cmp	r4, #0
 800820a:	dd0e      	ble.n	800822a <_dtoa_r+0x7de>
 800820c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800820e:	2b00      	cmp	r3, #0
 8008210:	dd0b      	ble.n	800822a <_dtoa_r+0x7de>
 8008212:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008214:	0023      	movs	r3, r4
 8008216:	4294      	cmp	r4, r2
 8008218:	dd00      	ble.n	800821c <_dtoa_r+0x7d0>
 800821a:	0013      	movs	r3, r2
 800821c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800821e:	1ae4      	subs	r4, r4, r3
 8008220:	1ad2      	subs	r2, r2, r3
 8008222:	920a      	str	r2, [sp, #40]	; 0x28
 8008224:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	930d      	str	r3, [sp, #52]	; 0x34
 800822a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800822c:	2b00      	cmp	r3, #0
 800822e:	d01f      	beq.n	8008270 <_dtoa_r+0x824>
 8008230:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008232:	2b00      	cmp	r3, #0
 8008234:	d054      	beq.n	80082e0 <_dtoa_r+0x894>
 8008236:	2e00      	cmp	r6, #0
 8008238:	dd11      	ble.n	800825e <_dtoa_r+0x812>
 800823a:	0029      	movs	r1, r5
 800823c:	0032      	movs	r2, r6
 800823e:	0038      	movs	r0, r7
 8008240:	f000 fbfa 	bl	8008a38 <__pow5mult>
 8008244:	9a05      	ldr	r2, [sp, #20]
 8008246:	0001      	movs	r1, r0
 8008248:	0005      	movs	r5, r0
 800824a:	0038      	movs	r0, r7
 800824c:	f000 fb44 	bl	80088d8 <__multiply>
 8008250:	9905      	ldr	r1, [sp, #20]
 8008252:	9014      	str	r0, [sp, #80]	; 0x50
 8008254:	0038      	movs	r0, r7
 8008256:	f000 fa79 	bl	800874c <_Bfree>
 800825a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800825c:	9305      	str	r3, [sp, #20]
 800825e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008260:	1b9a      	subs	r2, r3, r6
 8008262:	42b3      	cmp	r3, r6
 8008264:	d004      	beq.n	8008270 <_dtoa_r+0x824>
 8008266:	0038      	movs	r0, r7
 8008268:	9905      	ldr	r1, [sp, #20]
 800826a:	f000 fbe5 	bl	8008a38 <__pow5mult>
 800826e:	9005      	str	r0, [sp, #20]
 8008270:	2101      	movs	r1, #1
 8008272:	0038      	movs	r0, r7
 8008274:	f000 fb1a 	bl	80088ac <__i2b>
 8008278:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800827a:	0006      	movs	r6, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	dd31      	ble.n	80082e4 <_dtoa_r+0x898>
 8008280:	001a      	movs	r2, r3
 8008282:	0001      	movs	r1, r0
 8008284:	0038      	movs	r0, r7
 8008286:	f000 fbd7 	bl	8008a38 <__pow5mult>
 800828a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800828c:	0006      	movs	r6, r0
 800828e:	2b01      	cmp	r3, #1
 8008290:	dd2d      	ble.n	80082ee <_dtoa_r+0x8a2>
 8008292:	2300      	movs	r3, #0
 8008294:	930e      	str	r3, [sp, #56]	; 0x38
 8008296:	6933      	ldr	r3, [r6, #16]
 8008298:	3303      	adds	r3, #3
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	18f3      	adds	r3, r6, r3
 800829e:	6858      	ldr	r0, [r3, #4]
 80082a0:	f000 fabc 	bl	800881c <__hi0bits>
 80082a4:	2320      	movs	r3, #32
 80082a6:	1a18      	subs	r0, r3, r0
 80082a8:	e039      	b.n	800831e <_dtoa_r+0x8d2>
 80082aa:	2336      	movs	r3, #54	; 0x36
 80082ac:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80082ae:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80082b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80082b2:	1a9b      	subs	r3, r3, r2
 80082b4:	e79d      	b.n	80081f2 <_dtoa_r+0x7a6>
 80082b6:	9b07      	ldr	r3, [sp, #28]
 80082b8:	1e5e      	subs	r6, r3, #1
 80082ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082bc:	42b3      	cmp	r3, r6
 80082be:	db07      	blt.n	80082d0 <_dtoa_r+0x884>
 80082c0:	1b9e      	subs	r6, r3, r6
 80082c2:	9b07      	ldr	r3, [sp, #28]
 80082c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	da93      	bge.n	80081f2 <_dtoa_r+0x7a6>
 80082ca:	1ae4      	subs	r4, r4, r3
 80082cc:	2300      	movs	r3, #0
 80082ce:	e790      	b.n	80081f2 <_dtoa_r+0x7a6>
 80082d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80082d4:	1af3      	subs	r3, r6, r3
 80082d6:	18d3      	adds	r3, r2, r3
 80082d8:	960e      	str	r6, [sp, #56]	; 0x38
 80082da:	9315      	str	r3, [sp, #84]	; 0x54
 80082dc:	2600      	movs	r6, #0
 80082de:	e7f0      	b.n	80082c2 <_dtoa_r+0x876>
 80082e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082e2:	e7c0      	b.n	8008266 <_dtoa_r+0x81a>
 80082e4:	2300      	movs	r3, #0
 80082e6:	930e      	str	r3, [sp, #56]	; 0x38
 80082e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	dc13      	bgt.n	8008316 <_dtoa_r+0x8ca>
 80082ee:	2300      	movs	r3, #0
 80082f0:	930e      	str	r3, [sp, #56]	; 0x38
 80082f2:	9b08      	ldr	r3, [sp, #32]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d10e      	bne.n	8008316 <_dtoa_r+0x8ca>
 80082f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082fa:	031b      	lsls	r3, r3, #12
 80082fc:	d10b      	bne.n	8008316 <_dtoa_r+0x8ca>
 80082fe:	4b5d      	ldr	r3, [pc, #372]	; (8008474 <_dtoa_r+0xa28>)
 8008300:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008302:	4213      	tst	r3, r2
 8008304:	d007      	beq.n	8008316 <_dtoa_r+0x8ca>
 8008306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008308:	3301      	adds	r3, #1
 800830a:	930a      	str	r3, [sp, #40]	; 0x28
 800830c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800830e:	3301      	adds	r3, #1
 8008310:	930d      	str	r3, [sp, #52]	; 0x34
 8008312:	2301      	movs	r3, #1
 8008314:	930e      	str	r3, [sp, #56]	; 0x38
 8008316:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008318:	2001      	movs	r0, #1
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1bb      	bne.n	8008296 <_dtoa_r+0x84a>
 800831e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008320:	221f      	movs	r2, #31
 8008322:	1818      	adds	r0, r3, r0
 8008324:	0003      	movs	r3, r0
 8008326:	4013      	ands	r3, r2
 8008328:	4210      	tst	r0, r2
 800832a:	d046      	beq.n	80083ba <_dtoa_r+0x96e>
 800832c:	3201      	adds	r2, #1
 800832e:	1ad2      	subs	r2, r2, r3
 8008330:	2a04      	cmp	r2, #4
 8008332:	dd3f      	ble.n	80083b4 <_dtoa_r+0x968>
 8008334:	221c      	movs	r2, #28
 8008336:	1ad3      	subs	r3, r2, r3
 8008338:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800833a:	18e4      	adds	r4, r4, r3
 800833c:	18d2      	adds	r2, r2, r3
 800833e:	920a      	str	r2, [sp, #40]	; 0x28
 8008340:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008342:	18d3      	adds	r3, r2, r3
 8008344:	930d      	str	r3, [sp, #52]	; 0x34
 8008346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008348:	2b00      	cmp	r3, #0
 800834a:	dd05      	ble.n	8008358 <_dtoa_r+0x90c>
 800834c:	001a      	movs	r2, r3
 800834e:	0038      	movs	r0, r7
 8008350:	9905      	ldr	r1, [sp, #20]
 8008352:	f000 fbcd 	bl	8008af0 <__lshift>
 8008356:	9005      	str	r0, [sp, #20]
 8008358:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800835a:	2b00      	cmp	r3, #0
 800835c:	dd05      	ble.n	800836a <_dtoa_r+0x91e>
 800835e:	0031      	movs	r1, r6
 8008360:	001a      	movs	r2, r3
 8008362:	0038      	movs	r0, r7
 8008364:	f000 fbc4 	bl	8008af0 <__lshift>
 8008368:	0006      	movs	r6, r0
 800836a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800836c:	2b00      	cmp	r3, #0
 800836e:	d026      	beq.n	80083be <_dtoa_r+0x972>
 8008370:	0031      	movs	r1, r6
 8008372:	9805      	ldr	r0, [sp, #20]
 8008374:	f000 fc2a 	bl	8008bcc <__mcmp>
 8008378:	2800      	cmp	r0, #0
 800837a:	da20      	bge.n	80083be <_dtoa_r+0x972>
 800837c:	9b02      	ldr	r3, [sp, #8]
 800837e:	220a      	movs	r2, #10
 8008380:	3b01      	subs	r3, #1
 8008382:	9302      	str	r3, [sp, #8]
 8008384:	0038      	movs	r0, r7
 8008386:	2300      	movs	r3, #0
 8008388:	9905      	ldr	r1, [sp, #20]
 800838a:	f000 fa03 	bl	8008794 <__multadd>
 800838e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008390:	9005      	str	r0, [sp, #20]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d100      	bne.n	8008398 <_dtoa_r+0x94c>
 8008396:	e166      	b.n	8008666 <_dtoa_r+0xc1a>
 8008398:	2300      	movs	r3, #0
 800839a:	0029      	movs	r1, r5
 800839c:	220a      	movs	r2, #10
 800839e:	0038      	movs	r0, r7
 80083a0:	f000 f9f8 	bl	8008794 <__multadd>
 80083a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083a6:	0005      	movs	r5, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	dc47      	bgt.n	800843c <_dtoa_r+0x9f0>
 80083ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	dc0d      	bgt.n	80083ce <_dtoa_r+0x982>
 80083b2:	e043      	b.n	800843c <_dtoa_r+0x9f0>
 80083b4:	2a04      	cmp	r2, #4
 80083b6:	d0c6      	beq.n	8008346 <_dtoa_r+0x8fa>
 80083b8:	0013      	movs	r3, r2
 80083ba:	331c      	adds	r3, #28
 80083bc:	e7bc      	b.n	8008338 <_dtoa_r+0x8ec>
 80083be:	9b07      	ldr	r3, [sp, #28]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	dc35      	bgt.n	8008430 <_dtoa_r+0x9e4>
 80083c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	dd32      	ble.n	8008430 <_dtoa_r+0x9e4>
 80083ca:	9b07      	ldr	r3, [sp, #28]
 80083cc:	930c      	str	r3, [sp, #48]	; 0x30
 80083ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d10c      	bne.n	80083ee <_dtoa_r+0x9a2>
 80083d4:	0031      	movs	r1, r6
 80083d6:	2205      	movs	r2, #5
 80083d8:	0038      	movs	r0, r7
 80083da:	f000 f9db 	bl	8008794 <__multadd>
 80083de:	0006      	movs	r6, r0
 80083e0:	0001      	movs	r1, r0
 80083e2:	9805      	ldr	r0, [sp, #20]
 80083e4:	f000 fbf2 	bl	8008bcc <__mcmp>
 80083e8:	2800      	cmp	r0, #0
 80083ea:	dd00      	ble.n	80083ee <_dtoa_r+0x9a2>
 80083ec:	e5a5      	b.n	8007f3a <_dtoa_r+0x4ee>
 80083ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80083f0:	43db      	mvns	r3, r3
 80083f2:	9302      	str	r3, [sp, #8]
 80083f4:	9b06      	ldr	r3, [sp, #24]
 80083f6:	9308      	str	r3, [sp, #32]
 80083f8:	2400      	movs	r4, #0
 80083fa:	0031      	movs	r1, r6
 80083fc:	0038      	movs	r0, r7
 80083fe:	f000 f9a5 	bl	800874c <_Bfree>
 8008402:	2d00      	cmp	r5, #0
 8008404:	d100      	bne.n	8008408 <_dtoa_r+0x9bc>
 8008406:	e6b7      	b.n	8008178 <_dtoa_r+0x72c>
 8008408:	2c00      	cmp	r4, #0
 800840a:	d005      	beq.n	8008418 <_dtoa_r+0x9cc>
 800840c:	42ac      	cmp	r4, r5
 800840e:	d003      	beq.n	8008418 <_dtoa_r+0x9cc>
 8008410:	0021      	movs	r1, r4
 8008412:	0038      	movs	r0, r7
 8008414:	f000 f99a 	bl	800874c <_Bfree>
 8008418:	0029      	movs	r1, r5
 800841a:	0038      	movs	r0, r7
 800841c:	f000 f996 	bl	800874c <_Bfree>
 8008420:	e6aa      	b.n	8008178 <_dtoa_r+0x72c>
 8008422:	2600      	movs	r6, #0
 8008424:	0035      	movs	r5, r6
 8008426:	e7e2      	b.n	80083ee <_dtoa_r+0x9a2>
 8008428:	9602      	str	r6, [sp, #8]
 800842a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800842c:	0035      	movs	r5, r6
 800842e:	e584      	b.n	8007f3a <_dtoa_r+0x4ee>
 8008430:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008432:	2b00      	cmp	r3, #0
 8008434:	d100      	bne.n	8008438 <_dtoa_r+0x9ec>
 8008436:	e0ce      	b.n	80085d6 <_dtoa_r+0xb8a>
 8008438:	9b07      	ldr	r3, [sp, #28]
 800843a:	930c      	str	r3, [sp, #48]	; 0x30
 800843c:	2c00      	cmp	r4, #0
 800843e:	dd05      	ble.n	800844c <_dtoa_r+0xa00>
 8008440:	0029      	movs	r1, r5
 8008442:	0022      	movs	r2, r4
 8008444:	0038      	movs	r0, r7
 8008446:	f000 fb53 	bl	8008af0 <__lshift>
 800844a:	0005      	movs	r5, r0
 800844c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800844e:	0028      	movs	r0, r5
 8008450:	2b00      	cmp	r3, #0
 8008452:	d022      	beq.n	800849a <_dtoa_r+0xa4e>
 8008454:	0038      	movs	r0, r7
 8008456:	6869      	ldr	r1, [r5, #4]
 8008458:	f000 f934 	bl	80086c4 <_Balloc>
 800845c:	1e04      	subs	r4, r0, #0
 800845e:	d10f      	bne.n	8008480 <_dtoa_r+0xa34>
 8008460:	0002      	movs	r2, r0
 8008462:	4b05      	ldr	r3, [pc, #20]	; (8008478 <_dtoa_r+0xa2c>)
 8008464:	4905      	ldr	r1, [pc, #20]	; (800847c <_dtoa_r+0xa30>)
 8008466:	f7ff fb06 	bl	8007a76 <_dtoa_r+0x2a>
 800846a:	46c0      	nop			; (mov r8, r8)
 800846c:	40240000 	.word	0x40240000
 8008470:	00000433 	.word	0x00000433
 8008474:	7ff00000 	.word	0x7ff00000
 8008478:	0800a1f3 	.word	0x0800a1f3
 800847c:	000002ea 	.word	0x000002ea
 8008480:	0029      	movs	r1, r5
 8008482:	692b      	ldr	r3, [r5, #16]
 8008484:	310c      	adds	r1, #12
 8008486:	1c9a      	adds	r2, r3, #2
 8008488:	0092      	lsls	r2, r2, #2
 800848a:	300c      	adds	r0, #12
 800848c:	f000 f911 	bl	80086b2 <memcpy>
 8008490:	2201      	movs	r2, #1
 8008492:	0021      	movs	r1, r4
 8008494:	0038      	movs	r0, r7
 8008496:	f000 fb2b 	bl	8008af0 <__lshift>
 800849a:	9b06      	ldr	r3, [sp, #24]
 800849c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800849e:	930a      	str	r3, [sp, #40]	; 0x28
 80084a0:	3b01      	subs	r3, #1
 80084a2:	189b      	adds	r3, r3, r2
 80084a4:	2201      	movs	r2, #1
 80084a6:	002c      	movs	r4, r5
 80084a8:	0005      	movs	r5, r0
 80084aa:	9314      	str	r3, [sp, #80]	; 0x50
 80084ac:	9b08      	ldr	r3, [sp, #32]
 80084ae:	4013      	ands	r3, r2
 80084b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80084b2:	0031      	movs	r1, r6
 80084b4:	9805      	ldr	r0, [sp, #20]
 80084b6:	f7ff fa3d 	bl	8007934 <quorem>
 80084ba:	0003      	movs	r3, r0
 80084bc:	0021      	movs	r1, r4
 80084be:	3330      	adds	r3, #48	; 0x30
 80084c0:	900d      	str	r0, [sp, #52]	; 0x34
 80084c2:	9805      	ldr	r0, [sp, #20]
 80084c4:	9307      	str	r3, [sp, #28]
 80084c6:	f000 fb81 	bl	8008bcc <__mcmp>
 80084ca:	002a      	movs	r2, r5
 80084cc:	900e      	str	r0, [sp, #56]	; 0x38
 80084ce:	0031      	movs	r1, r6
 80084d0:	0038      	movs	r0, r7
 80084d2:	f000 fb97 	bl	8008c04 <__mdiff>
 80084d6:	68c3      	ldr	r3, [r0, #12]
 80084d8:	9008      	str	r0, [sp, #32]
 80084da:	9310      	str	r3, [sp, #64]	; 0x40
 80084dc:	2301      	movs	r3, #1
 80084de:	930c      	str	r3, [sp, #48]	; 0x30
 80084e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d104      	bne.n	80084f0 <_dtoa_r+0xaa4>
 80084e6:	0001      	movs	r1, r0
 80084e8:	9805      	ldr	r0, [sp, #20]
 80084ea:	f000 fb6f 	bl	8008bcc <__mcmp>
 80084ee:	900c      	str	r0, [sp, #48]	; 0x30
 80084f0:	0038      	movs	r0, r7
 80084f2:	9908      	ldr	r1, [sp, #32]
 80084f4:	f000 f92a 	bl	800874c <_Bfree>
 80084f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084fc:	3301      	adds	r3, #1
 80084fe:	9308      	str	r3, [sp, #32]
 8008500:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008502:	4313      	orrs	r3, r2
 8008504:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008506:	4313      	orrs	r3, r2
 8008508:	d10c      	bne.n	8008524 <_dtoa_r+0xad8>
 800850a:	9b07      	ldr	r3, [sp, #28]
 800850c:	2b39      	cmp	r3, #57	; 0x39
 800850e:	d026      	beq.n	800855e <_dtoa_r+0xb12>
 8008510:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008512:	2b00      	cmp	r3, #0
 8008514:	dd02      	ble.n	800851c <_dtoa_r+0xad0>
 8008516:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008518:	3331      	adds	r3, #49	; 0x31
 800851a:	9307      	str	r3, [sp, #28]
 800851c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800851e:	9a07      	ldr	r2, [sp, #28]
 8008520:	701a      	strb	r2, [r3, #0]
 8008522:	e76a      	b.n	80083fa <_dtoa_r+0x9ae>
 8008524:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008526:	2b00      	cmp	r3, #0
 8008528:	db04      	blt.n	8008534 <_dtoa_r+0xae8>
 800852a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800852c:	4313      	orrs	r3, r2
 800852e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008530:	4313      	orrs	r3, r2
 8008532:	d11f      	bne.n	8008574 <_dtoa_r+0xb28>
 8008534:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008536:	2b00      	cmp	r3, #0
 8008538:	ddf0      	ble.n	800851c <_dtoa_r+0xad0>
 800853a:	9905      	ldr	r1, [sp, #20]
 800853c:	2201      	movs	r2, #1
 800853e:	0038      	movs	r0, r7
 8008540:	f000 fad6 	bl	8008af0 <__lshift>
 8008544:	0031      	movs	r1, r6
 8008546:	9005      	str	r0, [sp, #20]
 8008548:	f000 fb40 	bl	8008bcc <__mcmp>
 800854c:	2800      	cmp	r0, #0
 800854e:	dc03      	bgt.n	8008558 <_dtoa_r+0xb0c>
 8008550:	d1e4      	bne.n	800851c <_dtoa_r+0xad0>
 8008552:	9b07      	ldr	r3, [sp, #28]
 8008554:	07db      	lsls	r3, r3, #31
 8008556:	d5e1      	bpl.n	800851c <_dtoa_r+0xad0>
 8008558:	9b07      	ldr	r3, [sp, #28]
 800855a:	2b39      	cmp	r3, #57	; 0x39
 800855c:	d1db      	bne.n	8008516 <_dtoa_r+0xaca>
 800855e:	2339      	movs	r3, #57	; 0x39
 8008560:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008562:	7013      	strb	r3, [r2, #0]
 8008564:	9b08      	ldr	r3, [sp, #32]
 8008566:	9308      	str	r3, [sp, #32]
 8008568:	3b01      	subs	r3, #1
 800856a:	781a      	ldrb	r2, [r3, #0]
 800856c:	2a39      	cmp	r2, #57	; 0x39
 800856e:	d068      	beq.n	8008642 <_dtoa_r+0xbf6>
 8008570:	3201      	adds	r2, #1
 8008572:	e7d5      	b.n	8008520 <_dtoa_r+0xad4>
 8008574:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008576:	2b00      	cmp	r3, #0
 8008578:	dd07      	ble.n	800858a <_dtoa_r+0xb3e>
 800857a:	9b07      	ldr	r3, [sp, #28]
 800857c:	2b39      	cmp	r3, #57	; 0x39
 800857e:	d0ee      	beq.n	800855e <_dtoa_r+0xb12>
 8008580:	9b07      	ldr	r3, [sp, #28]
 8008582:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008584:	3301      	adds	r3, #1
 8008586:	7013      	strb	r3, [r2, #0]
 8008588:	e737      	b.n	80083fa <_dtoa_r+0x9ae>
 800858a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800858c:	9a07      	ldr	r2, [sp, #28]
 800858e:	701a      	strb	r2, [r3, #0]
 8008590:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008592:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008594:	4293      	cmp	r3, r2
 8008596:	d03e      	beq.n	8008616 <_dtoa_r+0xbca>
 8008598:	2300      	movs	r3, #0
 800859a:	220a      	movs	r2, #10
 800859c:	9905      	ldr	r1, [sp, #20]
 800859e:	0038      	movs	r0, r7
 80085a0:	f000 f8f8 	bl	8008794 <__multadd>
 80085a4:	2300      	movs	r3, #0
 80085a6:	9005      	str	r0, [sp, #20]
 80085a8:	220a      	movs	r2, #10
 80085aa:	0021      	movs	r1, r4
 80085ac:	0038      	movs	r0, r7
 80085ae:	42ac      	cmp	r4, r5
 80085b0:	d106      	bne.n	80085c0 <_dtoa_r+0xb74>
 80085b2:	f000 f8ef 	bl	8008794 <__multadd>
 80085b6:	0004      	movs	r4, r0
 80085b8:	0005      	movs	r5, r0
 80085ba:	9b08      	ldr	r3, [sp, #32]
 80085bc:	930a      	str	r3, [sp, #40]	; 0x28
 80085be:	e778      	b.n	80084b2 <_dtoa_r+0xa66>
 80085c0:	f000 f8e8 	bl	8008794 <__multadd>
 80085c4:	0029      	movs	r1, r5
 80085c6:	0004      	movs	r4, r0
 80085c8:	2300      	movs	r3, #0
 80085ca:	220a      	movs	r2, #10
 80085cc:	0038      	movs	r0, r7
 80085ce:	f000 f8e1 	bl	8008794 <__multadd>
 80085d2:	0005      	movs	r5, r0
 80085d4:	e7f1      	b.n	80085ba <_dtoa_r+0xb6e>
 80085d6:	9b07      	ldr	r3, [sp, #28]
 80085d8:	930c      	str	r3, [sp, #48]	; 0x30
 80085da:	2400      	movs	r4, #0
 80085dc:	0031      	movs	r1, r6
 80085de:	9805      	ldr	r0, [sp, #20]
 80085e0:	f7ff f9a8 	bl	8007934 <quorem>
 80085e4:	9b06      	ldr	r3, [sp, #24]
 80085e6:	3030      	adds	r0, #48	; 0x30
 80085e8:	5518      	strb	r0, [r3, r4]
 80085ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085ec:	3401      	adds	r4, #1
 80085ee:	9007      	str	r0, [sp, #28]
 80085f0:	42a3      	cmp	r3, r4
 80085f2:	dd07      	ble.n	8008604 <_dtoa_r+0xbb8>
 80085f4:	2300      	movs	r3, #0
 80085f6:	220a      	movs	r2, #10
 80085f8:	0038      	movs	r0, r7
 80085fa:	9905      	ldr	r1, [sp, #20]
 80085fc:	f000 f8ca 	bl	8008794 <__multadd>
 8008600:	9005      	str	r0, [sp, #20]
 8008602:	e7eb      	b.n	80085dc <_dtoa_r+0xb90>
 8008604:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008606:	2001      	movs	r0, #1
 8008608:	2b00      	cmp	r3, #0
 800860a:	dd00      	ble.n	800860e <_dtoa_r+0xbc2>
 800860c:	0018      	movs	r0, r3
 800860e:	2400      	movs	r4, #0
 8008610:	9b06      	ldr	r3, [sp, #24]
 8008612:	181b      	adds	r3, r3, r0
 8008614:	9308      	str	r3, [sp, #32]
 8008616:	9905      	ldr	r1, [sp, #20]
 8008618:	2201      	movs	r2, #1
 800861a:	0038      	movs	r0, r7
 800861c:	f000 fa68 	bl	8008af0 <__lshift>
 8008620:	0031      	movs	r1, r6
 8008622:	9005      	str	r0, [sp, #20]
 8008624:	f000 fad2 	bl	8008bcc <__mcmp>
 8008628:	2800      	cmp	r0, #0
 800862a:	dc9b      	bgt.n	8008564 <_dtoa_r+0xb18>
 800862c:	d102      	bne.n	8008634 <_dtoa_r+0xbe8>
 800862e:	9b07      	ldr	r3, [sp, #28]
 8008630:	07db      	lsls	r3, r3, #31
 8008632:	d497      	bmi.n	8008564 <_dtoa_r+0xb18>
 8008634:	9b08      	ldr	r3, [sp, #32]
 8008636:	9308      	str	r3, [sp, #32]
 8008638:	3b01      	subs	r3, #1
 800863a:	781a      	ldrb	r2, [r3, #0]
 800863c:	2a30      	cmp	r2, #48	; 0x30
 800863e:	d0fa      	beq.n	8008636 <_dtoa_r+0xbea>
 8008640:	e6db      	b.n	80083fa <_dtoa_r+0x9ae>
 8008642:	9a06      	ldr	r2, [sp, #24]
 8008644:	429a      	cmp	r2, r3
 8008646:	d18e      	bne.n	8008566 <_dtoa_r+0xb1a>
 8008648:	9b02      	ldr	r3, [sp, #8]
 800864a:	3301      	adds	r3, #1
 800864c:	9302      	str	r3, [sp, #8]
 800864e:	2331      	movs	r3, #49	; 0x31
 8008650:	e799      	b.n	8008586 <_dtoa_r+0xb3a>
 8008652:	4b09      	ldr	r3, [pc, #36]	; (8008678 <_dtoa_r+0xc2c>)
 8008654:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008656:	9306      	str	r3, [sp, #24]
 8008658:	4b08      	ldr	r3, [pc, #32]	; (800867c <_dtoa_r+0xc30>)
 800865a:	2a00      	cmp	r2, #0
 800865c:	d001      	beq.n	8008662 <_dtoa_r+0xc16>
 800865e:	f7ff fa3f 	bl	8007ae0 <_dtoa_r+0x94>
 8008662:	f7ff fa3f 	bl	8007ae4 <_dtoa_r+0x98>
 8008666:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008668:	2b00      	cmp	r3, #0
 800866a:	dcb6      	bgt.n	80085da <_dtoa_r+0xb8e>
 800866c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800866e:	2b02      	cmp	r3, #2
 8008670:	dd00      	ble.n	8008674 <_dtoa_r+0xc28>
 8008672:	e6ac      	b.n	80083ce <_dtoa_r+0x982>
 8008674:	e7b1      	b.n	80085da <_dtoa_r+0xb8e>
 8008676:	46c0      	nop			; (mov r8, r8)
 8008678:	0800a174 	.word	0x0800a174
 800867c:	0800a17c 	.word	0x0800a17c

08008680 <_localeconv_r>:
 8008680:	4800      	ldr	r0, [pc, #0]	; (8008684 <_localeconv_r+0x4>)
 8008682:	4770      	bx	lr
 8008684:	20000160 	.word	0x20000160

08008688 <malloc>:
 8008688:	b510      	push	{r4, lr}
 800868a:	4b03      	ldr	r3, [pc, #12]	; (8008698 <malloc+0x10>)
 800868c:	0001      	movs	r1, r0
 800868e:	6818      	ldr	r0, [r3, #0]
 8008690:	f000 fc4c 	bl	8008f2c <_malloc_r>
 8008694:	bd10      	pop	{r4, pc}
 8008696:	46c0      	nop			; (mov r8, r8)
 8008698:	2000000c 	.word	0x2000000c

0800869c <memchr>:
 800869c:	b2c9      	uxtb	r1, r1
 800869e:	1882      	adds	r2, r0, r2
 80086a0:	4290      	cmp	r0, r2
 80086a2:	d101      	bne.n	80086a8 <memchr+0xc>
 80086a4:	2000      	movs	r0, #0
 80086a6:	4770      	bx	lr
 80086a8:	7803      	ldrb	r3, [r0, #0]
 80086aa:	428b      	cmp	r3, r1
 80086ac:	d0fb      	beq.n	80086a6 <memchr+0xa>
 80086ae:	3001      	adds	r0, #1
 80086b0:	e7f6      	b.n	80086a0 <memchr+0x4>

080086b2 <memcpy>:
 80086b2:	2300      	movs	r3, #0
 80086b4:	b510      	push	{r4, lr}
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d100      	bne.n	80086bc <memcpy+0xa>
 80086ba:	bd10      	pop	{r4, pc}
 80086bc:	5ccc      	ldrb	r4, [r1, r3]
 80086be:	54c4      	strb	r4, [r0, r3]
 80086c0:	3301      	adds	r3, #1
 80086c2:	e7f8      	b.n	80086b6 <memcpy+0x4>

080086c4 <_Balloc>:
 80086c4:	b570      	push	{r4, r5, r6, lr}
 80086c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80086c8:	0006      	movs	r6, r0
 80086ca:	000c      	movs	r4, r1
 80086cc:	2d00      	cmp	r5, #0
 80086ce:	d10e      	bne.n	80086ee <_Balloc+0x2a>
 80086d0:	2010      	movs	r0, #16
 80086d2:	f7ff ffd9 	bl	8008688 <malloc>
 80086d6:	1e02      	subs	r2, r0, #0
 80086d8:	6270      	str	r0, [r6, #36]	; 0x24
 80086da:	d104      	bne.n	80086e6 <_Balloc+0x22>
 80086dc:	2166      	movs	r1, #102	; 0x66
 80086de:	4b19      	ldr	r3, [pc, #100]	; (8008744 <_Balloc+0x80>)
 80086e0:	4819      	ldr	r0, [pc, #100]	; (8008748 <_Balloc+0x84>)
 80086e2:	f000 fe0d 	bl	8009300 <__assert_func>
 80086e6:	6045      	str	r5, [r0, #4]
 80086e8:	6085      	str	r5, [r0, #8]
 80086ea:	6005      	str	r5, [r0, #0]
 80086ec:	60c5      	str	r5, [r0, #12]
 80086ee:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80086f0:	68eb      	ldr	r3, [r5, #12]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d013      	beq.n	800871e <_Balloc+0x5a>
 80086f6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80086f8:	00a2      	lsls	r2, r4, #2
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	189b      	adds	r3, r3, r2
 80086fe:	6818      	ldr	r0, [r3, #0]
 8008700:	2800      	cmp	r0, #0
 8008702:	d118      	bne.n	8008736 <_Balloc+0x72>
 8008704:	2101      	movs	r1, #1
 8008706:	000d      	movs	r5, r1
 8008708:	40a5      	lsls	r5, r4
 800870a:	1d6a      	adds	r2, r5, #5
 800870c:	0030      	movs	r0, r6
 800870e:	0092      	lsls	r2, r2, #2
 8008710:	f000 fb74 	bl	8008dfc <_calloc_r>
 8008714:	2800      	cmp	r0, #0
 8008716:	d00c      	beq.n	8008732 <_Balloc+0x6e>
 8008718:	6044      	str	r4, [r0, #4]
 800871a:	6085      	str	r5, [r0, #8]
 800871c:	e00d      	b.n	800873a <_Balloc+0x76>
 800871e:	2221      	movs	r2, #33	; 0x21
 8008720:	2104      	movs	r1, #4
 8008722:	0030      	movs	r0, r6
 8008724:	f000 fb6a 	bl	8008dfc <_calloc_r>
 8008728:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800872a:	60e8      	str	r0, [r5, #12]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d1e1      	bne.n	80086f6 <_Balloc+0x32>
 8008732:	2000      	movs	r0, #0
 8008734:	bd70      	pop	{r4, r5, r6, pc}
 8008736:	6802      	ldr	r2, [r0, #0]
 8008738:	601a      	str	r2, [r3, #0]
 800873a:	2300      	movs	r3, #0
 800873c:	6103      	str	r3, [r0, #16]
 800873e:	60c3      	str	r3, [r0, #12]
 8008740:	e7f8      	b.n	8008734 <_Balloc+0x70>
 8008742:	46c0      	nop			; (mov r8, r8)
 8008744:	0800a181 	.word	0x0800a181
 8008748:	0800a204 	.word	0x0800a204

0800874c <_Bfree>:
 800874c:	b570      	push	{r4, r5, r6, lr}
 800874e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008750:	0005      	movs	r5, r0
 8008752:	000c      	movs	r4, r1
 8008754:	2e00      	cmp	r6, #0
 8008756:	d10e      	bne.n	8008776 <_Bfree+0x2a>
 8008758:	2010      	movs	r0, #16
 800875a:	f7ff ff95 	bl	8008688 <malloc>
 800875e:	1e02      	subs	r2, r0, #0
 8008760:	6268      	str	r0, [r5, #36]	; 0x24
 8008762:	d104      	bne.n	800876e <_Bfree+0x22>
 8008764:	218a      	movs	r1, #138	; 0x8a
 8008766:	4b09      	ldr	r3, [pc, #36]	; (800878c <_Bfree+0x40>)
 8008768:	4809      	ldr	r0, [pc, #36]	; (8008790 <_Bfree+0x44>)
 800876a:	f000 fdc9 	bl	8009300 <__assert_func>
 800876e:	6046      	str	r6, [r0, #4]
 8008770:	6086      	str	r6, [r0, #8]
 8008772:	6006      	str	r6, [r0, #0]
 8008774:	60c6      	str	r6, [r0, #12]
 8008776:	2c00      	cmp	r4, #0
 8008778:	d007      	beq.n	800878a <_Bfree+0x3e>
 800877a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800877c:	6862      	ldr	r2, [r4, #4]
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	0092      	lsls	r2, r2, #2
 8008782:	189b      	adds	r3, r3, r2
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	6022      	str	r2, [r4, #0]
 8008788:	601c      	str	r4, [r3, #0]
 800878a:	bd70      	pop	{r4, r5, r6, pc}
 800878c:	0800a181 	.word	0x0800a181
 8008790:	0800a204 	.word	0x0800a204

08008794 <__multadd>:
 8008794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008796:	000e      	movs	r6, r1
 8008798:	9001      	str	r0, [sp, #4]
 800879a:	000c      	movs	r4, r1
 800879c:	001d      	movs	r5, r3
 800879e:	2000      	movs	r0, #0
 80087a0:	690f      	ldr	r7, [r1, #16]
 80087a2:	3614      	adds	r6, #20
 80087a4:	6833      	ldr	r3, [r6, #0]
 80087a6:	3001      	adds	r0, #1
 80087a8:	b299      	uxth	r1, r3
 80087aa:	4351      	muls	r1, r2
 80087ac:	0c1b      	lsrs	r3, r3, #16
 80087ae:	4353      	muls	r3, r2
 80087b0:	1949      	adds	r1, r1, r5
 80087b2:	0c0d      	lsrs	r5, r1, #16
 80087b4:	195b      	adds	r3, r3, r5
 80087b6:	0c1d      	lsrs	r5, r3, #16
 80087b8:	b289      	uxth	r1, r1
 80087ba:	041b      	lsls	r3, r3, #16
 80087bc:	185b      	adds	r3, r3, r1
 80087be:	c608      	stmia	r6!, {r3}
 80087c0:	4287      	cmp	r7, r0
 80087c2:	dcef      	bgt.n	80087a4 <__multadd+0x10>
 80087c4:	2d00      	cmp	r5, #0
 80087c6:	d022      	beq.n	800880e <__multadd+0x7a>
 80087c8:	68a3      	ldr	r3, [r4, #8]
 80087ca:	42bb      	cmp	r3, r7
 80087cc:	dc19      	bgt.n	8008802 <__multadd+0x6e>
 80087ce:	6863      	ldr	r3, [r4, #4]
 80087d0:	9801      	ldr	r0, [sp, #4]
 80087d2:	1c59      	adds	r1, r3, #1
 80087d4:	f7ff ff76 	bl	80086c4 <_Balloc>
 80087d8:	1e06      	subs	r6, r0, #0
 80087da:	d105      	bne.n	80087e8 <__multadd+0x54>
 80087dc:	0002      	movs	r2, r0
 80087de:	21b5      	movs	r1, #181	; 0xb5
 80087e0:	4b0c      	ldr	r3, [pc, #48]	; (8008814 <__multadd+0x80>)
 80087e2:	480d      	ldr	r0, [pc, #52]	; (8008818 <__multadd+0x84>)
 80087e4:	f000 fd8c 	bl	8009300 <__assert_func>
 80087e8:	0021      	movs	r1, r4
 80087ea:	6923      	ldr	r3, [r4, #16]
 80087ec:	310c      	adds	r1, #12
 80087ee:	1c9a      	adds	r2, r3, #2
 80087f0:	0092      	lsls	r2, r2, #2
 80087f2:	300c      	adds	r0, #12
 80087f4:	f7ff ff5d 	bl	80086b2 <memcpy>
 80087f8:	0021      	movs	r1, r4
 80087fa:	9801      	ldr	r0, [sp, #4]
 80087fc:	f7ff ffa6 	bl	800874c <_Bfree>
 8008800:	0034      	movs	r4, r6
 8008802:	1d3b      	adds	r3, r7, #4
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	18e3      	adds	r3, r4, r3
 8008808:	605d      	str	r5, [r3, #4]
 800880a:	1c7b      	adds	r3, r7, #1
 800880c:	6123      	str	r3, [r4, #16]
 800880e:	0020      	movs	r0, r4
 8008810:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008812:	46c0      	nop			; (mov r8, r8)
 8008814:	0800a1f3 	.word	0x0800a1f3
 8008818:	0800a204 	.word	0x0800a204

0800881c <__hi0bits>:
 800881c:	0003      	movs	r3, r0
 800881e:	0c02      	lsrs	r2, r0, #16
 8008820:	2000      	movs	r0, #0
 8008822:	4282      	cmp	r2, r0
 8008824:	d101      	bne.n	800882a <__hi0bits+0xe>
 8008826:	041b      	lsls	r3, r3, #16
 8008828:	3010      	adds	r0, #16
 800882a:	0e1a      	lsrs	r2, r3, #24
 800882c:	d101      	bne.n	8008832 <__hi0bits+0x16>
 800882e:	3008      	adds	r0, #8
 8008830:	021b      	lsls	r3, r3, #8
 8008832:	0f1a      	lsrs	r2, r3, #28
 8008834:	d101      	bne.n	800883a <__hi0bits+0x1e>
 8008836:	3004      	adds	r0, #4
 8008838:	011b      	lsls	r3, r3, #4
 800883a:	0f9a      	lsrs	r2, r3, #30
 800883c:	d101      	bne.n	8008842 <__hi0bits+0x26>
 800883e:	3002      	adds	r0, #2
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	2b00      	cmp	r3, #0
 8008844:	db03      	blt.n	800884e <__hi0bits+0x32>
 8008846:	3001      	adds	r0, #1
 8008848:	005b      	lsls	r3, r3, #1
 800884a:	d400      	bmi.n	800884e <__hi0bits+0x32>
 800884c:	2020      	movs	r0, #32
 800884e:	4770      	bx	lr

08008850 <__lo0bits>:
 8008850:	6803      	ldr	r3, [r0, #0]
 8008852:	0002      	movs	r2, r0
 8008854:	2107      	movs	r1, #7
 8008856:	0018      	movs	r0, r3
 8008858:	4008      	ands	r0, r1
 800885a:	420b      	tst	r3, r1
 800885c:	d00d      	beq.n	800887a <__lo0bits+0x2a>
 800885e:	3906      	subs	r1, #6
 8008860:	2000      	movs	r0, #0
 8008862:	420b      	tst	r3, r1
 8008864:	d105      	bne.n	8008872 <__lo0bits+0x22>
 8008866:	3002      	adds	r0, #2
 8008868:	4203      	tst	r3, r0
 800886a:	d003      	beq.n	8008874 <__lo0bits+0x24>
 800886c:	40cb      	lsrs	r3, r1
 800886e:	0008      	movs	r0, r1
 8008870:	6013      	str	r3, [r2, #0]
 8008872:	4770      	bx	lr
 8008874:	089b      	lsrs	r3, r3, #2
 8008876:	6013      	str	r3, [r2, #0]
 8008878:	e7fb      	b.n	8008872 <__lo0bits+0x22>
 800887a:	b299      	uxth	r1, r3
 800887c:	2900      	cmp	r1, #0
 800887e:	d101      	bne.n	8008884 <__lo0bits+0x34>
 8008880:	2010      	movs	r0, #16
 8008882:	0c1b      	lsrs	r3, r3, #16
 8008884:	b2d9      	uxtb	r1, r3
 8008886:	2900      	cmp	r1, #0
 8008888:	d101      	bne.n	800888e <__lo0bits+0x3e>
 800888a:	3008      	adds	r0, #8
 800888c:	0a1b      	lsrs	r3, r3, #8
 800888e:	0719      	lsls	r1, r3, #28
 8008890:	d101      	bne.n	8008896 <__lo0bits+0x46>
 8008892:	3004      	adds	r0, #4
 8008894:	091b      	lsrs	r3, r3, #4
 8008896:	0799      	lsls	r1, r3, #30
 8008898:	d101      	bne.n	800889e <__lo0bits+0x4e>
 800889a:	3002      	adds	r0, #2
 800889c:	089b      	lsrs	r3, r3, #2
 800889e:	07d9      	lsls	r1, r3, #31
 80088a0:	d4e9      	bmi.n	8008876 <__lo0bits+0x26>
 80088a2:	3001      	adds	r0, #1
 80088a4:	085b      	lsrs	r3, r3, #1
 80088a6:	d1e6      	bne.n	8008876 <__lo0bits+0x26>
 80088a8:	2020      	movs	r0, #32
 80088aa:	e7e2      	b.n	8008872 <__lo0bits+0x22>

080088ac <__i2b>:
 80088ac:	b510      	push	{r4, lr}
 80088ae:	000c      	movs	r4, r1
 80088b0:	2101      	movs	r1, #1
 80088b2:	f7ff ff07 	bl	80086c4 <_Balloc>
 80088b6:	2800      	cmp	r0, #0
 80088b8:	d106      	bne.n	80088c8 <__i2b+0x1c>
 80088ba:	21a0      	movs	r1, #160	; 0xa0
 80088bc:	0002      	movs	r2, r0
 80088be:	4b04      	ldr	r3, [pc, #16]	; (80088d0 <__i2b+0x24>)
 80088c0:	4804      	ldr	r0, [pc, #16]	; (80088d4 <__i2b+0x28>)
 80088c2:	0049      	lsls	r1, r1, #1
 80088c4:	f000 fd1c 	bl	8009300 <__assert_func>
 80088c8:	2301      	movs	r3, #1
 80088ca:	6144      	str	r4, [r0, #20]
 80088cc:	6103      	str	r3, [r0, #16]
 80088ce:	bd10      	pop	{r4, pc}
 80088d0:	0800a1f3 	.word	0x0800a1f3
 80088d4:	0800a204 	.word	0x0800a204

080088d8 <__multiply>:
 80088d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088da:	690b      	ldr	r3, [r1, #16]
 80088dc:	0014      	movs	r4, r2
 80088de:	6912      	ldr	r2, [r2, #16]
 80088e0:	000d      	movs	r5, r1
 80088e2:	b089      	sub	sp, #36	; 0x24
 80088e4:	4293      	cmp	r3, r2
 80088e6:	da01      	bge.n	80088ec <__multiply+0x14>
 80088e8:	0025      	movs	r5, r4
 80088ea:	000c      	movs	r4, r1
 80088ec:	692f      	ldr	r7, [r5, #16]
 80088ee:	6926      	ldr	r6, [r4, #16]
 80088f0:	6869      	ldr	r1, [r5, #4]
 80088f2:	19bb      	adds	r3, r7, r6
 80088f4:	9302      	str	r3, [sp, #8]
 80088f6:	68ab      	ldr	r3, [r5, #8]
 80088f8:	19ba      	adds	r2, r7, r6
 80088fa:	4293      	cmp	r3, r2
 80088fc:	da00      	bge.n	8008900 <__multiply+0x28>
 80088fe:	3101      	adds	r1, #1
 8008900:	f7ff fee0 	bl	80086c4 <_Balloc>
 8008904:	9001      	str	r0, [sp, #4]
 8008906:	2800      	cmp	r0, #0
 8008908:	d106      	bne.n	8008918 <__multiply+0x40>
 800890a:	215e      	movs	r1, #94	; 0x5e
 800890c:	0002      	movs	r2, r0
 800890e:	4b48      	ldr	r3, [pc, #288]	; (8008a30 <__multiply+0x158>)
 8008910:	4848      	ldr	r0, [pc, #288]	; (8008a34 <__multiply+0x15c>)
 8008912:	31ff      	adds	r1, #255	; 0xff
 8008914:	f000 fcf4 	bl	8009300 <__assert_func>
 8008918:	9b01      	ldr	r3, [sp, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	3314      	adds	r3, #20
 800891e:	469c      	mov	ip, r3
 8008920:	19bb      	adds	r3, r7, r6
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	4463      	add	r3, ip
 8008926:	9303      	str	r3, [sp, #12]
 8008928:	4663      	mov	r3, ip
 800892a:	9903      	ldr	r1, [sp, #12]
 800892c:	428b      	cmp	r3, r1
 800892e:	d32c      	bcc.n	800898a <__multiply+0xb2>
 8008930:	002b      	movs	r3, r5
 8008932:	0022      	movs	r2, r4
 8008934:	3314      	adds	r3, #20
 8008936:	00bf      	lsls	r7, r7, #2
 8008938:	3214      	adds	r2, #20
 800893a:	9306      	str	r3, [sp, #24]
 800893c:	00b6      	lsls	r6, r6, #2
 800893e:	19db      	adds	r3, r3, r7
 8008940:	9304      	str	r3, [sp, #16]
 8008942:	1993      	adds	r3, r2, r6
 8008944:	9307      	str	r3, [sp, #28]
 8008946:	2304      	movs	r3, #4
 8008948:	9305      	str	r3, [sp, #20]
 800894a:	002b      	movs	r3, r5
 800894c:	9904      	ldr	r1, [sp, #16]
 800894e:	3315      	adds	r3, #21
 8008950:	9200      	str	r2, [sp, #0]
 8008952:	4299      	cmp	r1, r3
 8008954:	d305      	bcc.n	8008962 <__multiply+0x8a>
 8008956:	1b4b      	subs	r3, r1, r5
 8008958:	3b15      	subs	r3, #21
 800895a:	089b      	lsrs	r3, r3, #2
 800895c:	3301      	adds	r3, #1
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	9305      	str	r3, [sp, #20]
 8008962:	9b07      	ldr	r3, [sp, #28]
 8008964:	9a00      	ldr	r2, [sp, #0]
 8008966:	429a      	cmp	r2, r3
 8008968:	d311      	bcc.n	800898e <__multiply+0xb6>
 800896a:	9b02      	ldr	r3, [sp, #8]
 800896c:	2b00      	cmp	r3, #0
 800896e:	dd06      	ble.n	800897e <__multiply+0xa6>
 8008970:	9b03      	ldr	r3, [sp, #12]
 8008972:	3b04      	subs	r3, #4
 8008974:	9303      	str	r3, [sp, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d053      	beq.n	8008a26 <__multiply+0x14e>
 800897e:	9b01      	ldr	r3, [sp, #4]
 8008980:	9a02      	ldr	r2, [sp, #8]
 8008982:	0018      	movs	r0, r3
 8008984:	611a      	str	r2, [r3, #16]
 8008986:	b009      	add	sp, #36	; 0x24
 8008988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800898a:	c304      	stmia	r3!, {r2}
 800898c:	e7cd      	b.n	800892a <__multiply+0x52>
 800898e:	9b00      	ldr	r3, [sp, #0]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	b298      	uxth	r0, r3
 8008994:	2800      	cmp	r0, #0
 8008996:	d01b      	beq.n	80089d0 <__multiply+0xf8>
 8008998:	4667      	mov	r7, ip
 800899a:	2400      	movs	r4, #0
 800899c:	9e06      	ldr	r6, [sp, #24]
 800899e:	ce02      	ldmia	r6!, {r1}
 80089a0:	683a      	ldr	r2, [r7, #0]
 80089a2:	b28b      	uxth	r3, r1
 80089a4:	4343      	muls	r3, r0
 80089a6:	b292      	uxth	r2, r2
 80089a8:	189b      	adds	r3, r3, r2
 80089aa:	191b      	adds	r3, r3, r4
 80089ac:	0c0c      	lsrs	r4, r1, #16
 80089ae:	4344      	muls	r4, r0
 80089b0:	683a      	ldr	r2, [r7, #0]
 80089b2:	0c11      	lsrs	r1, r2, #16
 80089b4:	1861      	adds	r1, r4, r1
 80089b6:	0c1c      	lsrs	r4, r3, #16
 80089b8:	1909      	adds	r1, r1, r4
 80089ba:	0c0c      	lsrs	r4, r1, #16
 80089bc:	b29b      	uxth	r3, r3
 80089be:	0409      	lsls	r1, r1, #16
 80089c0:	430b      	orrs	r3, r1
 80089c2:	c708      	stmia	r7!, {r3}
 80089c4:	9b04      	ldr	r3, [sp, #16]
 80089c6:	42b3      	cmp	r3, r6
 80089c8:	d8e9      	bhi.n	800899e <__multiply+0xc6>
 80089ca:	4663      	mov	r3, ip
 80089cc:	9a05      	ldr	r2, [sp, #20]
 80089ce:	509c      	str	r4, [r3, r2]
 80089d0:	9b00      	ldr	r3, [sp, #0]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	0c1e      	lsrs	r6, r3, #16
 80089d6:	d020      	beq.n	8008a1a <__multiply+0x142>
 80089d8:	4663      	mov	r3, ip
 80089da:	002c      	movs	r4, r5
 80089dc:	4660      	mov	r0, ip
 80089de:	2700      	movs	r7, #0
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	3414      	adds	r4, #20
 80089e4:	6822      	ldr	r2, [r4, #0]
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	b291      	uxth	r1, r2
 80089ea:	4371      	muls	r1, r6
 80089ec:	6802      	ldr	r2, [r0, #0]
 80089ee:	0c12      	lsrs	r2, r2, #16
 80089f0:	1889      	adds	r1, r1, r2
 80089f2:	19cf      	adds	r7, r1, r7
 80089f4:	0439      	lsls	r1, r7, #16
 80089f6:	430b      	orrs	r3, r1
 80089f8:	6003      	str	r3, [r0, #0]
 80089fa:	cc02      	ldmia	r4!, {r1}
 80089fc:	6843      	ldr	r3, [r0, #4]
 80089fe:	0c09      	lsrs	r1, r1, #16
 8008a00:	4371      	muls	r1, r6
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	0c3f      	lsrs	r7, r7, #16
 8008a06:	18cb      	adds	r3, r1, r3
 8008a08:	9a04      	ldr	r2, [sp, #16]
 8008a0a:	19db      	adds	r3, r3, r7
 8008a0c:	0c1f      	lsrs	r7, r3, #16
 8008a0e:	3004      	adds	r0, #4
 8008a10:	42a2      	cmp	r2, r4
 8008a12:	d8e7      	bhi.n	80089e4 <__multiply+0x10c>
 8008a14:	4662      	mov	r2, ip
 8008a16:	9905      	ldr	r1, [sp, #20]
 8008a18:	5053      	str	r3, [r2, r1]
 8008a1a:	9b00      	ldr	r3, [sp, #0]
 8008a1c:	3304      	adds	r3, #4
 8008a1e:	9300      	str	r3, [sp, #0]
 8008a20:	2304      	movs	r3, #4
 8008a22:	449c      	add	ip, r3
 8008a24:	e79d      	b.n	8008962 <__multiply+0x8a>
 8008a26:	9b02      	ldr	r3, [sp, #8]
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	9302      	str	r3, [sp, #8]
 8008a2c:	e79d      	b.n	800896a <__multiply+0x92>
 8008a2e:	46c0      	nop			; (mov r8, r8)
 8008a30:	0800a1f3 	.word	0x0800a1f3
 8008a34:	0800a204 	.word	0x0800a204

08008a38 <__pow5mult>:
 8008a38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a3a:	2303      	movs	r3, #3
 8008a3c:	0015      	movs	r5, r2
 8008a3e:	0007      	movs	r7, r0
 8008a40:	000e      	movs	r6, r1
 8008a42:	401a      	ands	r2, r3
 8008a44:	421d      	tst	r5, r3
 8008a46:	d008      	beq.n	8008a5a <__pow5mult+0x22>
 8008a48:	4925      	ldr	r1, [pc, #148]	; (8008ae0 <__pow5mult+0xa8>)
 8008a4a:	3a01      	subs	r2, #1
 8008a4c:	0092      	lsls	r2, r2, #2
 8008a4e:	5852      	ldr	r2, [r2, r1]
 8008a50:	2300      	movs	r3, #0
 8008a52:	0031      	movs	r1, r6
 8008a54:	f7ff fe9e 	bl	8008794 <__multadd>
 8008a58:	0006      	movs	r6, r0
 8008a5a:	10ad      	asrs	r5, r5, #2
 8008a5c:	d03d      	beq.n	8008ada <__pow5mult+0xa2>
 8008a5e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8008a60:	2c00      	cmp	r4, #0
 8008a62:	d10f      	bne.n	8008a84 <__pow5mult+0x4c>
 8008a64:	2010      	movs	r0, #16
 8008a66:	f7ff fe0f 	bl	8008688 <malloc>
 8008a6a:	1e02      	subs	r2, r0, #0
 8008a6c:	6278      	str	r0, [r7, #36]	; 0x24
 8008a6e:	d105      	bne.n	8008a7c <__pow5mult+0x44>
 8008a70:	21d7      	movs	r1, #215	; 0xd7
 8008a72:	4b1c      	ldr	r3, [pc, #112]	; (8008ae4 <__pow5mult+0xac>)
 8008a74:	481c      	ldr	r0, [pc, #112]	; (8008ae8 <__pow5mult+0xb0>)
 8008a76:	0049      	lsls	r1, r1, #1
 8008a78:	f000 fc42 	bl	8009300 <__assert_func>
 8008a7c:	6044      	str	r4, [r0, #4]
 8008a7e:	6084      	str	r4, [r0, #8]
 8008a80:	6004      	str	r4, [r0, #0]
 8008a82:	60c4      	str	r4, [r0, #12]
 8008a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a86:	689c      	ldr	r4, [r3, #8]
 8008a88:	9301      	str	r3, [sp, #4]
 8008a8a:	2c00      	cmp	r4, #0
 8008a8c:	d108      	bne.n	8008aa0 <__pow5mult+0x68>
 8008a8e:	0038      	movs	r0, r7
 8008a90:	4916      	ldr	r1, [pc, #88]	; (8008aec <__pow5mult+0xb4>)
 8008a92:	f7ff ff0b 	bl	80088ac <__i2b>
 8008a96:	9b01      	ldr	r3, [sp, #4]
 8008a98:	0004      	movs	r4, r0
 8008a9a:	6098      	str	r0, [r3, #8]
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	6003      	str	r3, [r0, #0]
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	421d      	tst	r5, r3
 8008aa4:	d00a      	beq.n	8008abc <__pow5mult+0x84>
 8008aa6:	0031      	movs	r1, r6
 8008aa8:	0022      	movs	r2, r4
 8008aaa:	0038      	movs	r0, r7
 8008aac:	f7ff ff14 	bl	80088d8 <__multiply>
 8008ab0:	0031      	movs	r1, r6
 8008ab2:	9001      	str	r0, [sp, #4]
 8008ab4:	0038      	movs	r0, r7
 8008ab6:	f7ff fe49 	bl	800874c <_Bfree>
 8008aba:	9e01      	ldr	r6, [sp, #4]
 8008abc:	106d      	asrs	r5, r5, #1
 8008abe:	d00c      	beq.n	8008ada <__pow5mult+0xa2>
 8008ac0:	6820      	ldr	r0, [r4, #0]
 8008ac2:	2800      	cmp	r0, #0
 8008ac4:	d107      	bne.n	8008ad6 <__pow5mult+0x9e>
 8008ac6:	0022      	movs	r2, r4
 8008ac8:	0021      	movs	r1, r4
 8008aca:	0038      	movs	r0, r7
 8008acc:	f7ff ff04 	bl	80088d8 <__multiply>
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	6020      	str	r0, [r4, #0]
 8008ad4:	6003      	str	r3, [r0, #0]
 8008ad6:	0004      	movs	r4, r0
 8008ad8:	e7e2      	b.n	8008aa0 <__pow5mult+0x68>
 8008ada:	0030      	movs	r0, r6
 8008adc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008ade:	46c0      	nop			; (mov r8, r8)
 8008ae0:	0800a350 	.word	0x0800a350
 8008ae4:	0800a181 	.word	0x0800a181
 8008ae8:	0800a204 	.word	0x0800a204
 8008aec:	00000271 	.word	0x00000271

08008af0 <__lshift>:
 8008af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008af2:	000c      	movs	r4, r1
 8008af4:	0017      	movs	r7, r2
 8008af6:	6923      	ldr	r3, [r4, #16]
 8008af8:	1155      	asrs	r5, r2, #5
 8008afa:	b087      	sub	sp, #28
 8008afc:	18eb      	adds	r3, r5, r3
 8008afe:	9302      	str	r3, [sp, #8]
 8008b00:	3301      	adds	r3, #1
 8008b02:	9301      	str	r3, [sp, #4]
 8008b04:	6849      	ldr	r1, [r1, #4]
 8008b06:	68a3      	ldr	r3, [r4, #8]
 8008b08:	9004      	str	r0, [sp, #16]
 8008b0a:	9a01      	ldr	r2, [sp, #4]
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	db10      	blt.n	8008b32 <__lshift+0x42>
 8008b10:	9804      	ldr	r0, [sp, #16]
 8008b12:	f7ff fdd7 	bl	80086c4 <_Balloc>
 8008b16:	2300      	movs	r3, #0
 8008b18:	0002      	movs	r2, r0
 8008b1a:	0006      	movs	r6, r0
 8008b1c:	0019      	movs	r1, r3
 8008b1e:	3214      	adds	r2, #20
 8008b20:	4298      	cmp	r0, r3
 8008b22:	d10c      	bne.n	8008b3e <__lshift+0x4e>
 8008b24:	21da      	movs	r1, #218	; 0xda
 8008b26:	0002      	movs	r2, r0
 8008b28:	4b26      	ldr	r3, [pc, #152]	; (8008bc4 <__lshift+0xd4>)
 8008b2a:	4827      	ldr	r0, [pc, #156]	; (8008bc8 <__lshift+0xd8>)
 8008b2c:	31ff      	adds	r1, #255	; 0xff
 8008b2e:	f000 fbe7 	bl	8009300 <__assert_func>
 8008b32:	3101      	adds	r1, #1
 8008b34:	005b      	lsls	r3, r3, #1
 8008b36:	e7e8      	b.n	8008b0a <__lshift+0x1a>
 8008b38:	0098      	lsls	r0, r3, #2
 8008b3a:	5011      	str	r1, [r2, r0]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	42ab      	cmp	r3, r5
 8008b40:	dbfa      	blt.n	8008b38 <__lshift+0x48>
 8008b42:	43eb      	mvns	r3, r5
 8008b44:	17db      	asrs	r3, r3, #31
 8008b46:	401d      	ands	r5, r3
 8008b48:	211f      	movs	r1, #31
 8008b4a:	0023      	movs	r3, r4
 8008b4c:	0038      	movs	r0, r7
 8008b4e:	00ad      	lsls	r5, r5, #2
 8008b50:	1955      	adds	r5, r2, r5
 8008b52:	6922      	ldr	r2, [r4, #16]
 8008b54:	3314      	adds	r3, #20
 8008b56:	0092      	lsls	r2, r2, #2
 8008b58:	4008      	ands	r0, r1
 8008b5a:	4684      	mov	ip, r0
 8008b5c:	189a      	adds	r2, r3, r2
 8008b5e:	420f      	tst	r7, r1
 8008b60:	d02a      	beq.n	8008bb8 <__lshift+0xc8>
 8008b62:	3101      	adds	r1, #1
 8008b64:	1a09      	subs	r1, r1, r0
 8008b66:	9105      	str	r1, [sp, #20]
 8008b68:	2100      	movs	r1, #0
 8008b6a:	9503      	str	r5, [sp, #12]
 8008b6c:	4667      	mov	r7, ip
 8008b6e:	6818      	ldr	r0, [r3, #0]
 8008b70:	40b8      	lsls	r0, r7
 8008b72:	4301      	orrs	r1, r0
 8008b74:	9803      	ldr	r0, [sp, #12]
 8008b76:	c002      	stmia	r0!, {r1}
 8008b78:	cb02      	ldmia	r3!, {r1}
 8008b7a:	9003      	str	r0, [sp, #12]
 8008b7c:	9805      	ldr	r0, [sp, #20]
 8008b7e:	40c1      	lsrs	r1, r0
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d8f3      	bhi.n	8008b6c <__lshift+0x7c>
 8008b84:	0020      	movs	r0, r4
 8008b86:	3015      	adds	r0, #21
 8008b88:	2304      	movs	r3, #4
 8008b8a:	4282      	cmp	r2, r0
 8008b8c:	d304      	bcc.n	8008b98 <__lshift+0xa8>
 8008b8e:	1b13      	subs	r3, r2, r4
 8008b90:	3b15      	subs	r3, #21
 8008b92:	089b      	lsrs	r3, r3, #2
 8008b94:	3301      	adds	r3, #1
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	50e9      	str	r1, [r5, r3]
 8008b9a:	2900      	cmp	r1, #0
 8008b9c:	d002      	beq.n	8008ba4 <__lshift+0xb4>
 8008b9e:	9b02      	ldr	r3, [sp, #8]
 8008ba0:	3302      	adds	r3, #2
 8008ba2:	9301      	str	r3, [sp, #4]
 8008ba4:	9b01      	ldr	r3, [sp, #4]
 8008ba6:	9804      	ldr	r0, [sp, #16]
 8008ba8:	3b01      	subs	r3, #1
 8008baa:	0021      	movs	r1, r4
 8008bac:	6133      	str	r3, [r6, #16]
 8008bae:	f7ff fdcd 	bl	800874c <_Bfree>
 8008bb2:	0030      	movs	r0, r6
 8008bb4:	b007      	add	sp, #28
 8008bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bb8:	cb02      	ldmia	r3!, {r1}
 8008bba:	c502      	stmia	r5!, {r1}
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d8fb      	bhi.n	8008bb8 <__lshift+0xc8>
 8008bc0:	e7f0      	b.n	8008ba4 <__lshift+0xb4>
 8008bc2:	46c0      	nop			; (mov r8, r8)
 8008bc4:	0800a1f3 	.word	0x0800a1f3
 8008bc8:	0800a204 	.word	0x0800a204

08008bcc <__mcmp>:
 8008bcc:	6902      	ldr	r2, [r0, #16]
 8008bce:	690b      	ldr	r3, [r1, #16]
 8008bd0:	b530      	push	{r4, r5, lr}
 8008bd2:	0004      	movs	r4, r0
 8008bd4:	1ad0      	subs	r0, r2, r3
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d10d      	bne.n	8008bf6 <__mcmp+0x2a>
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	3414      	adds	r4, #20
 8008bde:	3114      	adds	r1, #20
 8008be0:	18e2      	adds	r2, r4, r3
 8008be2:	18c9      	adds	r1, r1, r3
 8008be4:	3a04      	subs	r2, #4
 8008be6:	3904      	subs	r1, #4
 8008be8:	6815      	ldr	r5, [r2, #0]
 8008bea:	680b      	ldr	r3, [r1, #0]
 8008bec:	429d      	cmp	r5, r3
 8008bee:	d003      	beq.n	8008bf8 <__mcmp+0x2c>
 8008bf0:	2001      	movs	r0, #1
 8008bf2:	429d      	cmp	r5, r3
 8008bf4:	d303      	bcc.n	8008bfe <__mcmp+0x32>
 8008bf6:	bd30      	pop	{r4, r5, pc}
 8008bf8:	4294      	cmp	r4, r2
 8008bfa:	d3f3      	bcc.n	8008be4 <__mcmp+0x18>
 8008bfc:	e7fb      	b.n	8008bf6 <__mcmp+0x2a>
 8008bfe:	4240      	negs	r0, r0
 8008c00:	e7f9      	b.n	8008bf6 <__mcmp+0x2a>
	...

08008c04 <__mdiff>:
 8008c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c06:	000e      	movs	r6, r1
 8008c08:	0007      	movs	r7, r0
 8008c0a:	0011      	movs	r1, r2
 8008c0c:	0030      	movs	r0, r6
 8008c0e:	b087      	sub	sp, #28
 8008c10:	0014      	movs	r4, r2
 8008c12:	f7ff ffdb 	bl	8008bcc <__mcmp>
 8008c16:	1e05      	subs	r5, r0, #0
 8008c18:	d110      	bne.n	8008c3c <__mdiff+0x38>
 8008c1a:	0001      	movs	r1, r0
 8008c1c:	0038      	movs	r0, r7
 8008c1e:	f7ff fd51 	bl	80086c4 <_Balloc>
 8008c22:	1e02      	subs	r2, r0, #0
 8008c24:	d104      	bne.n	8008c30 <__mdiff+0x2c>
 8008c26:	4b40      	ldr	r3, [pc, #256]	; (8008d28 <__mdiff+0x124>)
 8008c28:	4940      	ldr	r1, [pc, #256]	; (8008d2c <__mdiff+0x128>)
 8008c2a:	4841      	ldr	r0, [pc, #260]	; (8008d30 <__mdiff+0x12c>)
 8008c2c:	f000 fb68 	bl	8009300 <__assert_func>
 8008c30:	2301      	movs	r3, #1
 8008c32:	6145      	str	r5, [r0, #20]
 8008c34:	6103      	str	r3, [r0, #16]
 8008c36:	0010      	movs	r0, r2
 8008c38:	b007      	add	sp, #28
 8008c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	9301      	str	r3, [sp, #4]
 8008c40:	2800      	cmp	r0, #0
 8008c42:	db04      	blt.n	8008c4e <__mdiff+0x4a>
 8008c44:	0023      	movs	r3, r4
 8008c46:	0034      	movs	r4, r6
 8008c48:	001e      	movs	r6, r3
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	9301      	str	r3, [sp, #4]
 8008c4e:	0038      	movs	r0, r7
 8008c50:	6861      	ldr	r1, [r4, #4]
 8008c52:	f7ff fd37 	bl	80086c4 <_Balloc>
 8008c56:	1e02      	subs	r2, r0, #0
 8008c58:	d103      	bne.n	8008c62 <__mdiff+0x5e>
 8008c5a:	2190      	movs	r1, #144	; 0x90
 8008c5c:	4b32      	ldr	r3, [pc, #200]	; (8008d28 <__mdiff+0x124>)
 8008c5e:	0089      	lsls	r1, r1, #2
 8008c60:	e7e3      	b.n	8008c2a <__mdiff+0x26>
 8008c62:	9b01      	ldr	r3, [sp, #4]
 8008c64:	2700      	movs	r7, #0
 8008c66:	60c3      	str	r3, [r0, #12]
 8008c68:	6920      	ldr	r0, [r4, #16]
 8008c6a:	3414      	adds	r4, #20
 8008c6c:	9401      	str	r4, [sp, #4]
 8008c6e:	9b01      	ldr	r3, [sp, #4]
 8008c70:	0084      	lsls	r4, r0, #2
 8008c72:	191b      	adds	r3, r3, r4
 8008c74:	0034      	movs	r4, r6
 8008c76:	9302      	str	r3, [sp, #8]
 8008c78:	6933      	ldr	r3, [r6, #16]
 8008c7a:	3414      	adds	r4, #20
 8008c7c:	0099      	lsls	r1, r3, #2
 8008c7e:	1863      	adds	r3, r4, r1
 8008c80:	9303      	str	r3, [sp, #12]
 8008c82:	0013      	movs	r3, r2
 8008c84:	3314      	adds	r3, #20
 8008c86:	469c      	mov	ip, r3
 8008c88:	9305      	str	r3, [sp, #20]
 8008c8a:	9b01      	ldr	r3, [sp, #4]
 8008c8c:	9304      	str	r3, [sp, #16]
 8008c8e:	9b04      	ldr	r3, [sp, #16]
 8008c90:	cc02      	ldmia	r4!, {r1}
 8008c92:	cb20      	ldmia	r3!, {r5}
 8008c94:	9304      	str	r3, [sp, #16]
 8008c96:	b2ab      	uxth	r3, r5
 8008c98:	19df      	adds	r7, r3, r7
 8008c9a:	b28b      	uxth	r3, r1
 8008c9c:	1afb      	subs	r3, r7, r3
 8008c9e:	0c09      	lsrs	r1, r1, #16
 8008ca0:	0c2d      	lsrs	r5, r5, #16
 8008ca2:	1a6d      	subs	r5, r5, r1
 8008ca4:	1419      	asrs	r1, r3, #16
 8008ca6:	186d      	adds	r5, r5, r1
 8008ca8:	4661      	mov	r1, ip
 8008caa:	142f      	asrs	r7, r5, #16
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	042d      	lsls	r5, r5, #16
 8008cb0:	432b      	orrs	r3, r5
 8008cb2:	c108      	stmia	r1!, {r3}
 8008cb4:	9b03      	ldr	r3, [sp, #12]
 8008cb6:	468c      	mov	ip, r1
 8008cb8:	42a3      	cmp	r3, r4
 8008cba:	d8e8      	bhi.n	8008c8e <__mdiff+0x8a>
 8008cbc:	0031      	movs	r1, r6
 8008cbe:	9c03      	ldr	r4, [sp, #12]
 8008cc0:	3115      	adds	r1, #21
 8008cc2:	2304      	movs	r3, #4
 8008cc4:	428c      	cmp	r4, r1
 8008cc6:	d304      	bcc.n	8008cd2 <__mdiff+0xce>
 8008cc8:	1ba3      	subs	r3, r4, r6
 8008cca:	3b15      	subs	r3, #21
 8008ccc:	089b      	lsrs	r3, r3, #2
 8008cce:	3301      	adds	r3, #1
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	9901      	ldr	r1, [sp, #4]
 8008cd4:	18cc      	adds	r4, r1, r3
 8008cd6:	9905      	ldr	r1, [sp, #20]
 8008cd8:	0026      	movs	r6, r4
 8008cda:	18cb      	adds	r3, r1, r3
 8008cdc:	469c      	mov	ip, r3
 8008cde:	9902      	ldr	r1, [sp, #8]
 8008ce0:	428e      	cmp	r6, r1
 8008ce2:	d310      	bcc.n	8008d06 <__mdiff+0x102>
 8008ce4:	9e02      	ldr	r6, [sp, #8]
 8008ce6:	1ee1      	subs	r1, r4, #3
 8008ce8:	2500      	movs	r5, #0
 8008cea:	428e      	cmp	r6, r1
 8008cec:	d304      	bcc.n	8008cf8 <__mdiff+0xf4>
 8008cee:	0031      	movs	r1, r6
 8008cf0:	3103      	adds	r1, #3
 8008cf2:	1b0c      	subs	r4, r1, r4
 8008cf4:	08a4      	lsrs	r4, r4, #2
 8008cf6:	00a5      	lsls	r5, r4, #2
 8008cf8:	195b      	adds	r3, r3, r5
 8008cfa:	3b04      	subs	r3, #4
 8008cfc:	6819      	ldr	r1, [r3, #0]
 8008cfe:	2900      	cmp	r1, #0
 8008d00:	d00f      	beq.n	8008d22 <__mdiff+0x11e>
 8008d02:	6110      	str	r0, [r2, #16]
 8008d04:	e797      	b.n	8008c36 <__mdiff+0x32>
 8008d06:	ce02      	ldmia	r6!, {r1}
 8008d08:	b28d      	uxth	r5, r1
 8008d0a:	19ed      	adds	r5, r5, r7
 8008d0c:	0c0f      	lsrs	r7, r1, #16
 8008d0e:	1429      	asrs	r1, r5, #16
 8008d10:	1879      	adds	r1, r7, r1
 8008d12:	140f      	asrs	r7, r1, #16
 8008d14:	b2ad      	uxth	r5, r5
 8008d16:	0409      	lsls	r1, r1, #16
 8008d18:	430d      	orrs	r5, r1
 8008d1a:	4661      	mov	r1, ip
 8008d1c:	c120      	stmia	r1!, {r5}
 8008d1e:	468c      	mov	ip, r1
 8008d20:	e7dd      	b.n	8008cde <__mdiff+0xda>
 8008d22:	3801      	subs	r0, #1
 8008d24:	e7e9      	b.n	8008cfa <__mdiff+0xf6>
 8008d26:	46c0      	nop			; (mov r8, r8)
 8008d28:	0800a1f3 	.word	0x0800a1f3
 8008d2c:	00000232 	.word	0x00000232
 8008d30:	0800a204 	.word	0x0800a204

08008d34 <__d2b>:
 8008d34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d36:	2101      	movs	r1, #1
 8008d38:	0014      	movs	r4, r2
 8008d3a:	001e      	movs	r6, r3
 8008d3c:	9f08      	ldr	r7, [sp, #32]
 8008d3e:	f7ff fcc1 	bl	80086c4 <_Balloc>
 8008d42:	1e05      	subs	r5, r0, #0
 8008d44:	d105      	bne.n	8008d52 <__d2b+0x1e>
 8008d46:	0002      	movs	r2, r0
 8008d48:	4b26      	ldr	r3, [pc, #152]	; (8008de4 <__d2b+0xb0>)
 8008d4a:	4927      	ldr	r1, [pc, #156]	; (8008de8 <__d2b+0xb4>)
 8008d4c:	4827      	ldr	r0, [pc, #156]	; (8008dec <__d2b+0xb8>)
 8008d4e:	f000 fad7 	bl	8009300 <__assert_func>
 8008d52:	0333      	lsls	r3, r6, #12
 8008d54:	0076      	lsls	r6, r6, #1
 8008d56:	0b1b      	lsrs	r3, r3, #12
 8008d58:	0d76      	lsrs	r6, r6, #21
 8008d5a:	d124      	bne.n	8008da6 <__d2b+0x72>
 8008d5c:	9301      	str	r3, [sp, #4]
 8008d5e:	2c00      	cmp	r4, #0
 8008d60:	d027      	beq.n	8008db2 <__d2b+0x7e>
 8008d62:	4668      	mov	r0, sp
 8008d64:	9400      	str	r4, [sp, #0]
 8008d66:	f7ff fd73 	bl	8008850 <__lo0bits>
 8008d6a:	9c00      	ldr	r4, [sp, #0]
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	d01e      	beq.n	8008dae <__d2b+0x7a>
 8008d70:	9b01      	ldr	r3, [sp, #4]
 8008d72:	2120      	movs	r1, #32
 8008d74:	001a      	movs	r2, r3
 8008d76:	1a09      	subs	r1, r1, r0
 8008d78:	408a      	lsls	r2, r1
 8008d7a:	40c3      	lsrs	r3, r0
 8008d7c:	4322      	orrs	r2, r4
 8008d7e:	616a      	str	r2, [r5, #20]
 8008d80:	9301      	str	r3, [sp, #4]
 8008d82:	9c01      	ldr	r4, [sp, #4]
 8008d84:	61ac      	str	r4, [r5, #24]
 8008d86:	1e63      	subs	r3, r4, #1
 8008d88:	419c      	sbcs	r4, r3
 8008d8a:	3401      	adds	r4, #1
 8008d8c:	612c      	str	r4, [r5, #16]
 8008d8e:	2e00      	cmp	r6, #0
 8008d90:	d018      	beq.n	8008dc4 <__d2b+0x90>
 8008d92:	4b17      	ldr	r3, [pc, #92]	; (8008df0 <__d2b+0xbc>)
 8008d94:	18f6      	adds	r6, r6, r3
 8008d96:	2335      	movs	r3, #53	; 0x35
 8008d98:	1836      	adds	r6, r6, r0
 8008d9a:	1a18      	subs	r0, r3, r0
 8008d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d9e:	603e      	str	r6, [r7, #0]
 8008da0:	6018      	str	r0, [r3, #0]
 8008da2:	0028      	movs	r0, r5
 8008da4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008da6:	2280      	movs	r2, #128	; 0x80
 8008da8:	0352      	lsls	r2, r2, #13
 8008daa:	4313      	orrs	r3, r2
 8008dac:	e7d6      	b.n	8008d5c <__d2b+0x28>
 8008dae:	616c      	str	r4, [r5, #20]
 8008db0:	e7e7      	b.n	8008d82 <__d2b+0x4e>
 8008db2:	a801      	add	r0, sp, #4
 8008db4:	f7ff fd4c 	bl	8008850 <__lo0bits>
 8008db8:	2401      	movs	r4, #1
 8008dba:	9b01      	ldr	r3, [sp, #4]
 8008dbc:	612c      	str	r4, [r5, #16]
 8008dbe:	616b      	str	r3, [r5, #20]
 8008dc0:	3020      	adds	r0, #32
 8008dc2:	e7e4      	b.n	8008d8e <__d2b+0x5a>
 8008dc4:	4b0b      	ldr	r3, [pc, #44]	; (8008df4 <__d2b+0xc0>)
 8008dc6:	18c0      	adds	r0, r0, r3
 8008dc8:	4b0b      	ldr	r3, [pc, #44]	; (8008df8 <__d2b+0xc4>)
 8008dca:	6038      	str	r0, [r7, #0]
 8008dcc:	18e3      	adds	r3, r4, r3
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	18eb      	adds	r3, r5, r3
 8008dd2:	6958      	ldr	r0, [r3, #20]
 8008dd4:	f7ff fd22 	bl	800881c <__hi0bits>
 8008dd8:	0164      	lsls	r4, r4, #5
 8008dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ddc:	1a24      	subs	r4, r4, r0
 8008dde:	601c      	str	r4, [r3, #0]
 8008de0:	e7df      	b.n	8008da2 <__d2b+0x6e>
 8008de2:	46c0      	nop			; (mov r8, r8)
 8008de4:	0800a1f3 	.word	0x0800a1f3
 8008de8:	0000030a 	.word	0x0000030a
 8008dec:	0800a204 	.word	0x0800a204
 8008df0:	fffffbcd 	.word	0xfffffbcd
 8008df4:	fffffbce 	.word	0xfffffbce
 8008df8:	3fffffff 	.word	0x3fffffff

08008dfc <_calloc_r>:
 8008dfc:	b570      	push	{r4, r5, r6, lr}
 8008dfe:	0c13      	lsrs	r3, r2, #16
 8008e00:	0c0d      	lsrs	r5, r1, #16
 8008e02:	d11e      	bne.n	8008e42 <_calloc_r+0x46>
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d10c      	bne.n	8008e22 <_calloc_r+0x26>
 8008e08:	b289      	uxth	r1, r1
 8008e0a:	b294      	uxth	r4, r2
 8008e0c:	434c      	muls	r4, r1
 8008e0e:	0021      	movs	r1, r4
 8008e10:	f000 f88c 	bl	8008f2c <_malloc_r>
 8008e14:	1e05      	subs	r5, r0, #0
 8008e16:	d01b      	beq.n	8008e50 <_calloc_r+0x54>
 8008e18:	0022      	movs	r2, r4
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	f7fe f8e0 	bl	8006fe0 <memset>
 8008e20:	e016      	b.n	8008e50 <_calloc_r+0x54>
 8008e22:	1c1d      	adds	r5, r3, #0
 8008e24:	1c0b      	adds	r3, r1, #0
 8008e26:	b292      	uxth	r2, r2
 8008e28:	b289      	uxth	r1, r1
 8008e2a:	b29c      	uxth	r4, r3
 8008e2c:	4351      	muls	r1, r2
 8008e2e:	b2ab      	uxth	r3, r5
 8008e30:	4363      	muls	r3, r4
 8008e32:	0c0c      	lsrs	r4, r1, #16
 8008e34:	191c      	adds	r4, r3, r4
 8008e36:	0c22      	lsrs	r2, r4, #16
 8008e38:	d107      	bne.n	8008e4a <_calloc_r+0x4e>
 8008e3a:	0424      	lsls	r4, r4, #16
 8008e3c:	b289      	uxth	r1, r1
 8008e3e:	430c      	orrs	r4, r1
 8008e40:	e7e5      	b.n	8008e0e <_calloc_r+0x12>
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d101      	bne.n	8008e4a <_calloc_r+0x4e>
 8008e46:	1c13      	adds	r3, r2, #0
 8008e48:	e7ed      	b.n	8008e26 <_calloc_r+0x2a>
 8008e4a:	230c      	movs	r3, #12
 8008e4c:	2500      	movs	r5, #0
 8008e4e:	6003      	str	r3, [r0, #0]
 8008e50:	0028      	movs	r0, r5
 8008e52:	bd70      	pop	{r4, r5, r6, pc}

08008e54 <_free_r>:
 8008e54:	b570      	push	{r4, r5, r6, lr}
 8008e56:	0005      	movs	r5, r0
 8008e58:	2900      	cmp	r1, #0
 8008e5a:	d010      	beq.n	8008e7e <_free_r+0x2a>
 8008e5c:	1f0c      	subs	r4, r1, #4
 8008e5e:	6823      	ldr	r3, [r4, #0]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	da00      	bge.n	8008e66 <_free_r+0x12>
 8008e64:	18e4      	adds	r4, r4, r3
 8008e66:	0028      	movs	r0, r5
 8008e68:	f000 fa9e 	bl	80093a8 <__malloc_lock>
 8008e6c:	4a1d      	ldr	r2, [pc, #116]	; (8008ee4 <_free_r+0x90>)
 8008e6e:	6813      	ldr	r3, [r2, #0]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d105      	bne.n	8008e80 <_free_r+0x2c>
 8008e74:	6063      	str	r3, [r4, #4]
 8008e76:	6014      	str	r4, [r2, #0]
 8008e78:	0028      	movs	r0, r5
 8008e7a:	f000 fa9d 	bl	80093b8 <__malloc_unlock>
 8008e7e:	bd70      	pop	{r4, r5, r6, pc}
 8008e80:	42a3      	cmp	r3, r4
 8008e82:	d908      	bls.n	8008e96 <_free_r+0x42>
 8008e84:	6821      	ldr	r1, [r4, #0]
 8008e86:	1860      	adds	r0, r4, r1
 8008e88:	4283      	cmp	r3, r0
 8008e8a:	d1f3      	bne.n	8008e74 <_free_r+0x20>
 8008e8c:	6818      	ldr	r0, [r3, #0]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	1841      	adds	r1, r0, r1
 8008e92:	6021      	str	r1, [r4, #0]
 8008e94:	e7ee      	b.n	8008e74 <_free_r+0x20>
 8008e96:	001a      	movs	r2, r3
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d001      	beq.n	8008ea2 <_free_r+0x4e>
 8008e9e:	42a3      	cmp	r3, r4
 8008ea0:	d9f9      	bls.n	8008e96 <_free_r+0x42>
 8008ea2:	6811      	ldr	r1, [r2, #0]
 8008ea4:	1850      	adds	r0, r2, r1
 8008ea6:	42a0      	cmp	r0, r4
 8008ea8:	d10b      	bne.n	8008ec2 <_free_r+0x6e>
 8008eaa:	6820      	ldr	r0, [r4, #0]
 8008eac:	1809      	adds	r1, r1, r0
 8008eae:	1850      	adds	r0, r2, r1
 8008eb0:	6011      	str	r1, [r2, #0]
 8008eb2:	4283      	cmp	r3, r0
 8008eb4:	d1e0      	bne.n	8008e78 <_free_r+0x24>
 8008eb6:	6818      	ldr	r0, [r3, #0]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	1841      	adds	r1, r0, r1
 8008ebc:	6011      	str	r1, [r2, #0]
 8008ebe:	6053      	str	r3, [r2, #4]
 8008ec0:	e7da      	b.n	8008e78 <_free_r+0x24>
 8008ec2:	42a0      	cmp	r0, r4
 8008ec4:	d902      	bls.n	8008ecc <_free_r+0x78>
 8008ec6:	230c      	movs	r3, #12
 8008ec8:	602b      	str	r3, [r5, #0]
 8008eca:	e7d5      	b.n	8008e78 <_free_r+0x24>
 8008ecc:	6821      	ldr	r1, [r4, #0]
 8008ece:	1860      	adds	r0, r4, r1
 8008ed0:	4283      	cmp	r3, r0
 8008ed2:	d103      	bne.n	8008edc <_free_r+0x88>
 8008ed4:	6818      	ldr	r0, [r3, #0]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	1841      	adds	r1, r0, r1
 8008eda:	6021      	str	r1, [r4, #0]
 8008edc:	6063      	str	r3, [r4, #4]
 8008ede:	6054      	str	r4, [r2, #4]
 8008ee0:	e7ca      	b.n	8008e78 <_free_r+0x24>
 8008ee2:	46c0      	nop			; (mov r8, r8)
 8008ee4:	2000059c 	.word	0x2000059c

08008ee8 <sbrk_aligned>:
 8008ee8:	b570      	push	{r4, r5, r6, lr}
 8008eea:	4e0f      	ldr	r6, [pc, #60]	; (8008f28 <sbrk_aligned+0x40>)
 8008eec:	000d      	movs	r5, r1
 8008eee:	6831      	ldr	r1, [r6, #0]
 8008ef0:	0004      	movs	r4, r0
 8008ef2:	2900      	cmp	r1, #0
 8008ef4:	d102      	bne.n	8008efc <sbrk_aligned+0x14>
 8008ef6:	f000 f9f1 	bl	80092dc <_sbrk_r>
 8008efa:	6030      	str	r0, [r6, #0]
 8008efc:	0029      	movs	r1, r5
 8008efe:	0020      	movs	r0, r4
 8008f00:	f000 f9ec 	bl	80092dc <_sbrk_r>
 8008f04:	1c43      	adds	r3, r0, #1
 8008f06:	d00a      	beq.n	8008f1e <sbrk_aligned+0x36>
 8008f08:	2303      	movs	r3, #3
 8008f0a:	1cc5      	adds	r5, r0, #3
 8008f0c:	439d      	bics	r5, r3
 8008f0e:	42a8      	cmp	r0, r5
 8008f10:	d007      	beq.n	8008f22 <sbrk_aligned+0x3a>
 8008f12:	1a29      	subs	r1, r5, r0
 8008f14:	0020      	movs	r0, r4
 8008f16:	f000 f9e1 	bl	80092dc <_sbrk_r>
 8008f1a:	1c43      	adds	r3, r0, #1
 8008f1c:	d101      	bne.n	8008f22 <sbrk_aligned+0x3a>
 8008f1e:	2501      	movs	r5, #1
 8008f20:	426d      	negs	r5, r5
 8008f22:	0028      	movs	r0, r5
 8008f24:	bd70      	pop	{r4, r5, r6, pc}
 8008f26:	46c0      	nop			; (mov r8, r8)
 8008f28:	200005a0 	.word	0x200005a0

08008f2c <_malloc_r>:
 8008f2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f2e:	2203      	movs	r2, #3
 8008f30:	1ccb      	adds	r3, r1, #3
 8008f32:	4393      	bics	r3, r2
 8008f34:	3308      	adds	r3, #8
 8008f36:	0006      	movs	r6, r0
 8008f38:	001f      	movs	r7, r3
 8008f3a:	2b0c      	cmp	r3, #12
 8008f3c:	d232      	bcs.n	8008fa4 <_malloc_r+0x78>
 8008f3e:	270c      	movs	r7, #12
 8008f40:	42b9      	cmp	r1, r7
 8008f42:	d831      	bhi.n	8008fa8 <_malloc_r+0x7c>
 8008f44:	0030      	movs	r0, r6
 8008f46:	f000 fa2f 	bl	80093a8 <__malloc_lock>
 8008f4a:	4d32      	ldr	r5, [pc, #200]	; (8009014 <_malloc_r+0xe8>)
 8008f4c:	682b      	ldr	r3, [r5, #0]
 8008f4e:	001c      	movs	r4, r3
 8008f50:	2c00      	cmp	r4, #0
 8008f52:	d12e      	bne.n	8008fb2 <_malloc_r+0x86>
 8008f54:	0039      	movs	r1, r7
 8008f56:	0030      	movs	r0, r6
 8008f58:	f7ff ffc6 	bl	8008ee8 <sbrk_aligned>
 8008f5c:	0004      	movs	r4, r0
 8008f5e:	1c43      	adds	r3, r0, #1
 8008f60:	d11e      	bne.n	8008fa0 <_malloc_r+0x74>
 8008f62:	682c      	ldr	r4, [r5, #0]
 8008f64:	0025      	movs	r5, r4
 8008f66:	2d00      	cmp	r5, #0
 8008f68:	d14a      	bne.n	8009000 <_malloc_r+0xd4>
 8008f6a:	6823      	ldr	r3, [r4, #0]
 8008f6c:	0029      	movs	r1, r5
 8008f6e:	18e3      	adds	r3, r4, r3
 8008f70:	0030      	movs	r0, r6
 8008f72:	9301      	str	r3, [sp, #4]
 8008f74:	f000 f9b2 	bl	80092dc <_sbrk_r>
 8008f78:	9b01      	ldr	r3, [sp, #4]
 8008f7a:	4283      	cmp	r3, r0
 8008f7c:	d143      	bne.n	8009006 <_malloc_r+0xda>
 8008f7e:	6823      	ldr	r3, [r4, #0]
 8008f80:	3703      	adds	r7, #3
 8008f82:	1aff      	subs	r7, r7, r3
 8008f84:	2303      	movs	r3, #3
 8008f86:	439f      	bics	r7, r3
 8008f88:	3708      	adds	r7, #8
 8008f8a:	2f0c      	cmp	r7, #12
 8008f8c:	d200      	bcs.n	8008f90 <_malloc_r+0x64>
 8008f8e:	270c      	movs	r7, #12
 8008f90:	0039      	movs	r1, r7
 8008f92:	0030      	movs	r0, r6
 8008f94:	f7ff ffa8 	bl	8008ee8 <sbrk_aligned>
 8008f98:	1c43      	adds	r3, r0, #1
 8008f9a:	d034      	beq.n	8009006 <_malloc_r+0xda>
 8008f9c:	6823      	ldr	r3, [r4, #0]
 8008f9e:	19df      	adds	r7, r3, r7
 8008fa0:	6027      	str	r7, [r4, #0]
 8008fa2:	e013      	b.n	8008fcc <_malloc_r+0xa0>
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	dacb      	bge.n	8008f40 <_malloc_r+0x14>
 8008fa8:	230c      	movs	r3, #12
 8008faa:	2500      	movs	r5, #0
 8008fac:	6033      	str	r3, [r6, #0]
 8008fae:	0028      	movs	r0, r5
 8008fb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008fb2:	6822      	ldr	r2, [r4, #0]
 8008fb4:	1bd1      	subs	r1, r2, r7
 8008fb6:	d420      	bmi.n	8008ffa <_malloc_r+0xce>
 8008fb8:	290b      	cmp	r1, #11
 8008fba:	d917      	bls.n	8008fec <_malloc_r+0xc0>
 8008fbc:	19e2      	adds	r2, r4, r7
 8008fbe:	6027      	str	r7, [r4, #0]
 8008fc0:	42a3      	cmp	r3, r4
 8008fc2:	d111      	bne.n	8008fe8 <_malloc_r+0xbc>
 8008fc4:	602a      	str	r2, [r5, #0]
 8008fc6:	6863      	ldr	r3, [r4, #4]
 8008fc8:	6011      	str	r1, [r2, #0]
 8008fca:	6053      	str	r3, [r2, #4]
 8008fcc:	0030      	movs	r0, r6
 8008fce:	0025      	movs	r5, r4
 8008fd0:	f000 f9f2 	bl	80093b8 <__malloc_unlock>
 8008fd4:	2207      	movs	r2, #7
 8008fd6:	350b      	adds	r5, #11
 8008fd8:	1d23      	adds	r3, r4, #4
 8008fda:	4395      	bics	r5, r2
 8008fdc:	1aea      	subs	r2, r5, r3
 8008fde:	429d      	cmp	r5, r3
 8008fe0:	d0e5      	beq.n	8008fae <_malloc_r+0x82>
 8008fe2:	1b5b      	subs	r3, r3, r5
 8008fe4:	50a3      	str	r3, [r4, r2]
 8008fe6:	e7e2      	b.n	8008fae <_malloc_r+0x82>
 8008fe8:	605a      	str	r2, [r3, #4]
 8008fea:	e7ec      	b.n	8008fc6 <_malloc_r+0x9a>
 8008fec:	6862      	ldr	r2, [r4, #4]
 8008fee:	42a3      	cmp	r3, r4
 8008ff0:	d101      	bne.n	8008ff6 <_malloc_r+0xca>
 8008ff2:	602a      	str	r2, [r5, #0]
 8008ff4:	e7ea      	b.n	8008fcc <_malloc_r+0xa0>
 8008ff6:	605a      	str	r2, [r3, #4]
 8008ff8:	e7e8      	b.n	8008fcc <_malloc_r+0xa0>
 8008ffa:	0023      	movs	r3, r4
 8008ffc:	6864      	ldr	r4, [r4, #4]
 8008ffe:	e7a7      	b.n	8008f50 <_malloc_r+0x24>
 8009000:	002c      	movs	r4, r5
 8009002:	686d      	ldr	r5, [r5, #4]
 8009004:	e7af      	b.n	8008f66 <_malloc_r+0x3a>
 8009006:	230c      	movs	r3, #12
 8009008:	0030      	movs	r0, r6
 800900a:	6033      	str	r3, [r6, #0]
 800900c:	f000 f9d4 	bl	80093b8 <__malloc_unlock>
 8009010:	e7cd      	b.n	8008fae <_malloc_r+0x82>
 8009012:	46c0      	nop			; (mov r8, r8)
 8009014:	2000059c 	.word	0x2000059c

08009018 <__ssputs_r>:
 8009018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800901a:	688e      	ldr	r6, [r1, #8]
 800901c:	b085      	sub	sp, #20
 800901e:	0007      	movs	r7, r0
 8009020:	000c      	movs	r4, r1
 8009022:	9203      	str	r2, [sp, #12]
 8009024:	9301      	str	r3, [sp, #4]
 8009026:	429e      	cmp	r6, r3
 8009028:	d83c      	bhi.n	80090a4 <__ssputs_r+0x8c>
 800902a:	2390      	movs	r3, #144	; 0x90
 800902c:	898a      	ldrh	r2, [r1, #12]
 800902e:	00db      	lsls	r3, r3, #3
 8009030:	421a      	tst	r2, r3
 8009032:	d034      	beq.n	800909e <__ssputs_r+0x86>
 8009034:	6909      	ldr	r1, [r1, #16]
 8009036:	6823      	ldr	r3, [r4, #0]
 8009038:	6960      	ldr	r0, [r4, #20]
 800903a:	1a5b      	subs	r3, r3, r1
 800903c:	9302      	str	r3, [sp, #8]
 800903e:	2303      	movs	r3, #3
 8009040:	4343      	muls	r3, r0
 8009042:	0fdd      	lsrs	r5, r3, #31
 8009044:	18ed      	adds	r5, r5, r3
 8009046:	9b01      	ldr	r3, [sp, #4]
 8009048:	9802      	ldr	r0, [sp, #8]
 800904a:	3301      	adds	r3, #1
 800904c:	181b      	adds	r3, r3, r0
 800904e:	106d      	asrs	r5, r5, #1
 8009050:	42ab      	cmp	r3, r5
 8009052:	d900      	bls.n	8009056 <__ssputs_r+0x3e>
 8009054:	001d      	movs	r5, r3
 8009056:	0553      	lsls	r3, r2, #21
 8009058:	d532      	bpl.n	80090c0 <__ssputs_r+0xa8>
 800905a:	0029      	movs	r1, r5
 800905c:	0038      	movs	r0, r7
 800905e:	f7ff ff65 	bl	8008f2c <_malloc_r>
 8009062:	1e06      	subs	r6, r0, #0
 8009064:	d109      	bne.n	800907a <__ssputs_r+0x62>
 8009066:	230c      	movs	r3, #12
 8009068:	603b      	str	r3, [r7, #0]
 800906a:	2340      	movs	r3, #64	; 0x40
 800906c:	2001      	movs	r0, #1
 800906e:	89a2      	ldrh	r2, [r4, #12]
 8009070:	4240      	negs	r0, r0
 8009072:	4313      	orrs	r3, r2
 8009074:	81a3      	strh	r3, [r4, #12]
 8009076:	b005      	add	sp, #20
 8009078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800907a:	9a02      	ldr	r2, [sp, #8]
 800907c:	6921      	ldr	r1, [r4, #16]
 800907e:	f7ff fb18 	bl	80086b2 <memcpy>
 8009082:	89a3      	ldrh	r3, [r4, #12]
 8009084:	4a14      	ldr	r2, [pc, #80]	; (80090d8 <__ssputs_r+0xc0>)
 8009086:	401a      	ands	r2, r3
 8009088:	2380      	movs	r3, #128	; 0x80
 800908a:	4313      	orrs	r3, r2
 800908c:	81a3      	strh	r3, [r4, #12]
 800908e:	9b02      	ldr	r3, [sp, #8]
 8009090:	6126      	str	r6, [r4, #16]
 8009092:	18f6      	adds	r6, r6, r3
 8009094:	6026      	str	r6, [r4, #0]
 8009096:	6165      	str	r5, [r4, #20]
 8009098:	9e01      	ldr	r6, [sp, #4]
 800909a:	1aed      	subs	r5, r5, r3
 800909c:	60a5      	str	r5, [r4, #8]
 800909e:	9b01      	ldr	r3, [sp, #4]
 80090a0:	429e      	cmp	r6, r3
 80090a2:	d900      	bls.n	80090a6 <__ssputs_r+0x8e>
 80090a4:	9e01      	ldr	r6, [sp, #4]
 80090a6:	0032      	movs	r2, r6
 80090a8:	9903      	ldr	r1, [sp, #12]
 80090aa:	6820      	ldr	r0, [r4, #0]
 80090ac:	f000 f968 	bl	8009380 <memmove>
 80090b0:	68a3      	ldr	r3, [r4, #8]
 80090b2:	2000      	movs	r0, #0
 80090b4:	1b9b      	subs	r3, r3, r6
 80090b6:	60a3      	str	r3, [r4, #8]
 80090b8:	6823      	ldr	r3, [r4, #0]
 80090ba:	199e      	adds	r6, r3, r6
 80090bc:	6026      	str	r6, [r4, #0]
 80090be:	e7da      	b.n	8009076 <__ssputs_r+0x5e>
 80090c0:	002a      	movs	r2, r5
 80090c2:	0038      	movs	r0, r7
 80090c4:	f000 f980 	bl	80093c8 <_realloc_r>
 80090c8:	1e06      	subs	r6, r0, #0
 80090ca:	d1e0      	bne.n	800908e <__ssputs_r+0x76>
 80090cc:	0038      	movs	r0, r7
 80090ce:	6921      	ldr	r1, [r4, #16]
 80090d0:	f7ff fec0 	bl	8008e54 <_free_r>
 80090d4:	e7c7      	b.n	8009066 <__ssputs_r+0x4e>
 80090d6:	46c0      	nop			; (mov r8, r8)
 80090d8:	fffffb7f 	.word	0xfffffb7f

080090dc <_svfiprintf_r>:
 80090dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090de:	b0a1      	sub	sp, #132	; 0x84
 80090e0:	9003      	str	r0, [sp, #12]
 80090e2:	001d      	movs	r5, r3
 80090e4:	898b      	ldrh	r3, [r1, #12]
 80090e6:	000f      	movs	r7, r1
 80090e8:	0016      	movs	r6, r2
 80090ea:	061b      	lsls	r3, r3, #24
 80090ec:	d511      	bpl.n	8009112 <_svfiprintf_r+0x36>
 80090ee:	690b      	ldr	r3, [r1, #16]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d10e      	bne.n	8009112 <_svfiprintf_r+0x36>
 80090f4:	2140      	movs	r1, #64	; 0x40
 80090f6:	f7ff ff19 	bl	8008f2c <_malloc_r>
 80090fa:	6038      	str	r0, [r7, #0]
 80090fc:	6138      	str	r0, [r7, #16]
 80090fe:	2800      	cmp	r0, #0
 8009100:	d105      	bne.n	800910e <_svfiprintf_r+0x32>
 8009102:	230c      	movs	r3, #12
 8009104:	9a03      	ldr	r2, [sp, #12]
 8009106:	3801      	subs	r0, #1
 8009108:	6013      	str	r3, [r2, #0]
 800910a:	b021      	add	sp, #132	; 0x84
 800910c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800910e:	2340      	movs	r3, #64	; 0x40
 8009110:	617b      	str	r3, [r7, #20]
 8009112:	2300      	movs	r3, #0
 8009114:	ac08      	add	r4, sp, #32
 8009116:	6163      	str	r3, [r4, #20]
 8009118:	3320      	adds	r3, #32
 800911a:	7663      	strb	r3, [r4, #25]
 800911c:	3310      	adds	r3, #16
 800911e:	76a3      	strb	r3, [r4, #26]
 8009120:	9507      	str	r5, [sp, #28]
 8009122:	0035      	movs	r5, r6
 8009124:	782b      	ldrb	r3, [r5, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d001      	beq.n	800912e <_svfiprintf_r+0x52>
 800912a:	2b25      	cmp	r3, #37	; 0x25
 800912c:	d147      	bne.n	80091be <_svfiprintf_r+0xe2>
 800912e:	1bab      	subs	r3, r5, r6
 8009130:	9305      	str	r3, [sp, #20]
 8009132:	42b5      	cmp	r5, r6
 8009134:	d00c      	beq.n	8009150 <_svfiprintf_r+0x74>
 8009136:	0032      	movs	r2, r6
 8009138:	0039      	movs	r1, r7
 800913a:	9803      	ldr	r0, [sp, #12]
 800913c:	f7ff ff6c 	bl	8009018 <__ssputs_r>
 8009140:	1c43      	adds	r3, r0, #1
 8009142:	d100      	bne.n	8009146 <_svfiprintf_r+0x6a>
 8009144:	e0ae      	b.n	80092a4 <_svfiprintf_r+0x1c8>
 8009146:	6962      	ldr	r2, [r4, #20]
 8009148:	9b05      	ldr	r3, [sp, #20]
 800914a:	4694      	mov	ip, r2
 800914c:	4463      	add	r3, ip
 800914e:	6163      	str	r3, [r4, #20]
 8009150:	782b      	ldrb	r3, [r5, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d100      	bne.n	8009158 <_svfiprintf_r+0x7c>
 8009156:	e0a5      	b.n	80092a4 <_svfiprintf_r+0x1c8>
 8009158:	2201      	movs	r2, #1
 800915a:	2300      	movs	r3, #0
 800915c:	4252      	negs	r2, r2
 800915e:	6062      	str	r2, [r4, #4]
 8009160:	a904      	add	r1, sp, #16
 8009162:	3254      	adds	r2, #84	; 0x54
 8009164:	1852      	adds	r2, r2, r1
 8009166:	1c6e      	adds	r6, r5, #1
 8009168:	6023      	str	r3, [r4, #0]
 800916a:	60e3      	str	r3, [r4, #12]
 800916c:	60a3      	str	r3, [r4, #8]
 800916e:	7013      	strb	r3, [r2, #0]
 8009170:	65a3      	str	r3, [r4, #88]	; 0x58
 8009172:	2205      	movs	r2, #5
 8009174:	7831      	ldrb	r1, [r6, #0]
 8009176:	4854      	ldr	r0, [pc, #336]	; (80092c8 <_svfiprintf_r+0x1ec>)
 8009178:	f7ff fa90 	bl	800869c <memchr>
 800917c:	1c75      	adds	r5, r6, #1
 800917e:	2800      	cmp	r0, #0
 8009180:	d11f      	bne.n	80091c2 <_svfiprintf_r+0xe6>
 8009182:	6822      	ldr	r2, [r4, #0]
 8009184:	06d3      	lsls	r3, r2, #27
 8009186:	d504      	bpl.n	8009192 <_svfiprintf_r+0xb6>
 8009188:	2353      	movs	r3, #83	; 0x53
 800918a:	a904      	add	r1, sp, #16
 800918c:	185b      	adds	r3, r3, r1
 800918e:	2120      	movs	r1, #32
 8009190:	7019      	strb	r1, [r3, #0]
 8009192:	0713      	lsls	r3, r2, #28
 8009194:	d504      	bpl.n	80091a0 <_svfiprintf_r+0xc4>
 8009196:	2353      	movs	r3, #83	; 0x53
 8009198:	a904      	add	r1, sp, #16
 800919a:	185b      	adds	r3, r3, r1
 800919c:	212b      	movs	r1, #43	; 0x2b
 800919e:	7019      	strb	r1, [r3, #0]
 80091a0:	7833      	ldrb	r3, [r6, #0]
 80091a2:	2b2a      	cmp	r3, #42	; 0x2a
 80091a4:	d016      	beq.n	80091d4 <_svfiprintf_r+0xf8>
 80091a6:	0035      	movs	r5, r6
 80091a8:	2100      	movs	r1, #0
 80091aa:	200a      	movs	r0, #10
 80091ac:	68e3      	ldr	r3, [r4, #12]
 80091ae:	782a      	ldrb	r2, [r5, #0]
 80091b0:	1c6e      	adds	r6, r5, #1
 80091b2:	3a30      	subs	r2, #48	; 0x30
 80091b4:	2a09      	cmp	r2, #9
 80091b6:	d94e      	bls.n	8009256 <_svfiprintf_r+0x17a>
 80091b8:	2900      	cmp	r1, #0
 80091ba:	d111      	bne.n	80091e0 <_svfiprintf_r+0x104>
 80091bc:	e017      	b.n	80091ee <_svfiprintf_r+0x112>
 80091be:	3501      	adds	r5, #1
 80091c0:	e7b0      	b.n	8009124 <_svfiprintf_r+0x48>
 80091c2:	4b41      	ldr	r3, [pc, #260]	; (80092c8 <_svfiprintf_r+0x1ec>)
 80091c4:	6822      	ldr	r2, [r4, #0]
 80091c6:	1ac0      	subs	r0, r0, r3
 80091c8:	2301      	movs	r3, #1
 80091ca:	4083      	lsls	r3, r0
 80091cc:	4313      	orrs	r3, r2
 80091ce:	002e      	movs	r6, r5
 80091d0:	6023      	str	r3, [r4, #0]
 80091d2:	e7ce      	b.n	8009172 <_svfiprintf_r+0x96>
 80091d4:	9b07      	ldr	r3, [sp, #28]
 80091d6:	1d19      	adds	r1, r3, #4
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	9107      	str	r1, [sp, #28]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	db01      	blt.n	80091e4 <_svfiprintf_r+0x108>
 80091e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80091e2:	e004      	b.n	80091ee <_svfiprintf_r+0x112>
 80091e4:	425b      	negs	r3, r3
 80091e6:	60e3      	str	r3, [r4, #12]
 80091e8:	2302      	movs	r3, #2
 80091ea:	4313      	orrs	r3, r2
 80091ec:	6023      	str	r3, [r4, #0]
 80091ee:	782b      	ldrb	r3, [r5, #0]
 80091f0:	2b2e      	cmp	r3, #46	; 0x2e
 80091f2:	d10a      	bne.n	800920a <_svfiprintf_r+0x12e>
 80091f4:	786b      	ldrb	r3, [r5, #1]
 80091f6:	2b2a      	cmp	r3, #42	; 0x2a
 80091f8:	d135      	bne.n	8009266 <_svfiprintf_r+0x18a>
 80091fa:	9b07      	ldr	r3, [sp, #28]
 80091fc:	3502      	adds	r5, #2
 80091fe:	1d1a      	adds	r2, r3, #4
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	9207      	str	r2, [sp, #28]
 8009204:	2b00      	cmp	r3, #0
 8009206:	db2b      	blt.n	8009260 <_svfiprintf_r+0x184>
 8009208:	9309      	str	r3, [sp, #36]	; 0x24
 800920a:	4e30      	ldr	r6, [pc, #192]	; (80092cc <_svfiprintf_r+0x1f0>)
 800920c:	2203      	movs	r2, #3
 800920e:	0030      	movs	r0, r6
 8009210:	7829      	ldrb	r1, [r5, #0]
 8009212:	f7ff fa43 	bl	800869c <memchr>
 8009216:	2800      	cmp	r0, #0
 8009218:	d006      	beq.n	8009228 <_svfiprintf_r+0x14c>
 800921a:	2340      	movs	r3, #64	; 0x40
 800921c:	1b80      	subs	r0, r0, r6
 800921e:	4083      	lsls	r3, r0
 8009220:	6822      	ldr	r2, [r4, #0]
 8009222:	3501      	adds	r5, #1
 8009224:	4313      	orrs	r3, r2
 8009226:	6023      	str	r3, [r4, #0]
 8009228:	7829      	ldrb	r1, [r5, #0]
 800922a:	2206      	movs	r2, #6
 800922c:	4828      	ldr	r0, [pc, #160]	; (80092d0 <_svfiprintf_r+0x1f4>)
 800922e:	1c6e      	adds	r6, r5, #1
 8009230:	7621      	strb	r1, [r4, #24]
 8009232:	f7ff fa33 	bl	800869c <memchr>
 8009236:	2800      	cmp	r0, #0
 8009238:	d03c      	beq.n	80092b4 <_svfiprintf_r+0x1d8>
 800923a:	4b26      	ldr	r3, [pc, #152]	; (80092d4 <_svfiprintf_r+0x1f8>)
 800923c:	2b00      	cmp	r3, #0
 800923e:	d125      	bne.n	800928c <_svfiprintf_r+0x1b0>
 8009240:	2207      	movs	r2, #7
 8009242:	9b07      	ldr	r3, [sp, #28]
 8009244:	3307      	adds	r3, #7
 8009246:	4393      	bics	r3, r2
 8009248:	3308      	adds	r3, #8
 800924a:	9307      	str	r3, [sp, #28]
 800924c:	6963      	ldr	r3, [r4, #20]
 800924e:	9a04      	ldr	r2, [sp, #16]
 8009250:	189b      	adds	r3, r3, r2
 8009252:	6163      	str	r3, [r4, #20]
 8009254:	e765      	b.n	8009122 <_svfiprintf_r+0x46>
 8009256:	4343      	muls	r3, r0
 8009258:	0035      	movs	r5, r6
 800925a:	2101      	movs	r1, #1
 800925c:	189b      	adds	r3, r3, r2
 800925e:	e7a6      	b.n	80091ae <_svfiprintf_r+0xd2>
 8009260:	2301      	movs	r3, #1
 8009262:	425b      	negs	r3, r3
 8009264:	e7d0      	b.n	8009208 <_svfiprintf_r+0x12c>
 8009266:	2300      	movs	r3, #0
 8009268:	200a      	movs	r0, #10
 800926a:	001a      	movs	r2, r3
 800926c:	3501      	adds	r5, #1
 800926e:	6063      	str	r3, [r4, #4]
 8009270:	7829      	ldrb	r1, [r5, #0]
 8009272:	1c6e      	adds	r6, r5, #1
 8009274:	3930      	subs	r1, #48	; 0x30
 8009276:	2909      	cmp	r1, #9
 8009278:	d903      	bls.n	8009282 <_svfiprintf_r+0x1a6>
 800927a:	2b00      	cmp	r3, #0
 800927c:	d0c5      	beq.n	800920a <_svfiprintf_r+0x12e>
 800927e:	9209      	str	r2, [sp, #36]	; 0x24
 8009280:	e7c3      	b.n	800920a <_svfiprintf_r+0x12e>
 8009282:	4342      	muls	r2, r0
 8009284:	0035      	movs	r5, r6
 8009286:	2301      	movs	r3, #1
 8009288:	1852      	adds	r2, r2, r1
 800928a:	e7f1      	b.n	8009270 <_svfiprintf_r+0x194>
 800928c:	ab07      	add	r3, sp, #28
 800928e:	9300      	str	r3, [sp, #0]
 8009290:	003a      	movs	r2, r7
 8009292:	0021      	movs	r1, r4
 8009294:	4b10      	ldr	r3, [pc, #64]	; (80092d8 <_svfiprintf_r+0x1fc>)
 8009296:	9803      	ldr	r0, [sp, #12]
 8009298:	f7fd ff54 	bl	8007144 <_printf_float>
 800929c:	9004      	str	r0, [sp, #16]
 800929e:	9b04      	ldr	r3, [sp, #16]
 80092a0:	3301      	adds	r3, #1
 80092a2:	d1d3      	bne.n	800924c <_svfiprintf_r+0x170>
 80092a4:	89bb      	ldrh	r3, [r7, #12]
 80092a6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80092a8:	065b      	lsls	r3, r3, #25
 80092aa:	d400      	bmi.n	80092ae <_svfiprintf_r+0x1d2>
 80092ac:	e72d      	b.n	800910a <_svfiprintf_r+0x2e>
 80092ae:	2001      	movs	r0, #1
 80092b0:	4240      	negs	r0, r0
 80092b2:	e72a      	b.n	800910a <_svfiprintf_r+0x2e>
 80092b4:	ab07      	add	r3, sp, #28
 80092b6:	9300      	str	r3, [sp, #0]
 80092b8:	003a      	movs	r2, r7
 80092ba:	0021      	movs	r1, r4
 80092bc:	4b06      	ldr	r3, [pc, #24]	; (80092d8 <_svfiprintf_r+0x1fc>)
 80092be:	9803      	ldr	r0, [sp, #12]
 80092c0:	f7fe f9f2 	bl	80076a8 <_printf_i>
 80092c4:	e7ea      	b.n	800929c <_svfiprintf_r+0x1c0>
 80092c6:	46c0      	nop			; (mov r8, r8)
 80092c8:	0800a35c 	.word	0x0800a35c
 80092cc:	0800a362 	.word	0x0800a362
 80092d0:	0800a366 	.word	0x0800a366
 80092d4:	08007145 	.word	0x08007145
 80092d8:	08009019 	.word	0x08009019

080092dc <_sbrk_r>:
 80092dc:	2300      	movs	r3, #0
 80092de:	b570      	push	{r4, r5, r6, lr}
 80092e0:	4d06      	ldr	r5, [pc, #24]	; (80092fc <_sbrk_r+0x20>)
 80092e2:	0004      	movs	r4, r0
 80092e4:	0008      	movs	r0, r1
 80092e6:	602b      	str	r3, [r5, #0]
 80092e8:	f7fa fc62 	bl	8003bb0 <_sbrk>
 80092ec:	1c43      	adds	r3, r0, #1
 80092ee:	d103      	bne.n	80092f8 <_sbrk_r+0x1c>
 80092f0:	682b      	ldr	r3, [r5, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d000      	beq.n	80092f8 <_sbrk_r+0x1c>
 80092f6:	6023      	str	r3, [r4, #0]
 80092f8:	bd70      	pop	{r4, r5, r6, pc}
 80092fa:	46c0      	nop			; (mov r8, r8)
 80092fc:	200005a4 	.word	0x200005a4

08009300 <__assert_func>:
 8009300:	b530      	push	{r4, r5, lr}
 8009302:	0014      	movs	r4, r2
 8009304:	001a      	movs	r2, r3
 8009306:	4b09      	ldr	r3, [pc, #36]	; (800932c <__assert_func+0x2c>)
 8009308:	0005      	movs	r5, r0
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	b085      	sub	sp, #20
 800930e:	68d8      	ldr	r0, [r3, #12]
 8009310:	4b07      	ldr	r3, [pc, #28]	; (8009330 <__assert_func+0x30>)
 8009312:	2c00      	cmp	r4, #0
 8009314:	d101      	bne.n	800931a <__assert_func+0x1a>
 8009316:	4b07      	ldr	r3, [pc, #28]	; (8009334 <__assert_func+0x34>)
 8009318:	001c      	movs	r4, r3
 800931a:	9301      	str	r3, [sp, #4]
 800931c:	9100      	str	r1, [sp, #0]
 800931e:	002b      	movs	r3, r5
 8009320:	4905      	ldr	r1, [pc, #20]	; (8009338 <__assert_func+0x38>)
 8009322:	9402      	str	r4, [sp, #8]
 8009324:	f000 f80a 	bl	800933c <fiprintf>
 8009328:	f000 faba 	bl	80098a0 <abort>
 800932c:	2000000c 	.word	0x2000000c
 8009330:	0800a36d 	.word	0x0800a36d
 8009334:	0800a3a8 	.word	0x0800a3a8
 8009338:	0800a37a 	.word	0x0800a37a

0800933c <fiprintf>:
 800933c:	b40e      	push	{r1, r2, r3}
 800933e:	b503      	push	{r0, r1, lr}
 8009340:	0001      	movs	r1, r0
 8009342:	ab03      	add	r3, sp, #12
 8009344:	4804      	ldr	r0, [pc, #16]	; (8009358 <fiprintf+0x1c>)
 8009346:	cb04      	ldmia	r3!, {r2}
 8009348:	6800      	ldr	r0, [r0, #0]
 800934a:	9301      	str	r3, [sp, #4]
 800934c:	f000 f892 	bl	8009474 <_vfiprintf_r>
 8009350:	b002      	add	sp, #8
 8009352:	bc08      	pop	{r3}
 8009354:	b003      	add	sp, #12
 8009356:	4718      	bx	r3
 8009358:	2000000c 	.word	0x2000000c

0800935c <__ascii_mbtowc>:
 800935c:	b082      	sub	sp, #8
 800935e:	2900      	cmp	r1, #0
 8009360:	d100      	bne.n	8009364 <__ascii_mbtowc+0x8>
 8009362:	a901      	add	r1, sp, #4
 8009364:	1e10      	subs	r0, r2, #0
 8009366:	d006      	beq.n	8009376 <__ascii_mbtowc+0x1a>
 8009368:	2b00      	cmp	r3, #0
 800936a:	d006      	beq.n	800937a <__ascii_mbtowc+0x1e>
 800936c:	7813      	ldrb	r3, [r2, #0]
 800936e:	600b      	str	r3, [r1, #0]
 8009370:	7810      	ldrb	r0, [r2, #0]
 8009372:	1e43      	subs	r3, r0, #1
 8009374:	4198      	sbcs	r0, r3
 8009376:	b002      	add	sp, #8
 8009378:	4770      	bx	lr
 800937a:	2002      	movs	r0, #2
 800937c:	4240      	negs	r0, r0
 800937e:	e7fa      	b.n	8009376 <__ascii_mbtowc+0x1a>

08009380 <memmove>:
 8009380:	b510      	push	{r4, lr}
 8009382:	4288      	cmp	r0, r1
 8009384:	d902      	bls.n	800938c <memmove+0xc>
 8009386:	188b      	adds	r3, r1, r2
 8009388:	4298      	cmp	r0, r3
 800938a:	d303      	bcc.n	8009394 <memmove+0x14>
 800938c:	2300      	movs	r3, #0
 800938e:	e007      	b.n	80093a0 <memmove+0x20>
 8009390:	5c8b      	ldrb	r3, [r1, r2]
 8009392:	5483      	strb	r3, [r0, r2]
 8009394:	3a01      	subs	r2, #1
 8009396:	d2fb      	bcs.n	8009390 <memmove+0x10>
 8009398:	bd10      	pop	{r4, pc}
 800939a:	5ccc      	ldrb	r4, [r1, r3]
 800939c:	54c4      	strb	r4, [r0, r3]
 800939e:	3301      	adds	r3, #1
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d1fa      	bne.n	800939a <memmove+0x1a>
 80093a4:	e7f8      	b.n	8009398 <memmove+0x18>
	...

080093a8 <__malloc_lock>:
 80093a8:	b510      	push	{r4, lr}
 80093aa:	4802      	ldr	r0, [pc, #8]	; (80093b4 <__malloc_lock+0xc>)
 80093ac:	f000 fc4f 	bl	8009c4e <__retarget_lock_acquire_recursive>
 80093b0:	bd10      	pop	{r4, pc}
 80093b2:	46c0      	nop			; (mov r8, r8)
 80093b4:	200005a8 	.word	0x200005a8

080093b8 <__malloc_unlock>:
 80093b8:	b510      	push	{r4, lr}
 80093ba:	4802      	ldr	r0, [pc, #8]	; (80093c4 <__malloc_unlock+0xc>)
 80093bc:	f000 fc48 	bl	8009c50 <__retarget_lock_release_recursive>
 80093c0:	bd10      	pop	{r4, pc}
 80093c2:	46c0      	nop			; (mov r8, r8)
 80093c4:	200005a8 	.word	0x200005a8

080093c8 <_realloc_r>:
 80093c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093ca:	0007      	movs	r7, r0
 80093cc:	000e      	movs	r6, r1
 80093ce:	0014      	movs	r4, r2
 80093d0:	2900      	cmp	r1, #0
 80093d2:	d105      	bne.n	80093e0 <_realloc_r+0x18>
 80093d4:	0011      	movs	r1, r2
 80093d6:	f7ff fda9 	bl	8008f2c <_malloc_r>
 80093da:	0005      	movs	r5, r0
 80093dc:	0028      	movs	r0, r5
 80093de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80093e0:	2a00      	cmp	r2, #0
 80093e2:	d103      	bne.n	80093ec <_realloc_r+0x24>
 80093e4:	f7ff fd36 	bl	8008e54 <_free_r>
 80093e8:	0025      	movs	r5, r4
 80093ea:	e7f7      	b.n	80093dc <_realloc_r+0x14>
 80093ec:	f000 fc9e 	bl	8009d2c <_malloc_usable_size_r>
 80093f0:	9001      	str	r0, [sp, #4]
 80093f2:	4284      	cmp	r4, r0
 80093f4:	d803      	bhi.n	80093fe <_realloc_r+0x36>
 80093f6:	0035      	movs	r5, r6
 80093f8:	0843      	lsrs	r3, r0, #1
 80093fa:	42a3      	cmp	r3, r4
 80093fc:	d3ee      	bcc.n	80093dc <_realloc_r+0x14>
 80093fe:	0021      	movs	r1, r4
 8009400:	0038      	movs	r0, r7
 8009402:	f7ff fd93 	bl	8008f2c <_malloc_r>
 8009406:	1e05      	subs	r5, r0, #0
 8009408:	d0e8      	beq.n	80093dc <_realloc_r+0x14>
 800940a:	9b01      	ldr	r3, [sp, #4]
 800940c:	0022      	movs	r2, r4
 800940e:	429c      	cmp	r4, r3
 8009410:	d900      	bls.n	8009414 <_realloc_r+0x4c>
 8009412:	001a      	movs	r2, r3
 8009414:	0031      	movs	r1, r6
 8009416:	0028      	movs	r0, r5
 8009418:	f7ff f94b 	bl	80086b2 <memcpy>
 800941c:	0031      	movs	r1, r6
 800941e:	0038      	movs	r0, r7
 8009420:	f7ff fd18 	bl	8008e54 <_free_r>
 8009424:	e7da      	b.n	80093dc <_realloc_r+0x14>

08009426 <__sfputc_r>:
 8009426:	6893      	ldr	r3, [r2, #8]
 8009428:	b510      	push	{r4, lr}
 800942a:	3b01      	subs	r3, #1
 800942c:	6093      	str	r3, [r2, #8]
 800942e:	2b00      	cmp	r3, #0
 8009430:	da04      	bge.n	800943c <__sfputc_r+0x16>
 8009432:	6994      	ldr	r4, [r2, #24]
 8009434:	42a3      	cmp	r3, r4
 8009436:	db07      	blt.n	8009448 <__sfputc_r+0x22>
 8009438:	290a      	cmp	r1, #10
 800943a:	d005      	beq.n	8009448 <__sfputc_r+0x22>
 800943c:	6813      	ldr	r3, [r2, #0]
 800943e:	1c58      	adds	r0, r3, #1
 8009440:	6010      	str	r0, [r2, #0]
 8009442:	7019      	strb	r1, [r3, #0]
 8009444:	0008      	movs	r0, r1
 8009446:	bd10      	pop	{r4, pc}
 8009448:	f000 f94e 	bl	80096e8 <__swbuf_r>
 800944c:	0001      	movs	r1, r0
 800944e:	e7f9      	b.n	8009444 <__sfputc_r+0x1e>

08009450 <__sfputs_r>:
 8009450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009452:	0006      	movs	r6, r0
 8009454:	000f      	movs	r7, r1
 8009456:	0014      	movs	r4, r2
 8009458:	18d5      	adds	r5, r2, r3
 800945a:	42ac      	cmp	r4, r5
 800945c:	d101      	bne.n	8009462 <__sfputs_r+0x12>
 800945e:	2000      	movs	r0, #0
 8009460:	e007      	b.n	8009472 <__sfputs_r+0x22>
 8009462:	7821      	ldrb	r1, [r4, #0]
 8009464:	003a      	movs	r2, r7
 8009466:	0030      	movs	r0, r6
 8009468:	f7ff ffdd 	bl	8009426 <__sfputc_r>
 800946c:	3401      	adds	r4, #1
 800946e:	1c43      	adds	r3, r0, #1
 8009470:	d1f3      	bne.n	800945a <__sfputs_r+0xa>
 8009472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009474 <_vfiprintf_r>:
 8009474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009476:	b0a1      	sub	sp, #132	; 0x84
 8009478:	0006      	movs	r6, r0
 800947a:	000c      	movs	r4, r1
 800947c:	001f      	movs	r7, r3
 800947e:	9203      	str	r2, [sp, #12]
 8009480:	2800      	cmp	r0, #0
 8009482:	d004      	beq.n	800948e <_vfiprintf_r+0x1a>
 8009484:	6983      	ldr	r3, [r0, #24]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d101      	bne.n	800948e <_vfiprintf_r+0x1a>
 800948a:	f000 fb3f 	bl	8009b0c <__sinit>
 800948e:	4b8e      	ldr	r3, [pc, #568]	; (80096c8 <_vfiprintf_r+0x254>)
 8009490:	429c      	cmp	r4, r3
 8009492:	d11c      	bne.n	80094ce <_vfiprintf_r+0x5a>
 8009494:	6874      	ldr	r4, [r6, #4]
 8009496:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009498:	07db      	lsls	r3, r3, #31
 800949a:	d405      	bmi.n	80094a8 <_vfiprintf_r+0x34>
 800949c:	89a3      	ldrh	r3, [r4, #12]
 800949e:	059b      	lsls	r3, r3, #22
 80094a0:	d402      	bmi.n	80094a8 <_vfiprintf_r+0x34>
 80094a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094a4:	f000 fbd3 	bl	8009c4e <__retarget_lock_acquire_recursive>
 80094a8:	89a3      	ldrh	r3, [r4, #12]
 80094aa:	071b      	lsls	r3, r3, #28
 80094ac:	d502      	bpl.n	80094b4 <_vfiprintf_r+0x40>
 80094ae:	6923      	ldr	r3, [r4, #16]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d11d      	bne.n	80094f0 <_vfiprintf_r+0x7c>
 80094b4:	0021      	movs	r1, r4
 80094b6:	0030      	movs	r0, r6
 80094b8:	f000 f97a 	bl	80097b0 <__swsetup_r>
 80094bc:	2800      	cmp	r0, #0
 80094be:	d017      	beq.n	80094f0 <_vfiprintf_r+0x7c>
 80094c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80094c2:	07db      	lsls	r3, r3, #31
 80094c4:	d50d      	bpl.n	80094e2 <_vfiprintf_r+0x6e>
 80094c6:	2001      	movs	r0, #1
 80094c8:	4240      	negs	r0, r0
 80094ca:	b021      	add	sp, #132	; 0x84
 80094cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094ce:	4b7f      	ldr	r3, [pc, #508]	; (80096cc <_vfiprintf_r+0x258>)
 80094d0:	429c      	cmp	r4, r3
 80094d2:	d101      	bne.n	80094d8 <_vfiprintf_r+0x64>
 80094d4:	68b4      	ldr	r4, [r6, #8]
 80094d6:	e7de      	b.n	8009496 <_vfiprintf_r+0x22>
 80094d8:	4b7d      	ldr	r3, [pc, #500]	; (80096d0 <_vfiprintf_r+0x25c>)
 80094da:	429c      	cmp	r4, r3
 80094dc:	d1db      	bne.n	8009496 <_vfiprintf_r+0x22>
 80094de:	68f4      	ldr	r4, [r6, #12]
 80094e0:	e7d9      	b.n	8009496 <_vfiprintf_r+0x22>
 80094e2:	89a3      	ldrh	r3, [r4, #12]
 80094e4:	059b      	lsls	r3, r3, #22
 80094e6:	d4ee      	bmi.n	80094c6 <_vfiprintf_r+0x52>
 80094e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094ea:	f000 fbb1 	bl	8009c50 <__retarget_lock_release_recursive>
 80094ee:	e7ea      	b.n	80094c6 <_vfiprintf_r+0x52>
 80094f0:	2300      	movs	r3, #0
 80094f2:	ad08      	add	r5, sp, #32
 80094f4:	616b      	str	r3, [r5, #20]
 80094f6:	3320      	adds	r3, #32
 80094f8:	766b      	strb	r3, [r5, #25]
 80094fa:	3310      	adds	r3, #16
 80094fc:	76ab      	strb	r3, [r5, #26]
 80094fe:	9707      	str	r7, [sp, #28]
 8009500:	9f03      	ldr	r7, [sp, #12]
 8009502:	783b      	ldrb	r3, [r7, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d001      	beq.n	800950c <_vfiprintf_r+0x98>
 8009508:	2b25      	cmp	r3, #37	; 0x25
 800950a:	d14e      	bne.n	80095aa <_vfiprintf_r+0x136>
 800950c:	9b03      	ldr	r3, [sp, #12]
 800950e:	1afb      	subs	r3, r7, r3
 8009510:	9305      	str	r3, [sp, #20]
 8009512:	9b03      	ldr	r3, [sp, #12]
 8009514:	429f      	cmp	r7, r3
 8009516:	d00d      	beq.n	8009534 <_vfiprintf_r+0xc0>
 8009518:	9b05      	ldr	r3, [sp, #20]
 800951a:	0021      	movs	r1, r4
 800951c:	0030      	movs	r0, r6
 800951e:	9a03      	ldr	r2, [sp, #12]
 8009520:	f7ff ff96 	bl	8009450 <__sfputs_r>
 8009524:	1c43      	adds	r3, r0, #1
 8009526:	d100      	bne.n	800952a <_vfiprintf_r+0xb6>
 8009528:	e0b5      	b.n	8009696 <_vfiprintf_r+0x222>
 800952a:	696a      	ldr	r2, [r5, #20]
 800952c:	9b05      	ldr	r3, [sp, #20]
 800952e:	4694      	mov	ip, r2
 8009530:	4463      	add	r3, ip
 8009532:	616b      	str	r3, [r5, #20]
 8009534:	783b      	ldrb	r3, [r7, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d100      	bne.n	800953c <_vfiprintf_r+0xc8>
 800953a:	e0ac      	b.n	8009696 <_vfiprintf_r+0x222>
 800953c:	2201      	movs	r2, #1
 800953e:	1c7b      	adds	r3, r7, #1
 8009540:	9303      	str	r3, [sp, #12]
 8009542:	2300      	movs	r3, #0
 8009544:	4252      	negs	r2, r2
 8009546:	606a      	str	r2, [r5, #4]
 8009548:	a904      	add	r1, sp, #16
 800954a:	3254      	adds	r2, #84	; 0x54
 800954c:	1852      	adds	r2, r2, r1
 800954e:	602b      	str	r3, [r5, #0]
 8009550:	60eb      	str	r3, [r5, #12]
 8009552:	60ab      	str	r3, [r5, #8]
 8009554:	7013      	strb	r3, [r2, #0]
 8009556:	65ab      	str	r3, [r5, #88]	; 0x58
 8009558:	9b03      	ldr	r3, [sp, #12]
 800955a:	2205      	movs	r2, #5
 800955c:	7819      	ldrb	r1, [r3, #0]
 800955e:	485d      	ldr	r0, [pc, #372]	; (80096d4 <_vfiprintf_r+0x260>)
 8009560:	f7ff f89c 	bl	800869c <memchr>
 8009564:	9b03      	ldr	r3, [sp, #12]
 8009566:	1c5f      	adds	r7, r3, #1
 8009568:	2800      	cmp	r0, #0
 800956a:	d120      	bne.n	80095ae <_vfiprintf_r+0x13a>
 800956c:	682a      	ldr	r2, [r5, #0]
 800956e:	06d3      	lsls	r3, r2, #27
 8009570:	d504      	bpl.n	800957c <_vfiprintf_r+0x108>
 8009572:	2353      	movs	r3, #83	; 0x53
 8009574:	a904      	add	r1, sp, #16
 8009576:	185b      	adds	r3, r3, r1
 8009578:	2120      	movs	r1, #32
 800957a:	7019      	strb	r1, [r3, #0]
 800957c:	0713      	lsls	r3, r2, #28
 800957e:	d504      	bpl.n	800958a <_vfiprintf_r+0x116>
 8009580:	2353      	movs	r3, #83	; 0x53
 8009582:	a904      	add	r1, sp, #16
 8009584:	185b      	adds	r3, r3, r1
 8009586:	212b      	movs	r1, #43	; 0x2b
 8009588:	7019      	strb	r1, [r3, #0]
 800958a:	9b03      	ldr	r3, [sp, #12]
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	2b2a      	cmp	r3, #42	; 0x2a
 8009590:	d016      	beq.n	80095c0 <_vfiprintf_r+0x14c>
 8009592:	2100      	movs	r1, #0
 8009594:	68eb      	ldr	r3, [r5, #12]
 8009596:	9f03      	ldr	r7, [sp, #12]
 8009598:	783a      	ldrb	r2, [r7, #0]
 800959a:	1c78      	adds	r0, r7, #1
 800959c:	3a30      	subs	r2, #48	; 0x30
 800959e:	4684      	mov	ip, r0
 80095a0:	2a09      	cmp	r2, #9
 80095a2:	d94f      	bls.n	8009644 <_vfiprintf_r+0x1d0>
 80095a4:	2900      	cmp	r1, #0
 80095a6:	d111      	bne.n	80095cc <_vfiprintf_r+0x158>
 80095a8:	e017      	b.n	80095da <_vfiprintf_r+0x166>
 80095aa:	3701      	adds	r7, #1
 80095ac:	e7a9      	b.n	8009502 <_vfiprintf_r+0x8e>
 80095ae:	4b49      	ldr	r3, [pc, #292]	; (80096d4 <_vfiprintf_r+0x260>)
 80095b0:	682a      	ldr	r2, [r5, #0]
 80095b2:	1ac0      	subs	r0, r0, r3
 80095b4:	2301      	movs	r3, #1
 80095b6:	4083      	lsls	r3, r0
 80095b8:	4313      	orrs	r3, r2
 80095ba:	602b      	str	r3, [r5, #0]
 80095bc:	9703      	str	r7, [sp, #12]
 80095be:	e7cb      	b.n	8009558 <_vfiprintf_r+0xe4>
 80095c0:	9b07      	ldr	r3, [sp, #28]
 80095c2:	1d19      	adds	r1, r3, #4
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	9107      	str	r1, [sp, #28]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	db01      	blt.n	80095d0 <_vfiprintf_r+0x15c>
 80095cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80095ce:	e004      	b.n	80095da <_vfiprintf_r+0x166>
 80095d0:	425b      	negs	r3, r3
 80095d2:	60eb      	str	r3, [r5, #12]
 80095d4:	2302      	movs	r3, #2
 80095d6:	4313      	orrs	r3, r2
 80095d8:	602b      	str	r3, [r5, #0]
 80095da:	783b      	ldrb	r3, [r7, #0]
 80095dc:	2b2e      	cmp	r3, #46	; 0x2e
 80095de:	d10a      	bne.n	80095f6 <_vfiprintf_r+0x182>
 80095e0:	787b      	ldrb	r3, [r7, #1]
 80095e2:	2b2a      	cmp	r3, #42	; 0x2a
 80095e4:	d137      	bne.n	8009656 <_vfiprintf_r+0x1e2>
 80095e6:	9b07      	ldr	r3, [sp, #28]
 80095e8:	3702      	adds	r7, #2
 80095ea:	1d1a      	adds	r2, r3, #4
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	9207      	str	r2, [sp, #28]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	db2d      	blt.n	8009650 <_vfiprintf_r+0x1dc>
 80095f4:	9309      	str	r3, [sp, #36]	; 0x24
 80095f6:	2203      	movs	r2, #3
 80095f8:	7839      	ldrb	r1, [r7, #0]
 80095fa:	4837      	ldr	r0, [pc, #220]	; (80096d8 <_vfiprintf_r+0x264>)
 80095fc:	f7ff f84e 	bl	800869c <memchr>
 8009600:	2800      	cmp	r0, #0
 8009602:	d007      	beq.n	8009614 <_vfiprintf_r+0x1a0>
 8009604:	4b34      	ldr	r3, [pc, #208]	; (80096d8 <_vfiprintf_r+0x264>)
 8009606:	682a      	ldr	r2, [r5, #0]
 8009608:	1ac0      	subs	r0, r0, r3
 800960a:	2340      	movs	r3, #64	; 0x40
 800960c:	4083      	lsls	r3, r0
 800960e:	4313      	orrs	r3, r2
 8009610:	3701      	adds	r7, #1
 8009612:	602b      	str	r3, [r5, #0]
 8009614:	7839      	ldrb	r1, [r7, #0]
 8009616:	1c7b      	adds	r3, r7, #1
 8009618:	2206      	movs	r2, #6
 800961a:	4830      	ldr	r0, [pc, #192]	; (80096dc <_vfiprintf_r+0x268>)
 800961c:	9303      	str	r3, [sp, #12]
 800961e:	7629      	strb	r1, [r5, #24]
 8009620:	f7ff f83c 	bl	800869c <memchr>
 8009624:	2800      	cmp	r0, #0
 8009626:	d045      	beq.n	80096b4 <_vfiprintf_r+0x240>
 8009628:	4b2d      	ldr	r3, [pc, #180]	; (80096e0 <_vfiprintf_r+0x26c>)
 800962a:	2b00      	cmp	r3, #0
 800962c:	d127      	bne.n	800967e <_vfiprintf_r+0x20a>
 800962e:	2207      	movs	r2, #7
 8009630:	9b07      	ldr	r3, [sp, #28]
 8009632:	3307      	adds	r3, #7
 8009634:	4393      	bics	r3, r2
 8009636:	3308      	adds	r3, #8
 8009638:	9307      	str	r3, [sp, #28]
 800963a:	696b      	ldr	r3, [r5, #20]
 800963c:	9a04      	ldr	r2, [sp, #16]
 800963e:	189b      	adds	r3, r3, r2
 8009640:	616b      	str	r3, [r5, #20]
 8009642:	e75d      	b.n	8009500 <_vfiprintf_r+0x8c>
 8009644:	210a      	movs	r1, #10
 8009646:	434b      	muls	r3, r1
 8009648:	4667      	mov	r7, ip
 800964a:	189b      	adds	r3, r3, r2
 800964c:	3909      	subs	r1, #9
 800964e:	e7a3      	b.n	8009598 <_vfiprintf_r+0x124>
 8009650:	2301      	movs	r3, #1
 8009652:	425b      	negs	r3, r3
 8009654:	e7ce      	b.n	80095f4 <_vfiprintf_r+0x180>
 8009656:	2300      	movs	r3, #0
 8009658:	001a      	movs	r2, r3
 800965a:	3701      	adds	r7, #1
 800965c:	606b      	str	r3, [r5, #4]
 800965e:	7839      	ldrb	r1, [r7, #0]
 8009660:	1c78      	adds	r0, r7, #1
 8009662:	3930      	subs	r1, #48	; 0x30
 8009664:	4684      	mov	ip, r0
 8009666:	2909      	cmp	r1, #9
 8009668:	d903      	bls.n	8009672 <_vfiprintf_r+0x1fe>
 800966a:	2b00      	cmp	r3, #0
 800966c:	d0c3      	beq.n	80095f6 <_vfiprintf_r+0x182>
 800966e:	9209      	str	r2, [sp, #36]	; 0x24
 8009670:	e7c1      	b.n	80095f6 <_vfiprintf_r+0x182>
 8009672:	230a      	movs	r3, #10
 8009674:	435a      	muls	r2, r3
 8009676:	4667      	mov	r7, ip
 8009678:	1852      	adds	r2, r2, r1
 800967a:	3b09      	subs	r3, #9
 800967c:	e7ef      	b.n	800965e <_vfiprintf_r+0x1ea>
 800967e:	ab07      	add	r3, sp, #28
 8009680:	9300      	str	r3, [sp, #0]
 8009682:	0022      	movs	r2, r4
 8009684:	0029      	movs	r1, r5
 8009686:	0030      	movs	r0, r6
 8009688:	4b16      	ldr	r3, [pc, #88]	; (80096e4 <_vfiprintf_r+0x270>)
 800968a:	f7fd fd5b 	bl	8007144 <_printf_float>
 800968e:	9004      	str	r0, [sp, #16]
 8009690:	9b04      	ldr	r3, [sp, #16]
 8009692:	3301      	adds	r3, #1
 8009694:	d1d1      	bne.n	800963a <_vfiprintf_r+0x1c6>
 8009696:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009698:	07db      	lsls	r3, r3, #31
 800969a:	d405      	bmi.n	80096a8 <_vfiprintf_r+0x234>
 800969c:	89a3      	ldrh	r3, [r4, #12]
 800969e:	059b      	lsls	r3, r3, #22
 80096a0:	d402      	bmi.n	80096a8 <_vfiprintf_r+0x234>
 80096a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096a4:	f000 fad4 	bl	8009c50 <__retarget_lock_release_recursive>
 80096a8:	89a3      	ldrh	r3, [r4, #12]
 80096aa:	065b      	lsls	r3, r3, #25
 80096ac:	d500      	bpl.n	80096b0 <_vfiprintf_r+0x23c>
 80096ae:	e70a      	b.n	80094c6 <_vfiprintf_r+0x52>
 80096b0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80096b2:	e70a      	b.n	80094ca <_vfiprintf_r+0x56>
 80096b4:	ab07      	add	r3, sp, #28
 80096b6:	9300      	str	r3, [sp, #0]
 80096b8:	0022      	movs	r2, r4
 80096ba:	0029      	movs	r1, r5
 80096bc:	0030      	movs	r0, r6
 80096be:	4b09      	ldr	r3, [pc, #36]	; (80096e4 <_vfiprintf_r+0x270>)
 80096c0:	f7fd fff2 	bl	80076a8 <_printf_i>
 80096c4:	e7e3      	b.n	800968e <_vfiprintf_r+0x21a>
 80096c6:	46c0      	nop			; (mov r8, r8)
 80096c8:	0800a4d4 	.word	0x0800a4d4
 80096cc:	0800a4f4 	.word	0x0800a4f4
 80096d0:	0800a4b4 	.word	0x0800a4b4
 80096d4:	0800a35c 	.word	0x0800a35c
 80096d8:	0800a362 	.word	0x0800a362
 80096dc:	0800a366 	.word	0x0800a366
 80096e0:	08007145 	.word	0x08007145
 80096e4:	08009451 	.word	0x08009451

080096e8 <__swbuf_r>:
 80096e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ea:	0005      	movs	r5, r0
 80096ec:	000e      	movs	r6, r1
 80096ee:	0014      	movs	r4, r2
 80096f0:	2800      	cmp	r0, #0
 80096f2:	d004      	beq.n	80096fe <__swbuf_r+0x16>
 80096f4:	6983      	ldr	r3, [r0, #24]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d101      	bne.n	80096fe <__swbuf_r+0x16>
 80096fa:	f000 fa07 	bl	8009b0c <__sinit>
 80096fe:	4b22      	ldr	r3, [pc, #136]	; (8009788 <__swbuf_r+0xa0>)
 8009700:	429c      	cmp	r4, r3
 8009702:	d12e      	bne.n	8009762 <__swbuf_r+0x7a>
 8009704:	686c      	ldr	r4, [r5, #4]
 8009706:	69a3      	ldr	r3, [r4, #24]
 8009708:	60a3      	str	r3, [r4, #8]
 800970a:	89a3      	ldrh	r3, [r4, #12]
 800970c:	071b      	lsls	r3, r3, #28
 800970e:	d532      	bpl.n	8009776 <__swbuf_r+0x8e>
 8009710:	6923      	ldr	r3, [r4, #16]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d02f      	beq.n	8009776 <__swbuf_r+0x8e>
 8009716:	6823      	ldr	r3, [r4, #0]
 8009718:	6922      	ldr	r2, [r4, #16]
 800971a:	b2f7      	uxtb	r7, r6
 800971c:	1a98      	subs	r0, r3, r2
 800971e:	6963      	ldr	r3, [r4, #20]
 8009720:	b2f6      	uxtb	r6, r6
 8009722:	4283      	cmp	r3, r0
 8009724:	dc05      	bgt.n	8009732 <__swbuf_r+0x4a>
 8009726:	0021      	movs	r1, r4
 8009728:	0028      	movs	r0, r5
 800972a:	f000 f94d 	bl	80099c8 <_fflush_r>
 800972e:	2800      	cmp	r0, #0
 8009730:	d127      	bne.n	8009782 <__swbuf_r+0x9a>
 8009732:	68a3      	ldr	r3, [r4, #8]
 8009734:	3001      	adds	r0, #1
 8009736:	3b01      	subs	r3, #1
 8009738:	60a3      	str	r3, [r4, #8]
 800973a:	6823      	ldr	r3, [r4, #0]
 800973c:	1c5a      	adds	r2, r3, #1
 800973e:	6022      	str	r2, [r4, #0]
 8009740:	701f      	strb	r7, [r3, #0]
 8009742:	6963      	ldr	r3, [r4, #20]
 8009744:	4283      	cmp	r3, r0
 8009746:	d004      	beq.n	8009752 <__swbuf_r+0x6a>
 8009748:	89a3      	ldrh	r3, [r4, #12]
 800974a:	07db      	lsls	r3, r3, #31
 800974c:	d507      	bpl.n	800975e <__swbuf_r+0x76>
 800974e:	2e0a      	cmp	r6, #10
 8009750:	d105      	bne.n	800975e <__swbuf_r+0x76>
 8009752:	0021      	movs	r1, r4
 8009754:	0028      	movs	r0, r5
 8009756:	f000 f937 	bl	80099c8 <_fflush_r>
 800975a:	2800      	cmp	r0, #0
 800975c:	d111      	bne.n	8009782 <__swbuf_r+0x9a>
 800975e:	0030      	movs	r0, r6
 8009760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009762:	4b0a      	ldr	r3, [pc, #40]	; (800978c <__swbuf_r+0xa4>)
 8009764:	429c      	cmp	r4, r3
 8009766:	d101      	bne.n	800976c <__swbuf_r+0x84>
 8009768:	68ac      	ldr	r4, [r5, #8]
 800976a:	e7cc      	b.n	8009706 <__swbuf_r+0x1e>
 800976c:	4b08      	ldr	r3, [pc, #32]	; (8009790 <__swbuf_r+0xa8>)
 800976e:	429c      	cmp	r4, r3
 8009770:	d1c9      	bne.n	8009706 <__swbuf_r+0x1e>
 8009772:	68ec      	ldr	r4, [r5, #12]
 8009774:	e7c7      	b.n	8009706 <__swbuf_r+0x1e>
 8009776:	0021      	movs	r1, r4
 8009778:	0028      	movs	r0, r5
 800977a:	f000 f819 	bl	80097b0 <__swsetup_r>
 800977e:	2800      	cmp	r0, #0
 8009780:	d0c9      	beq.n	8009716 <__swbuf_r+0x2e>
 8009782:	2601      	movs	r6, #1
 8009784:	4276      	negs	r6, r6
 8009786:	e7ea      	b.n	800975e <__swbuf_r+0x76>
 8009788:	0800a4d4 	.word	0x0800a4d4
 800978c:	0800a4f4 	.word	0x0800a4f4
 8009790:	0800a4b4 	.word	0x0800a4b4

08009794 <__ascii_wctomb>:
 8009794:	0003      	movs	r3, r0
 8009796:	1e08      	subs	r0, r1, #0
 8009798:	d005      	beq.n	80097a6 <__ascii_wctomb+0x12>
 800979a:	2aff      	cmp	r2, #255	; 0xff
 800979c:	d904      	bls.n	80097a8 <__ascii_wctomb+0x14>
 800979e:	228a      	movs	r2, #138	; 0x8a
 80097a0:	2001      	movs	r0, #1
 80097a2:	601a      	str	r2, [r3, #0]
 80097a4:	4240      	negs	r0, r0
 80097a6:	4770      	bx	lr
 80097a8:	2001      	movs	r0, #1
 80097aa:	700a      	strb	r2, [r1, #0]
 80097ac:	e7fb      	b.n	80097a6 <__ascii_wctomb+0x12>
	...

080097b0 <__swsetup_r>:
 80097b0:	4b37      	ldr	r3, [pc, #220]	; (8009890 <__swsetup_r+0xe0>)
 80097b2:	b570      	push	{r4, r5, r6, lr}
 80097b4:	681d      	ldr	r5, [r3, #0]
 80097b6:	0006      	movs	r6, r0
 80097b8:	000c      	movs	r4, r1
 80097ba:	2d00      	cmp	r5, #0
 80097bc:	d005      	beq.n	80097ca <__swsetup_r+0x1a>
 80097be:	69ab      	ldr	r3, [r5, #24]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d102      	bne.n	80097ca <__swsetup_r+0x1a>
 80097c4:	0028      	movs	r0, r5
 80097c6:	f000 f9a1 	bl	8009b0c <__sinit>
 80097ca:	4b32      	ldr	r3, [pc, #200]	; (8009894 <__swsetup_r+0xe4>)
 80097cc:	429c      	cmp	r4, r3
 80097ce:	d10f      	bne.n	80097f0 <__swsetup_r+0x40>
 80097d0:	686c      	ldr	r4, [r5, #4]
 80097d2:	230c      	movs	r3, #12
 80097d4:	5ee2      	ldrsh	r2, [r4, r3]
 80097d6:	b293      	uxth	r3, r2
 80097d8:	0711      	lsls	r1, r2, #28
 80097da:	d42d      	bmi.n	8009838 <__swsetup_r+0x88>
 80097dc:	06d9      	lsls	r1, r3, #27
 80097de:	d411      	bmi.n	8009804 <__swsetup_r+0x54>
 80097e0:	2309      	movs	r3, #9
 80097e2:	2001      	movs	r0, #1
 80097e4:	6033      	str	r3, [r6, #0]
 80097e6:	3337      	adds	r3, #55	; 0x37
 80097e8:	4313      	orrs	r3, r2
 80097ea:	81a3      	strh	r3, [r4, #12]
 80097ec:	4240      	negs	r0, r0
 80097ee:	bd70      	pop	{r4, r5, r6, pc}
 80097f0:	4b29      	ldr	r3, [pc, #164]	; (8009898 <__swsetup_r+0xe8>)
 80097f2:	429c      	cmp	r4, r3
 80097f4:	d101      	bne.n	80097fa <__swsetup_r+0x4a>
 80097f6:	68ac      	ldr	r4, [r5, #8]
 80097f8:	e7eb      	b.n	80097d2 <__swsetup_r+0x22>
 80097fa:	4b28      	ldr	r3, [pc, #160]	; (800989c <__swsetup_r+0xec>)
 80097fc:	429c      	cmp	r4, r3
 80097fe:	d1e8      	bne.n	80097d2 <__swsetup_r+0x22>
 8009800:	68ec      	ldr	r4, [r5, #12]
 8009802:	e7e6      	b.n	80097d2 <__swsetup_r+0x22>
 8009804:	075b      	lsls	r3, r3, #29
 8009806:	d513      	bpl.n	8009830 <__swsetup_r+0x80>
 8009808:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800980a:	2900      	cmp	r1, #0
 800980c:	d008      	beq.n	8009820 <__swsetup_r+0x70>
 800980e:	0023      	movs	r3, r4
 8009810:	3344      	adds	r3, #68	; 0x44
 8009812:	4299      	cmp	r1, r3
 8009814:	d002      	beq.n	800981c <__swsetup_r+0x6c>
 8009816:	0030      	movs	r0, r6
 8009818:	f7ff fb1c 	bl	8008e54 <_free_r>
 800981c:	2300      	movs	r3, #0
 800981e:	6363      	str	r3, [r4, #52]	; 0x34
 8009820:	2224      	movs	r2, #36	; 0x24
 8009822:	89a3      	ldrh	r3, [r4, #12]
 8009824:	4393      	bics	r3, r2
 8009826:	81a3      	strh	r3, [r4, #12]
 8009828:	2300      	movs	r3, #0
 800982a:	6063      	str	r3, [r4, #4]
 800982c:	6923      	ldr	r3, [r4, #16]
 800982e:	6023      	str	r3, [r4, #0]
 8009830:	2308      	movs	r3, #8
 8009832:	89a2      	ldrh	r2, [r4, #12]
 8009834:	4313      	orrs	r3, r2
 8009836:	81a3      	strh	r3, [r4, #12]
 8009838:	6923      	ldr	r3, [r4, #16]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d10b      	bne.n	8009856 <__swsetup_r+0xa6>
 800983e:	21a0      	movs	r1, #160	; 0xa0
 8009840:	2280      	movs	r2, #128	; 0x80
 8009842:	89a3      	ldrh	r3, [r4, #12]
 8009844:	0089      	lsls	r1, r1, #2
 8009846:	0092      	lsls	r2, r2, #2
 8009848:	400b      	ands	r3, r1
 800984a:	4293      	cmp	r3, r2
 800984c:	d003      	beq.n	8009856 <__swsetup_r+0xa6>
 800984e:	0021      	movs	r1, r4
 8009850:	0030      	movs	r0, r6
 8009852:	f000 fa27 	bl	8009ca4 <__smakebuf_r>
 8009856:	220c      	movs	r2, #12
 8009858:	5ea3      	ldrsh	r3, [r4, r2]
 800985a:	2001      	movs	r0, #1
 800985c:	001a      	movs	r2, r3
 800985e:	b299      	uxth	r1, r3
 8009860:	4002      	ands	r2, r0
 8009862:	4203      	tst	r3, r0
 8009864:	d00f      	beq.n	8009886 <__swsetup_r+0xd6>
 8009866:	2200      	movs	r2, #0
 8009868:	60a2      	str	r2, [r4, #8]
 800986a:	6962      	ldr	r2, [r4, #20]
 800986c:	4252      	negs	r2, r2
 800986e:	61a2      	str	r2, [r4, #24]
 8009870:	2000      	movs	r0, #0
 8009872:	6922      	ldr	r2, [r4, #16]
 8009874:	4282      	cmp	r2, r0
 8009876:	d1ba      	bne.n	80097ee <__swsetup_r+0x3e>
 8009878:	060a      	lsls	r2, r1, #24
 800987a:	d5b8      	bpl.n	80097ee <__swsetup_r+0x3e>
 800987c:	2240      	movs	r2, #64	; 0x40
 800987e:	4313      	orrs	r3, r2
 8009880:	81a3      	strh	r3, [r4, #12]
 8009882:	3801      	subs	r0, #1
 8009884:	e7b3      	b.n	80097ee <__swsetup_r+0x3e>
 8009886:	0788      	lsls	r0, r1, #30
 8009888:	d400      	bmi.n	800988c <__swsetup_r+0xdc>
 800988a:	6962      	ldr	r2, [r4, #20]
 800988c:	60a2      	str	r2, [r4, #8]
 800988e:	e7ef      	b.n	8009870 <__swsetup_r+0xc0>
 8009890:	2000000c 	.word	0x2000000c
 8009894:	0800a4d4 	.word	0x0800a4d4
 8009898:	0800a4f4 	.word	0x0800a4f4
 800989c:	0800a4b4 	.word	0x0800a4b4

080098a0 <abort>:
 80098a0:	2006      	movs	r0, #6
 80098a2:	b510      	push	{r4, lr}
 80098a4:	f000 fa74 	bl	8009d90 <raise>
 80098a8:	2001      	movs	r0, #1
 80098aa:	f7fa f90f 	bl	8003acc <_exit>
	...

080098b0 <__sflush_r>:
 80098b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098b2:	898b      	ldrh	r3, [r1, #12]
 80098b4:	0005      	movs	r5, r0
 80098b6:	000c      	movs	r4, r1
 80098b8:	071a      	lsls	r2, r3, #28
 80098ba:	d45f      	bmi.n	800997c <__sflush_r+0xcc>
 80098bc:	684a      	ldr	r2, [r1, #4]
 80098be:	2a00      	cmp	r2, #0
 80098c0:	dc04      	bgt.n	80098cc <__sflush_r+0x1c>
 80098c2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80098c4:	2a00      	cmp	r2, #0
 80098c6:	dc01      	bgt.n	80098cc <__sflush_r+0x1c>
 80098c8:	2000      	movs	r0, #0
 80098ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80098cc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80098ce:	2f00      	cmp	r7, #0
 80098d0:	d0fa      	beq.n	80098c8 <__sflush_r+0x18>
 80098d2:	2200      	movs	r2, #0
 80098d4:	2180      	movs	r1, #128	; 0x80
 80098d6:	682e      	ldr	r6, [r5, #0]
 80098d8:	602a      	str	r2, [r5, #0]
 80098da:	001a      	movs	r2, r3
 80098dc:	0149      	lsls	r1, r1, #5
 80098de:	400a      	ands	r2, r1
 80098e0:	420b      	tst	r3, r1
 80098e2:	d034      	beq.n	800994e <__sflush_r+0x9e>
 80098e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80098e6:	89a3      	ldrh	r3, [r4, #12]
 80098e8:	075b      	lsls	r3, r3, #29
 80098ea:	d506      	bpl.n	80098fa <__sflush_r+0x4a>
 80098ec:	6863      	ldr	r3, [r4, #4]
 80098ee:	1ac0      	subs	r0, r0, r3
 80098f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d001      	beq.n	80098fa <__sflush_r+0x4a>
 80098f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098f8:	1ac0      	subs	r0, r0, r3
 80098fa:	0002      	movs	r2, r0
 80098fc:	6a21      	ldr	r1, [r4, #32]
 80098fe:	2300      	movs	r3, #0
 8009900:	0028      	movs	r0, r5
 8009902:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009904:	47b8      	blx	r7
 8009906:	89a1      	ldrh	r1, [r4, #12]
 8009908:	1c43      	adds	r3, r0, #1
 800990a:	d106      	bne.n	800991a <__sflush_r+0x6a>
 800990c:	682b      	ldr	r3, [r5, #0]
 800990e:	2b1d      	cmp	r3, #29
 8009910:	d831      	bhi.n	8009976 <__sflush_r+0xc6>
 8009912:	4a2c      	ldr	r2, [pc, #176]	; (80099c4 <__sflush_r+0x114>)
 8009914:	40da      	lsrs	r2, r3
 8009916:	07d3      	lsls	r3, r2, #31
 8009918:	d52d      	bpl.n	8009976 <__sflush_r+0xc6>
 800991a:	2300      	movs	r3, #0
 800991c:	6063      	str	r3, [r4, #4]
 800991e:	6923      	ldr	r3, [r4, #16]
 8009920:	6023      	str	r3, [r4, #0]
 8009922:	04cb      	lsls	r3, r1, #19
 8009924:	d505      	bpl.n	8009932 <__sflush_r+0x82>
 8009926:	1c43      	adds	r3, r0, #1
 8009928:	d102      	bne.n	8009930 <__sflush_r+0x80>
 800992a:	682b      	ldr	r3, [r5, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d100      	bne.n	8009932 <__sflush_r+0x82>
 8009930:	6560      	str	r0, [r4, #84]	; 0x54
 8009932:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009934:	602e      	str	r6, [r5, #0]
 8009936:	2900      	cmp	r1, #0
 8009938:	d0c6      	beq.n	80098c8 <__sflush_r+0x18>
 800993a:	0023      	movs	r3, r4
 800993c:	3344      	adds	r3, #68	; 0x44
 800993e:	4299      	cmp	r1, r3
 8009940:	d002      	beq.n	8009948 <__sflush_r+0x98>
 8009942:	0028      	movs	r0, r5
 8009944:	f7ff fa86 	bl	8008e54 <_free_r>
 8009948:	2000      	movs	r0, #0
 800994a:	6360      	str	r0, [r4, #52]	; 0x34
 800994c:	e7bd      	b.n	80098ca <__sflush_r+0x1a>
 800994e:	2301      	movs	r3, #1
 8009950:	0028      	movs	r0, r5
 8009952:	6a21      	ldr	r1, [r4, #32]
 8009954:	47b8      	blx	r7
 8009956:	1c43      	adds	r3, r0, #1
 8009958:	d1c5      	bne.n	80098e6 <__sflush_r+0x36>
 800995a:	682b      	ldr	r3, [r5, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d0c2      	beq.n	80098e6 <__sflush_r+0x36>
 8009960:	2b1d      	cmp	r3, #29
 8009962:	d001      	beq.n	8009968 <__sflush_r+0xb8>
 8009964:	2b16      	cmp	r3, #22
 8009966:	d101      	bne.n	800996c <__sflush_r+0xbc>
 8009968:	602e      	str	r6, [r5, #0]
 800996a:	e7ad      	b.n	80098c8 <__sflush_r+0x18>
 800996c:	2340      	movs	r3, #64	; 0x40
 800996e:	89a2      	ldrh	r2, [r4, #12]
 8009970:	4313      	orrs	r3, r2
 8009972:	81a3      	strh	r3, [r4, #12]
 8009974:	e7a9      	b.n	80098ca <__sflush_r+0x1a>
 8009976:	2340      	movs	r3, #64	; 0x40
 8009978:	430b      	orrs	r3, r1
 800997a:	e7fa      	b.n	8009972 <__sflush_r+0xc2>
 800997c:	690f      	ldr	r7, [r1, #16]
 800997e:	2f00      	cmp	r7, #0
 8009980:	d0a2      	beq.n	80098c8 <__sflush_r+0x18>
 8009982:	680a      	ldr	r2, [r1, #0]
 8009984:	600f      	str	r7, [r1, #0]
 8009986:	1bd2      	subs	r2, r2, r7
 8009988:	9201      	str	r2, [sp, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	079b      	lsls	r3, r3, #30
 800998e:	d100      	bne.n	8009992 <__sflush_r+0xe2>
 8009990:	694a      	ldr	r2, [r1, #20]
 8009992:	60a2      	str	r2, [r4, #8]
 8009994:	9b01      	ldr	r3, [sp, #4]
 8009996:	2b00      	cmp	r3, #0
 8009998:	dc00      	bgt.n	800999c <__sflush_r+0xec>
 800999a:	e795      	b.n	80098c8 <__sflush_r+0x18>
 800999c:	003a      	movs	r2, r7
 800999e:	0028      	movs	r0, r5
 80099a0:	9b01      	ldr	r3, [sp, #4]
 80099a2:	6a21      	ldr	r1, [r4, #32]
 80099a4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80099a6:	47b0      	blx	r6
 80099a8:	2800      	cmp	r0, #0
 80099aa:	dc06      	bgt.n	80099ba <__sflush_r+0x10a>
 80099ac:	2340      	movs	r3, #64	; 0x40
 80099ae:	2001      	movs	r0, #1
 80099b0:	89a2      	ldrh	r2, [r4, #12]
 80099b2:	4240      	negs	r0, r0
 80099b4:	4313      	orrs	r3, r2
 80099b6:	81a3      	strh	r3, [r4, #12]
 80099b8:	e787      	b.n	80098ca <__sflush_r+0x1a>
 80099ba:	9b01      	ldr	r3, [sp, #4]
 80099bc:	183f      	adds	r7, r7, r0
 80099be:	1a1b      	subs	r3, r3, r0
 80099c0:	9301      	str	r3, [sp, #4]
 80099c2:	e7e7      	b.n	8009994 <__sflush_r+0xe4>
 80099c4:	20400001 	.word	0x20400001

080099c8 <_fflush_r>:
 80099c8:	690b      	ldr	r3, [r1, #16]
 80099ca:	b570      	push	{r4, r5, r6, lr}
 80099cc:	0005      	movs	r5, r0
 80099ce:	000c      	movs	r4, r1
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d102      	bne.n	80099da <_fflush_r+0x12>
 80099d4:	2500      	movs	r5, #0
 80099d6:	0028      	movs	r0, r5
 80099d8:	bd70      	pop	{r4, r5, r6, pc}
 80099da:	2800      	cmp	r0, #0
 80099dc:	d004      	beq.n	80099e8 <_fflush_r+0x20>
 80099de:	6983      	ldr	r3, [r0, #24]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d101      	bne.n	80099e8 <_fflush_r+0x20>
 80099e4:	f000 f892 	bl	8009b0c <__sinit>
 80099e8:	4b14      	ldr	r3, [pc, #80]	; (8009a3c <_fflush_r+0x74>)
 80099ea:	429c      	cmp	r4, r3
 80099ec:	d11b      	bne.n	8009a26 <_fflush_r+0x5e>
 80099ee:	686c      	ldr	r4, [r5, #4]
 80099f0:	220c      	movs	r2, #12
 80099f2:	5ea3      	ldrsh	r3, [r4, r2]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d0ed      	beq.n	80099d4 <_fflush_r+0xc>
 80099f8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80099fa:	07d2      	lsls	r2, r2, #31
 80099fc:	d404      	bmi.n	8009a08 <_fflush_r+0x40>
 80099fe:	059b      	lsls	r3, r3, #22
 8009a00:	d402      	bmi.n	8009a08 <_fflush_r+0x40>
 8009a02:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a04:	f000 f923 	bl	8009c4e <__retarget_lock_acquire_recursive>
 8009a08:	0028      	movs	r0, r5
 8009a0a:	0021      	movs	r1, r4
 8009a0c:	f7ff ff50 	bl	80098b0 <__sflush_r>
 8009a10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a12:	0005      	movs	r5, r0
 8009a14:	07db      	lsls	r3, r3, #31
 8009a16:	d4de      	bmi.n	80099d6 <_fflush_r+0xe>
 8009a18:	89a3      	ldrh	r3, [r4, #12]
 8009a1a:	059b      	lsls	r3, r3, #22
 8009a1c:	d4db      	bmi.n	80099d6 <_fflush_r+0xe>
 8009a1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a20:	f000 f916 	bl	8009c50 <__retarget_lock_release_recursive>
 8009a24:	e7d7      	b.n	80099d6 <_fflush_r+0xe>
 8009a26:	4b06      	ldr	r3, [pc, #24]	; (8009a40 <_fflush_r+0x78>)
 8009a28:	429c      	cmp	r4, r3
 8009a2a:	d101      	bne.n	8009a30 <_fflush_r+0x68>
 8009a2c:	68ac      	ldr	r4, [r5, #8]
 8009a2e:	e7df      	b.n	80099f0 <_fflush_r+0x28>
 8009a30:	4b04      	ldr	r3, [pc, #16]	; (8009a44 <_fflush_r+0x7c>)
 8009a32:	429c      	cmp	r4, r3
 8009a34:	d1dc      	bne.n	80099f0 <_fflush_r+0x28>
 8009a36:	68ec      	ldr	r4, [r5, #12]
 8009a38:	e7da      	b.n	80099f0 <_fflush_r+0x28>
 8009a3a:	46c0      	nop			; (mov r8, r8)
 8009a3c:	0800a4d4 	.word	0x0800a4d4
 8009a40:	0800a4f4 	.word	0x0800a4f4
 8009a44:	0800a4b4 	.word	0x0800a4b4

08009a48 <std>:
 8009a48:	2300      	movs	r3, #0
 8009a4a:	b510      	push	{r4, lr}
 8009a4c:	0004      	movs	r4, r0
 8009a4e:	6003      	str	r3, [r0, #0]
 8009a50:	6043      	str	r3, [r0, #4]
 8009a52:	6083      	str	r3, [r0, #8]
 8009a54:	8181      	strh	r1, [r0, #12]
 8009a56:	6643      	str	r3, [r0, #100]	; 0x64
 8009a58:	0019      	movs	r1, r3
 8009a5a:	81c2      	strh	r2, [r0, #14]
 8009a5c:	6103      	str	r3, [r0, #16]
 8009a5e:	6143      	str	r3, [r0, #20]
 8009a60:	6183      	str	r3, [r0, #24]
 8009a62:	2208      	movs	r2, #8
 8009a64:	305c      	adds	r0, #92	; 0x5c
 8009a66:	f7fd fabb 	bl	8006fe0 <memset>
 8009a6a:	4b05      	ldr	r3, [pc, #20]	; (8009a80 <std+0x38>)
 8009a6c:	6224      	str	r4, [r4, #32]
 8009a6e:	6263      	str	r3, [r4, #36]	; 0x24
 8009a70:	4b04      	ldr	r3, [pc, #16]	; (8009a84 <std+0x3c>)
 8009a72:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a74:	4b04      	ldr	r3, [pc, #16]	; (8009a88 <std+0x40>)
 8009a76:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a78:	4b04      	ldr	r3, [pc, #16]	; (8009a8c <std+0x44>)
 8009a7a:	6323      	str	r3, [r4, #48]	; 0x30
 8009a7c:	bd10      	pop	{r4, pc}
 8009a7e:	46c0      	nop			; (mov r8, r8)
 8009a80:	08009dd1 	.word	0x08009dd1
 8009a84:	08009df9 	.word	0x08009df9
 8009a88:	08009e31 	.word	0x08009e31
 8009a8c:	08009e5d 	.word	0x08009e5d

08009a90 <_cleanup_r>:
 8009a90:	b510      	push	{r4, lr}
 8009a92:	4902      	ldr	r1, [pc, #8]	; (8009a9c <_cleanup_r+0xc>)
 8009a94:	f000 f8ba 	bl	8009c0c <_fwalk_reent>
 8009a98:	bd10      	pop	{r4, pc}
 8009a9a:	46c0      	nop			; (mov r8, r8)
 8009a9c:	080099c9 	.word	0x080099c9

08009aa0 <__sfmoreglue>:
 8009aa0:	b570      	push	{r4, r5, r6, lr}
 8009aa2:	2568      	movs	r5, #104	; 0x68
 8009aa4:	1e4a      	subs	r2, r1, #1
 8009aa6:	4355      	muls	r5, r2
 8009aa8:	000e      	movs	r6, r1
 8009aaa:	0029      	movs	r1, r5
 8009aac:	3174      	adds	r1, #116	; 0x74
 8009aae:	f7ff fa3d 	bl	8008f2c <_malloc_r>
 8009ab2:	1e04      	subs	r4, r0, #0
 8009ab4:	d008      	beq.n	8009ac8 <__sfmoreglue+0x28>
 8009ab6:	2100      	movs	r1, #0
 8009ab8:	002a      	movs	r2, r5
 8009aba:	6001      	str	r1, [r0, #0]
 8009abc:	6046      	str	r6, [r0, #4]
 8009abe:	300c      	adds	r0, #12
 8009ac0:	60a0      	str	r0, [r4, #8]
 8009ac2:	3268      	adds	r2, #104	; 0x68
 8009ac4:	f7fd fa8c 	bl	8006fe0 <memset>
 8009ac8:	0020      	movs	r0, r4
 8009aca:	bd70      	pop	{r4, r5, r6, pc}

08009acc <__sfp_lock_acquire>:
 8009acc:	b510      	push	{r4, lr}
 8009ace:	4802      	ldr	r0, [pc, #8]	; (8009ad8 <__sfp_lock_acquire+0xc>)
 8009ad0:	f000 f8bd 	bl	8009c4e <__retarget_lock_acquire_recursive>
 8009ad4:	bd10      	pop	{r4, pc}
 8009ad6:	46c0      	nop			; (mov r8, r8)
 8009ad8:	200005a9 	.word	0x200005a9

08009adc <__sfp_lock_release>:
 8009adc:	b510      	push	{r4, lr}
 8009ade:	4802      	ldr	r0, [pc, #8]	; (8009ae8 <__sfp_lock_release+0xc>)
 8009ae0:	f000 f8b6 	bl	8009c50 <__retarget_lock_release_recursive>
 8009ae4:	bd10      	pop	{r4, pc}
 8009ae6:	46c0      	nop			; (mov r8, r8)
 8009ae8:	200005a9 	.word	0x200005a9

08009aec <__sinit_lock_acquire>:
 8009aec:	b510      	push	{r4, lr}
 8009aee:	4802      	ldr	r0, [pc, #8]	; (8009af8 <__sinit_lock_acquire+0xc>)
 8009af0:	f000 f8ad 	bl	8009c4e <__retarget_lock_acquire_recursive>
 8009af4:	bd10      	pop	{r4, pc}
 8009af6:	46c0      	nop			; (mov r8, r8)
 8009af8:	200005aa 	.word	0x200005aa

08009afc <__sinit_lock_release>:
 8009afc:	b510      	push	{r4, lr}
 8009afe:	4802      	ldr	r0, [pc, #8]	; (8009b08 <__sinit_lock_release+0xc>)
 8009b00:	f000 f8a6 	bl	8009c50 <__retarget_lock_release_recursive>
 8009b04:	bd10      	pop	{r4, pc}
 8009b06:	46c0      	nop			; (mov r8, r8)
 8009b08:	200005aa 	.word	0x200005aa

08009b0c <__sinit>:
 8009b0c:	b513      	push	{r0, r1, r4, lr}
 8009b0e:	0004      	movs	r4, r0
 8009b10:	f7ff ffec 	bl	8009aec <__sinit_lock_acquire>
 8009b14:	69a3      	ldr	r3, [r4, #24]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d002      	beq.n	8009b20 <__sinit+0x14>
 8009b1a:	f7ff ffef 	bl	8009afc <__sinit_lock_release>
 8009b1e:	bd13      	pop	{r0, r1, r4, pc}
 8009b20:	64a3      	str	r3, [r4, #72]	; 0x48
 8009b22:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009b24:	6523      	str	r3, [r4, #80]	; 0x50
 8009b26:	4b13      	ldr	r3, [pc, #76]	; (8009b74 <__sinit+0x68>)
 8009b28:	4a13      	ldr	r2, [pc, #76]	; (8009b78 <__sinit+0x6c>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b2e:	9301      	str	r3, [sp, #4]
 8009b30:	42a3      	cmp	r3, r4
 8009b32:	d101      	bne.n	8009b38 <__sinit+0x2c>
 8009b34:	2301      	movs	r3, #1
 8009b36:	61a3      	str	r3, [r4, #24]
 8009b38:	0020      	movs	r0, r4
 8009b3a:	f000 f81f 	bl	8009b7c <__sfp>
 8009b3e:	6060      	str	r0, [r4, #4]
 8009b40:	0020      	movs	r0, r4
 8009b42:	f000 f81b 	bl	8009b7c <__sfp>
 8009b46:	60a0      	str	r0, [r4, #8]
 8009b48:	0020      	movs	r0, r4
 8009b4a:	f000 f817 	bl	8009b7c <__sfp>
 8009b4e:	2200      	movs	r2, #0
 8009b50:	2104      	movs	r1, #4
 8009b52:	60e0      	str	r0, [r4, #12]
 8009b54:	6860      	ldr	r0, [r4, #4]
 8009b56:	f7ff ff77 	bl	8009a48 <std>
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	2109      	movs	r1, #9
 8009b5e:	68a0      	ldr	r0, [r4, #8]
 8009b60:	f7ff ff72 	bl	8009a48 <std>
 8009b64:	2202      	movs	r2, #2
 8009b66:	2112      	movs	r1, #18
 8009b68:	68e0      	ldr	r0, [r4, #12]
 8009b6a:	f7ff ff6d 	bl	8009a48 <std>
 8009b6e:	2301      	movs	r3, #1
 8009b70:	61a3      	str	r3, [r4, #24]
 8009b72:	e7d2      	b.n	8009b1a <__sinit+0xe>
 8009b74:	0800a13c 	.word	0x0800a13c
 8009b78:	08009a91 	.word	0x08009a91

08009b7c <__sfp>:
 8009b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b7e:	0007      	movs	r7, r0
 8009b80:	f7ff ffa4 	bl	8009acc <__sfp_lock_acquire>
 8009b84:	4b1f      	ldr	r3, [pc, #124]	; (8009c04 <__sfp+0x88>)
 8009b86:	681e      	ldr	r6, [r3, #0]
 8009b88:	69b3      	ldr	r3, [r6, #24]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d102      	bne.n	8009b94 <__sfp+0x18>
 8009b8e:	0030      	movs	r0, r6
 8009b90:	f7ff ffbc 	bl	8009b0c <__sinit>
 8009b94:	3648      	adds	r6, #72	; 0x48
 8009b96:	68b4      	ldr	r4, [r6, #8]
 8009b98:	6873      	ldr	r3, [r6, #4]
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	d504      	bpl.n	8009ba8 <__sfp+0x2c>
 8009b9e:	6833      	ldr	r3, [r6, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d022      	beq.n	8009bea <__sfp+0x6e>
 8009ba4:	6836      	ldr	r6, [r6, #0]
 8009ba6:	e7f6      	b.n	8009b96 <__sfp+0x1a>
 8009ba8:	220c      	movs	r2, #12
 8009baa:	5ea5      	ldrsh	r5, [r4, r2]
 8009bac:	2d00      	cmp	r5, #0
 8009bae:	d11a      	bne.n	8009be6 <__sfp+0x6a>
 8009bb0:	0020      	movs	r0, r4
 8009bb2:	4b15      	ldr	r3, [pc, #84]	; (8009c08 <__sfp+0x8c>)
 8009bb4:	3058      	adds	r0, #88	; 0x58
 8009bb6:	60e3      	str	r3, [r4, #12]
 8009bb8:	6665      	str	r5, [r4, #100]	; 0x64
 8009bba:	f000 f847 	bl	8009c4c <__retarget_lock_init_recursive>
 8009bbe:	f7ff ff8d 	bl	8009adc <__sfp_lock_release>
 8009bc2:	0020      	movs	r0, r4
 8009bc4:	2208      	movs	r2, #8
 8009bc6:	0029      	movs	r1, r5
 8009bc8:	6025      	str	r5, [r4, #0]
 8009bca:	60a5      	str	r5, [r4, #8]
 8009bcc:	6065      	str	r5, [r4, #4]
 8009bce:	6125      	str	r5, [r4, #16]
 8009bd0:	6165      	str	r5, [r4, #20]
 8009bd2:	61a5      	str	r5, [r4, #24]
 8009bd4:	305c      	adds	r0, #92	; 0x5c
 8009bd6:	f7fd fa03 	bl	8006fe0 <memset>
 8009bda:	6365      	str	r5, [r4, #52]	; 0x34
 8009bdc:	63a5      	str	r5, [r4, #56]	; 0x38
 8009bde:	64a5      	str	r5, [r4, #72]	; 0x48
 8009be0:	64e5      	str	r5, [r4, #76]	; 0x4c
 8009be2:	0020      	movs	r0, r4
 8009be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009be6:	3468      	adds	r4, #104	; 0x68
 8009be8:	e7d7      	b.n	8009b9a <__sfp+0x1e>
 8009bea:	2104      	movs	r1, #4
 8009bec:	0038      	movs	r0, r7
 8009bee:	f7ff ff57 	bl	8009aa0 <__sfmoreglue>
 8009bf2:	1e04      	subs	r4, r0, #0
 8009bf4:	6030      	str	r0, [r6, #0]
 8009bf6:	d1d5      	bne.n	8009ba4 <__sfp+0x28>
 8009bf8:	f7ff ff70 	bl	8009adc <__sfp_lock_release>
 8009bfc:	230c      	movs	r3, #12
 8009bfe:	603b      	str	r3, [r7, #0]
 8009c00:	e7ef      	b.n	8009be2 <__sfp+0x66>
 8009c02:	46c0      	nop			; (mov r8, r8)
 8009c04:	0800a13c 	.word	0x0800a13c
 8009c08:	ffff0001 	.word	0xffff0001

08009c0c <_fwalk_reent>:
 8009c0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c0e:	0004      	movs	r4, r0
 8009c10:	0006      	movs	r6, r0
 8009c12:	2700      	movs	r7, #0
 8009c14:	9101      	str	r1, [sp, #4]
 8009c16:	3448      	adds	r4, #72	; 0x48
 8009c18:	6863      	ldr	r3, [r4, #4]
 8009c1a:	68a5      	ldr	r5, [r4, #8]
 8009c1c:	9300      	str	r3, [sp, #0]
 8009c1e:	9b00      	ldr	r3, [sp, #0]
 8009c20:	3b01      	subs	r3, #1
 8009c22:	9300      	str	r3, [sp, #0]
 8009c24:	d504      	bpl.n	8009c30 <_fwalk_reent+0x24>
 8009c26:	6824      	ldr	r4, [r4, #0]
 8009c28:	2c00      	cmp	r4, #0
 8009c2a:	d1f5      	bne.n	8009c18 <_fwalk_reent+0xc>
 8009c2c:	0038      	movs	r0, r7
 8009c2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009c30:	89ab      	ldrh	r3, [r5, #12]
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d908      	bls.n	8009c48 <_fwalk_reent+0x3c>
 8009c36:	220e      	movs	r2, #14
 8009c38:	5eab      	ldrsh	r3, [r5, r2]
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	d004      	beq.n	8009c48 <_fwalk_reent+0x3c>
 8009c3e:	0029      	movs	r1, r5
 8009c40:	0030      	movs	r0, r6
 8009c42:	9b01      	ldr	r3, [sp, #4]
 8009c44:	4798      	blx	r3
 8009c46:	4307      	orrs	r7, r0
 8009c48:	3568      	adds	r5, #104	; 0x68
 8009c4a:	e7e8      	b.n	8009c1e <_fwalk_reent+0x12>

08009c4c <__retarget_lock_init_recursive>:
 8009c4c:	4770      	bx	lr

08009c4e <__retarget_lock_acquire_recursive>:
 8009c4e:	4770      	bx	lr

08009c50 <__retarget_lock_release_recursive>:
 8009c50:	4770      	bx	lr
	...

08009c54 <__swhatbuf_r>:
 8009c54:	b570      	push	{r4, r5, r6, lr}
 8009c56:	000e      	movs	r6, r1
 8009c58:	001d      	movs	r5, r3
 8009c5a:	230e      	movs	r3, #14
 8009c5c:	5ec9      	ldrsh	r1, [r1, r3]
 8009c5e:	0014      	movs	r4, r2
 8009c60:	b096      	sub	sp, #88	; 0x58
 8009c62:	2900      	cmp	r1, #0
 8009c64:	da08      	bge.n	8009c78 <__swhatbuf_r+0x24>
 8009c66:	220c      	movs	r2, #12
 8009c68:	5eb3      	ldrsh	r3, [r6, r2]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	602a      	str	r2, [r5, #0]
 8009c6e:	061b      	lsls	r3, r3, #24
 8009c70:	d411      	bmi.n	8009c96 <__swhatbuf_r+0x42>
 8009c72:	2380      	movs	r3, #128	; 0x80
 8009c74:	00db      	lsls	r3, r3, #3
 8009c76:	e00f      	b.n	8009c98 <__swhatbuf_r+0x44>
 8009c78:	466a      	mov	r2, sp
 8009c7a:	f000 f91b 	bl	8009eb4 <_fstat_r>
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	dbf1      	blt.n	8009c66 <__swhatbuf_r+0x12>
 8009c82:	23f0      	movs	r3, #240	; 0xf0
 8009c84:	9901      	ldr	r1, [sp, #4]
 8009c86:	021b      	lsls	r3, r3, #8
 8009c88:	4019      	ands	r1, r3
 8009c8a:	4b05      	ldr	r3, [pc, #20]	; (8009ca0 <__swhatbuf_r+0x4c>)
 8009c8c:	18c9      	adds	r1, r1, r3
 8009c8e:	424b      	negs	r3, r1
 8009c90:	4159      	adcs	r1, r3
 8009c92:	6029      	str	r1, [r5, #0]
 8009c94:	e7ed      	b.n	8009c72 <__swhatbuf_r+0x1e>
 8009c96:	2340      	movs	r3, #64	; 0x40
 8009c98:	2000      	movs	r0, #0
 8009c9a:	6023      	str	r3, [r4, #0]
 8009c9c:	b016      	add	sp, #88	; 0x58
 8009c9e:	bd70      	pop	{r4, r5, r6, pc}
 8009ca0:	ffffe000 	.word	0xffffe000

08009ca4 <__smakebuf_r>:
 8009ca4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ca6:	2602      	movs	r6, #2
 8009ca8:	898b      	ldrh	r3, [r1, #12]
 8009caa:	0005      	movs	r5, r0
 8009cac:	000c      	movs	r4, r1
 8009cae:	4233      	tst	r3, r6
 8009cb0:	d006      	beq.n	8009cc0 <__smakebuf_r+0x1c>
 8009cb2:	0023      	movs	r3, r4
 8009cb4:	3347      	adds	r3, #71	; 0x47
 8009cb6:	6023      	str	r3, [r4, #0]
 8009cb8:	6123      	str	r3, [r4, #16]
 8009cba:	2301      	movs	r3, #1
 8009cbc:	6163      	str	r3, [r4, #20]
 8009cbe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009cc0:	466a      	mov	r2, sp
 8009cc2:	ab01      	add	r3, sp, #4
 8009cc4:	f7ff ffc6 	bl	8009c54 <__swhatbuf_r>
 8009cc8:	9900      	ldr	r1, [sp, #0]
 8009cca:	0007      	movs	r7, r0
 8009ccc:	0028      	movs	r0, r5
 8009cce:	f7ff f92d 	bl	8008f2c <_malloc_r>
 8009cd2:	2800      	cmp	r0, #0
 8009cd4:	d108      	bne.n	8009ce8 <__smakebuf_r+0x44>
 8009cd6:	220c      	movs	r2, #12
 8009cd8:	5ea3      	ldrsh	r3, [r4, r2]
 8009cda:	059a      	lsls	r2, r3, #22
 8009cdc:	d4ef      	bmi.n	8009cbe <__smakebuf_r+0x1a>
 8009cde:	2203      	movs	r2, #3
 8009ce0:	4393      	bics	r3, r2
 8009ce2:	431e      	orrs	r6, r3
 8009ce4:	81a6      	strh	r6, [r4, #12]
 8009ce6:	e7e4      	b.n	8009cb2 <__smakebuf_r+0xe>
 8009ce8:	4b0f      	ldr	r3, [pc, #60]	; (8009d28 <__smakebuf_r+0x84>)
 8009cea:	62ab      	str	r3, [r5, #40]	; 0x28
 8009cec:	2380      	movs	r3, #128	; 0x80
 8009cee:	89a2      	ldrh	r2, [r4, #12]
 8009cf0:	6020      	str	r0, [r4, #0]
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	81a3      	strh	r3, [r4, #12]
 8009cf6:	9b00      	ldr	r3, [sp, #0]
 8009cf8:	6120      	str	r0, [r4, #16]
 8009cfa:	6163      	str	r3, [r4, #20]
 8009cfc:	9b01      	ldr	r3, [sp, #4]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d00d      	beq.n	8009d1e <__smakebuf_r+0x7a>
 8009d02:	0028      	movs	r0, r5
 8009d04:	230e      	movs	r3, #14
 8009d06:	5ee1      	ldrsh	r1, [r4, r3]
 8009d08:	f000 f8e6 	bl	8009ed8 <_isatty_r>
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	d006      	beq.n	8009d1e <__smakebuf_r+0x7a>
 8009d10:	2203      	movs	r2, #3
 8009d12:	89a3      	ldrh	r3, [r4, #12]
 8009d14:	4393      	bics	r3, r2
 8009d16:	001a      	movs	r2, r3
 8009d18:	2301      	movs	r3, #1
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	81a3      	strh	r3, [r4, #12]
 8009d1e:	89a0      	ldrh	r0, [r4, #12]
 8009d20:	4307      	orrs	r7, r0
 8009d22:	81a7      	strh	r7, [r4, #12]
 8009d24:	e7cb      	b.n	8009cbe <__smakebuf_r+0x1a>
 8009d26:	46c0      	nop			; (mov r8, r8)
 8009d28:	08009a91 	.word	0x08009a91

08009d2c <_malloc_usable_size_r>:
 8009d2c:	1f0b      	subs	r3, r1, #4
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	1f18      	subs	r0, r3, #4
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	da01      	bge.n	8009d3a <_malloc_usable_size_r+0xe>
 8009d36:	580b      	ldr	r3, [r1, r0]
 8009d38:	18c0      	adds	r0, r0, r3
 8009d3a:	4770      	bx	lr

08009d3c <_raise_r>:
 8009d3c:	b570      	push	{r4, r5, r6, lr}
 8009d3e:	0004      	movs	r4, r0
 8009d40:	000d      	movs	r5, r1
 8009d42:	291f      	cmp	r1, #31
 8009d44:	d904      	bls.n	8009d50 <_raise_r+0x14>
 8009d46:	2316      	movs	r3, #22
 8009d48:	6003      	str	r3, [r0, #0]
 8009d4a:	2001      	movs	r0, #1
 8009d4c:	4240      	negs	r0, r0
 8009d4e:	bd70      	pop	{r4, r5, r6, pc}
 8009d50:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d004      	beq.n	8009d60 <_raise_r+0x24>
 8009d56:	008a      	lsls	r2, r1, #2
 8009d58:	189b      	adds	r3, r3, r2
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	2a00      	cmp	r2, #0
 8009d5e:	d108      	bne.n	8009d72 <_raise_r+0x36>
 8009d60:	0020      	movs	r0, r4
 8009d62:	f000 f831 	bl	8009dc8 <_getpid_r>
 8009d66:	002a      	movs	r2, r5
 8009d68:	0001      	movs	r1, r0
 8009d6a:	0020      	movs	r0, r4
 8009d6c:	f000 f81a 	bl	8009da4 <_kill_r>
 8009d70:	e7ed      	b.n	8009d4e <_raise_r+0x12>
 8009d72:	2000      	movs	r0, #0
 8009d74:	2a01      	cmp	r2, #1
 8009d76:	d0ea      	beq.n	8009d4e <_raise_r+0x12>
 8009d78:	1c51      	adds	r1, r2, #1
 8009d7a:	d103      	bne.n	8009d84 <_raise_r+0x48>
 8009d7c:	2316      	movs	r3, #22
 8009d7e:	3001      	adds	r0, #1
 8009d80:	6023      	str	r3, [r4, #0]
 8009d82:	e7e4      	b.n	8009d4e <_raise_r+0x12>
 8009d84:	2400      	movs	r4, #0
 8009d86:	0028      	movs	r0, r5
 8009d88:	601c      	str	r4, [r3, #0]
 8009d8a:	4790      	blx	r2
 8009d8c:	0020      	movs	r0, r4
 8009d8e:	e7de      	b.n	8009d4e <_raise_r+0x12>

08009d90 <raise>:
 8009d90:	b510      	push	{r4, lr}
 8009d92:	4b03      	ldr	r3, [pc, #12]	; (8009da0 <raise+0x10>)
 8009d94:	0001      	movs	r1, r0
 8009d96:	6818      	ldr	r0, [r3, #0]
 8009d98:	f7ff ffd0 	bl	8009d3c <_raise_r>
 8009d9c:	bd10      	pop	{r4, pc}
 8009d9e:	46c0      	nop			; (mov r8, r8)
 8009da0:	2000000c 	.word	0x2000000c

08009da4 <_kill_r>:
 8009da4:	2300      	movs	r3, #0
 8009da6:	b570      	push	{r4, r5, r6, lr}
 8009da8:	4d06      	ldr	r5, [pc, #24]	; (8009dc4 <_kill_r+0x20>)
 8009daa:	0004      	movs	r4, r0
 8009dac:	0008      	movs	r0, r1
 8009dae:	0011      	movs	r1, r2
 8009db0:	602b      	str	r3, [r5, #0]
 8009db2:	f7f9 fe7b 	bl	8003aac <_kill>
 8009db6:	1c43      	adds	r3, r0, #1
 8009db8:	d103      	bne.n	8009dc2 <_kill_r+0x1e>
 8009dba:	682b      	ldr	r3, [r5, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d000      	beq.n	8009dc2 <_kill_r+0x1e>
 8009dc0:	6023      	str	r3, [r4, #0]
 8009dc2:	bd70      	pop	{r4, r5, r6, pc}
 8009dc4:	200005a4 	.word	0x200005a4

08009dc8 <_getpid_r>:
 8009dc8:	b510      	push	{r4, lr}
 8009dca:	f7f9 fe69 	bl	8003aa0 <_getpid>
 8009dce:	bd10      	pop	{r4, pc}

08009dd0 <__sread>:
 8009dd0:	b570      	push	{r4, r5, r6, lr}
 8009dd2:	000c      	movs	r4, r1
 8009dd4:	250e      	movs	r5, #14
 8009dd6:	5f49      	ldrsh	r1, [r1, r5]
 8009dd8:	f000 f8a4 	bl	8009f24 <_read_r>
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	db03      	blt.n	8009de8 <__sread+0x18>
 8009de0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009de2:	181b      	adds	r3, r3, r0
 8009de4:	6563      	str	r3, [r4, #84]	; 0x54
 8009de6:	bd70      	pop	{r4, r5, r6, pc}
 8009de8:	89a3      	ldrh	r3, [r4, #12]
 8009dea:	4a02      	ldr	r2, [pc, #8]	; (8009df4 <__sread+0x24>)
 8009dec:	4013      	ands	r3, r2
 8009dee:	81a3      	strh	r3, [r4, #12]
 8009df0:	e7f9      	b.n	8009de6 <__sread+0x16>
 8009df2:	46c0      	nop			; (mov r8, r8)
 8009df4:	ffffefff 	.word	0xffffefff

08009df8 <__swrite>:
 8009df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dfa:	001f      	movs	r7, r3
 8009dfc:	898b      	ldrh	r3, [r1, #12]
 8009dfe:	0005      	movs	r5, r0
 8009e00:	000c      	movs	r4, r1
 8009e02:	0016      	movs	r6, r2
 8009e04:	05db      	lsls	r3, r3, #23
 8009e06:	d505      	bpl.n	8009e14 <__swrite+0x1c>
 8009e08:	230e      	movs	r3, #14
 8009e0a:	5ec9      	ldrsh	r1, [r1, r3]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	2302      	movs	r3, #2
 8009e10:	f000 f874 	bl	8009efc <_lseek_r>
 8009e14:	89a3      	ldrh	r3, [r4, #12]
 8009e16:	4a05      	ldr	r2, [pc, #20]	; (8009e2c <__swrite+0x34>)
 8009e18:	0028      	movs	r0, r5
 8009e1a:	4013      	ands	r3, r2
 8009e1c:	81a3      	strh	r3, [r4, #12]
 8009e1e:	0032      	movs	r2, r6
 8009e20:	230e      	movs	r3, #14
 8009e22:	5ee1      	ldrsh	r1, [r4, r3]
 8009e24:	003b      	movs	r3, r7
 8009e26:	f000 f81f 	bl	8009e68 <_write_r>
 8009e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e2c:	ffffefff 	.word	0xffffefff

08009e30 <__sseek>:
 8009e30:	b570      	push	{r4, r5, r6, lr}
 8009e32:	000c      	movs	r4, r1
 8009e34:	250e      	movs	r5, #14
 8009e36:	5f49      	ldrsh	r1, [r1, r5]
 8009e38:	f000 f860 	bl	8009efc <_lseek_r>
 8009e3c:	89a3      	ldrh	r3, [r4, #12]
 8009e3e:	1c42      	adds	r2, r0, #1
 8009e40:	d103      	bne.n	8009e4a <__sseek+0x1a>
 8009e42:	4a05      	ldr	r2, [pc, #20]	; (8009e58 <__sseek+0x28>)
 8009e44:	4013      	ands	r3, r2
 8009e46:	81a3      	strh	r3, [r4, #12]
 8009e48:	bd70      	pop	{r4, r5, r6, pc}
 8009e4a:	2280      	movs	r2, #128	; 0x80
 8009e4c:	0152      	lsls	r2, r2, #5
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	81a3      	strh	r3, [r4, #12]
 8009e52:	6560      	str	r0, [r4, #84]	; 0x54
 8009e54:	e7f8      	b.n	8009e48 <__sseek+0x18>
 8009e56:	46c0      	nop			; (mov r8, r8)
 8009e58:	ffffefff 	.word	0xffffefff

08009e5c <__sclose>:
 8009e5c:	b510      	push	{r4, lr}
 8009e5e:	230e      	movs	r3, #14
 8009e60:	5ec9      	ldrsh	r1, [r1, r3]
 8009e62:	f000 f815 	bl	8009e90 <_close_r>
 8009e66:	bd10      	pop	{r4, pc}

08009e68 <_write_r>:
 8009e68:	b570      	push	{r4, r5, r6, lr}
 8009e6a:	0004      	movs	r4, r0
 8009e6c:	0008      	movs	r0, r1
 8009e6e:	0011      	movs	r1, r2
 8009e70:	001a      	movs	r2, r3
 8009e72:	2300      	movs	r3, #0
 8009e74:	4d05      	ldr	r5, [pc, #20]	; (8009e8c <_write_r+0x24>)
 8009e76:	602b      	str	r3, [r5, #0]
 8009e78:	f7f9 fe51 	bl	8003b1e <_write>
 8009e7c:	1c43      	adds	r3, r0, #1
 8009e7e:	d103      	bne.n	8009e88 <_write_r+0x20>
 8009e80:	682b      	ldr	r3, [r5, #0]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d000      	beq.n	8009e88 <_write_r+0x20>
 8009e86:	6023      	str	r3, [r4, #0]
 8009e88:	bd70      	pop	{r4, r5, r6, pc}
 8009e8a:	46c0      	nop			; (mov r8, r8)
 8009e8c:	200005a4 	.word	0x200005a4

08009e90 <_close_r>:
 8009e90:	2300      	movs	r3, #0
 8009e92:	b570      	push	{r4, r5, r6, lr}
 8009e94:	4d06      	ldr	r5, [pc, #24]	; (8009eb0 <_close_r+0x20>)
 8009e96:	0004      	movs	r4, r0
 8009e98:	0008      	movs	r0, r1
 8009e9a:	602b      	str	r3, [r5, #0]
 8009e9c:	f7f9 fe5b 	bl	8003b56 <_close>
 8009ea0:	1c43      	adds	r3, r0, #1
 8009ea2:	d103      	bne.n	8009eac <_close_r+0x1c>
 8009ea4:	682b      	ldr	r3, [r5, #0]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d000      	beq.n	8009eac <_close_r+0x1c>
 8009eaa:	6023      	str	r3, [r4, #0]
 8009eac:	bd70      	pop	{r4, r5, r6, pc}
 8009eae:	46c0      	nop			; (mov r8, r8)
 8009eb0:	200005a4 	.word	0x200005a4

08009eb4 <_fstat_r>:
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	b570      	push	{r4, r5, r6, lr}
 8009eb8:	4d06      	ldr	r5, [pc, #24]	; (8009ed4 <_fstat_r+0x20>)
 8009eba:	0004      	movs	r4, r0
 8009ebc:	0008      	movs	r0, r1
 8009ebe:	0011      	movs	r1, r2
 8009ec0:	602b      	str	r3, [r5, #0]
 8009ec2:	f7f9 fe52 	bl	8003b6a <_fstat>
 8009ec6:	1c43      	adds	r3, r0, #1
 8009ec8:	d103      	bne.n	8009ed2 <_fstat_r+0x1e>
 8009eca:	682b      	ldr	r3, [r5, #0]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d000      	beq.n	8009ed2 <_fstat_r+0x1e>
 8009ed0:	6023      	str	r3, [r4, #0]
 8009ed2:	bd70      	pop	{r4, r5, r6, pc}
 8009ed4:	200005a4 	.word	0x200005a4

08009ed8 <_isatty_r>:
 8009ed8:	2300      	movs	r3, #0
 8009eda:	b570      	push	{r4, r5, r6, lr}
 8009edc:	4d06      	ldr	r5, [pc, #24]	; (8009ef8 <_isatty_r+0x20>)
 8009ede:	0004      	movs	r4, r0
 8009ee0:	0008      	movs	r0, r1
 8009ee2:	602b      	str	r3, [r5, #0]
 8009ee4:	f7f9 fe4f 	bl	8003b86 <_isatty>
 8009ee8:	1c43      	adds	r3, r0, #1
 8009eea:	d103      	bne.n	8009ef4 <_isatty_r+0x1c>
 8009eec:	682b      	ldr	r3, [r5, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d000      	beq.n	8009ef4 <_isatty_r+0x1c>
 8009ef2:	6023      	str	r3, [r4, #0]
 8009ef4:	bd70      	pop	{r4, r5, r6, pc}
 8009ef6:	46c0      	nop			; (mov r8, r8)
 8009ef8:	200005a4 	.word	0x200005a4

08009efc <_lseek_r>:
 8009efc:	b570      	push	{r4, r5, r6, lr}
 8009efe:	0004      	movs	r4, r0
 8009f00:	0008      	movs	r0, r1
 8009f02:	0011      	movs	r1, r2
 8009f04:	001a      	movs	r2, r3
 8009f06:	2300      	movs	r3, #0
 8009f08:	4d05      	ldr	r5, [pc, #20]	; (8009f20 <_lseek_r+0x24>)
 8009f0a:	602b      	str	r3, [r5, #0]
 8009f0c:	f7f9 fe44 	bl	8003b98 <_lseek>
 8009f10:	1c43      	adds	r3, r0, #1
 8009f12:	d103      	bne.n	8009f1c <_lseek_r+0x20>
 8009f14:	682b      	ldr	r3, [r5, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d000      	beq.n	8009f1c <_lseek_r+0x20>
 8009f1a:	6023      	str	r3, [r4, #0]
 8009f1c:	bd70      	pop	{r4, r5, r6, pc}
 8009f1e:	46c0      	nop			; (mov r8, r8)
 8009f20:	200005a4 	.word	0x200005a4

08009f24 <_read_r>:
 8009f24:	b570      	push	{r4, r5, r6, lr}
 8009f26:	0004      	movs	r4, r0
 8009f28:	0008      	movs	r0, r1
 8009f2a:	0011      	movs	r1, r2
 8009f2c:	001a      	movs	r2, r3
 8009f2e:	2300      	movs	r3, #0
 8009f30:	4d05      	ldr	r5, [pc, #20]	; (8009f48 <_read_r+0x24>)
 8009f32:	602b      	str	r3, [r5, #0]
 8009f34:	f7f9 fdd6 	bl	8003ae4 <_read>
 8009f38:	1c43      	adds	r3, r0, #1
 8009f3a:	d103      	bne.n	8009f44 <_read_r+0x20>
 8009f3c:	682b      	ldr	r3, [r5, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d000      	beq.n	8009f44 <_read_r+0x20>
 8009f42:	6023      	str	r3, [r4, #0]
 8009f44:	bd70      	pop	{r4, r5, r6, pc}
 8009f46:	46c0      	nop			; (mov r8, r8)
 8009f48:	200005a4 	.word	0x200005a4

08009f4c <_init>:
 8009f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f4e:	46c0      	nop			; (mov r8, r8)
 8009f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f52:	bc08      	pop	{r3}
 8009f54:	469e      	mov	lr, r3
 8009f56:	4770      	bx	lr

08009f58 <_fini>:
 8009f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f5a:	46c0      	nop			; (mov r8, r8)
 8009f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f5e:	bc08      	pop	{r3}
 8009f60:	469e      	mov	lr, r3
 8009f62:	4770      	bx	lr
